
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08013624  08013624  00023624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137cc  080137cc  000304a4  2**0
                  CONTENTS
  4 .ARM          00000008  080137cc  080137cc  000237cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137d4  080137d4  000304a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137d4  080137d4  000237d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137d8  080137d8  000237d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  080137dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dffc  200004a4  08013c80  000304a4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  2000e4a0  08013c80  0003e4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033895  00000000  00000000  000304d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006197  00000000  00000000  00063d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d68  00000000  00000000  00069f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ae0  00000000  00000000  0006bc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002932e  00000000  00000000  0006d748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f302  00000000  00000000  00096a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d908d  00000000  00000000  000b5d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0018ee05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ca0  00000000  00000000  0018eef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a4 	.word	0x200004a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801360c 	.word	0x0801360c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	0801360c 	.word	0x0801360c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_d2uiz>:
 8000548:	004a      	lsls	r2, r1, #1
 800054a:	d211      	bcs.n	8000570 <__aeabi_d2uiz+0x28>
 800054c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000550:	d211      	bcs.n	8000576 <__aeabi_d2uiz+0x2e>
 8000552:	d50d      	bpl.n	8000570 <__aeabi_d2uiz+0x28>
 8000554:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000558:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800055c:	d40e      	bmi.n	800057c <__aeabi_d2uiz+0x34>
 800055e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000566:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056a:	fa23 f002 	lsr.w	r0, r3, r2
 800056e:	4770      	bx	lr
 8000570:	f04f 0000 	mov.w	r0, #0
 8000574:	4770      	bx	lr
 8000576:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057a:	d102      	bne.n	8000582 <__aeabi_d2uiz+0x3a>
 800057c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000580:	4770      	bx	lr
 8000582:	f04f 0000 	mov.w	r0, #0
 8000586:	4770      	bx	lr

08000588 <__aeabi_d2f>:
 8000588:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800058c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000590:	bf24      	itt	cs
 8000592:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000596:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800059a:	d90d      	bls.n	80005b8 <__aeabi_d2f+0x30>
 800059c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b0:	bf08      	it	eq
 80005b2:	f020 0001 	biceq.w	r0, r0, #1
 80005b6:	4770      	bx	lr
 80005b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005bc:	d121      	bne.n	8000602 <__aeabi_d2f+0x7a>
 80005be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005c2:	bfbc      	itt	lt
 80005c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c8:	4770      	bxlt	lr
 80005ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005d2:	f1c2 0218 	rsb	r2, r2, #24
 80005d6:	f1c2 0c20 	rsb	ip, r2, #32
 80005da:	fa10 f30c 	lsls.w	r3, r0, ip
 80005de:	fa20 f002 	lsr.w	r0, r0, r2
 80005e2:	bf18      	it	ne
 80005e4:	f040 0001 	orrne.w	r0, r0, #1
 80005e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005f4:	ea40 000c 	orr.w	r0, r0, ip
 80005f8:	fa23 f302 	lsr.w	r3, r3, r2
 80005fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000600:	e7cc      	b.n	800059c <__aeabi_d2f+0x14>
 8000602:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000606:	d107      	bne.n	8000618 <__aeabi_d2f+0x90>
 8000608:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800060c:	bf1e      	ittt	ne
 800060e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000612:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000616:	4770      	bxne	lr
 8000618:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800061c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000620:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000638:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800063c:	f000 b972 	b.w	8000924 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9e08      	ldr	r6, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	4688      	mov	r8, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000666:	428a      	cmp	r2, r1
 8000668:	4615      	mov	r5, r2
 800066a:	d967      	bls.n	800073c <__udivmoddi4+0xe4>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b14a      	cbz	r2, 8000686 <__udivmoddi4+0x2e>
 8000672:	f1c2 0720 	rsb	r7, r2, #32
 8000676:	fa01 f302 	lsl.w	r3, r1, r2
 800067a:	fa20 f707 	lsr.w	r7, r0, r7
 800067e:	4095      	lsls	r5, r2
 8000680:	ea47 0803 	orr.w	r8, r7, r3
 8000684:	4094      	lsls	r4, r2
 8000686:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800068a:	0c23      	lsrs	r3, r4, #16
 800068c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000690:	fa1f fc85 	uxth.w	ip, r5
 8000694:	fb0e 8817 	mls	r8, lr, r7, r8
 8000698:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800069c:	fb07 f10c 	mul.w	r1, r7, ip
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d909      	bls.n	80006b8 <__udivmoddi4+0x60>
 80006a4:	18eb      	adds	r3, r5, r3
 80006a6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006aa:	f080 811b 	bcs.w	80008e4 <__udivmoddi4+0x28c>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 8118 	bls.w	80008e4 <__udivmoddi4+0x28c>
 80006b4:	3f02      	subs	r7, #2
 80006b6:	442b      	add	r3, r5
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006cc:	45a4      	cmp	ip, r4
 80006ce:	d909      	bls.n	80006e4 <__udivmoddi4+0x8c>
 80006d0:	192c      	adds	r4, r5, r4
 80006d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006d6:	f080 8107 	bcs.w	80008e8 <__udivmoddi4+0x290>
 80006da:	45a4      	cmp	ip, r4
 80006dc:	f240 8104 	bls.w	80008e8 <__udivmoddi4+0x290>
 80006e0:	3802      	subs	r0, #2
 80006e2:	442c      	add	r4, r5
 80006e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e8:	eba4 040c 	sub.w	r4, r4, ip
 80006ec:	2700      	movs	r7, #0
 80006ee:	b11e      	cbz	r6, 80006f8 <__udivmoddi4+0xa0>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c6 4300 	strd	r4, r3, [r6]
 80006f8:	4639      	mov	r1, r7
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d909      	bls.n	8000716 <__udivmoddi4+0xbe>
 8000702:	2e00      	cmp	r6, #0
 8000704:	f000 80eb 	beq.w	80008de <__udivmoddi4+0x286>
 8000708:	2700      	movs	r7, #0
 800070a:	e9c6 0100 	strd	r0, r1, [r6]
 800070e:	4638      	mov	r0, r7
 8000710:	4639      	mov	r1, r7
 8000712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000716:	fab3 f783 	clz	r7, r3
 800071a:	2f00      	cmp	r7, #0
 800071c:	d147      	bne.n	80007ae <__udivmoddi4+0x156>
 800071e:	428b      	cmp	r3, r1
 8000720:	d302      	bcc.n	8000728 <__udivmoddi4+0xd0>
 8000722:	4282      	cmp	r2, r0
 8000724:	f200 80fa 	bhi.w	800091c <__udivmoddi4+0x2c4>
 8000728:	1a84      	subs	r4, r0, r2
 800072a:	eb61 0303 	sbc.w	r3, r1, r3
 800072e:	2001      	movs	r0, #1
 8000730:	4698      	mov	r8, r3
 8000732:	2e00      	cmp	r6, #0
 8000734:	d0e0      	beq.n	80006f8 <__udivmoddi4+0xa0>
 8000736:	e9c6 4800 	strd	r4, r8, [r6]
 800073a:	e7dd      	b.n	80006f8 <__udivmoddi4+0xa0>
 800073c:	b902      	cbnz	r2, 8000740 <__udivmoddi4+0xe8>
 800073e:	deff      	udf	#255	; 0xff
 8000740:	fab2 f282 	clz	r2, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	f040 808f 	bne.w	8000868 <__udivmoddi4+0x210>
 800074a:	1b49      	subs	r1, r1, r5
 800074c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000750:	fa1f f885 	uxth.w	r8, r5
 8000754:	2701      	movs	r7, #1
 8000756:	fbb1 fcfe 	udiv	ip, r1, lr
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000760:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000764:	fb08 f10c 	mul.w	r1, r8, ip
 8000768:	4299      	cmp	r1, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x124>
 800076c:	18eb      	adds	r3, r5, r3
 800076e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x122>
 8000774:	4299      	cmp	r1, r3
 8000776:	f200 80cd 	bhi.w	8000914 <__udivmoddi4+0x2bc>
 800077a:	4684      	mov	ip, r0
 800077c:	1a59      	subs	r1, r3, r1
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb1 f0fe 	udiv	r0, r1, lr
 8000784:	fb0e 1410 	mls	r4, lr, r0, r1
 8000788:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800078c:	fb08 f800 	mul.w	r8, r8, r0
 8000790:	45a0      	cmp	r8, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x14c>
 8000794:	192c      	adds	r4, r5, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x14a>
 800079c:	45a0      	cmp	r8, r4
 800079e:	f200 80b6 	bhi.w	800090e <__udivmoddi4+0x2b6>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 0408 	sub.w	r4, r4, r8
 80007a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ac:	e79f      	b.n	80006ee <__udivmoddi4+0x96>
 80007ae:	f1c7 0c20 	rsb	ip, r7, #32
 80007b2:	40bb      	lsls	r3, r7
 80007b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007bc:	fa01 f407 	lsl.w	r4, r1, r7
 80007c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007cc:	4325      	orrs	r5, r4
 80007ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80007d2:	0c2c      	lsrs	r4, r5, #16
 80007d4:	fb08 3319 	mls	r3, r8, r9, r3
 80007d8:	fa1f fa8e 	uxth.w	sl, lr
 80007dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007e0:	fb09 f40a 	mul.w	r4, r9, sl
 80007e4:	429c      	cmp	r4, r3
 80007e6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ea:	fa00 f107 	lsl.w	r1, r0, r7
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b0>
 80007f0:	eb1e 0303 	adds.w	r3, lr, r3
 80007f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80007f8:	f080 8087 	bcs.w	800090a <__udivmoddi4+0x2b2>
 80007fc:	429c      	cmp	r4, r3
 80007fe:	f240 8084 	bls.w	800090a <__udivmoddi4+0x2b2>
 8000802:	f1a9 0902 	sub.w	r9, r9, #2
 8000806:	4473      	add	r3, lr
 8000808:	1b1b      	subs	r3, r3, r4
 800080a:	b2ad      	uxth	r5, r5
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000818:	fb00 fa0a 	mul.w	sl, r0, sl
 800081c:	45a2      	cmp	sl, r4
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1da>
 8000820:	eb1e 0404 	adds.w	r4, lr, r4
 8000824:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000828:	d26b      	bcs.n	8000902 <__udivmoddi4+0x2aa>
 800082a:	45a2      	cmp	sl, r4
 800082c:	d969      	bls.n	8000902 <__udivmoddi4+0x2aa>
 800082e:	3802      	subs	r0, #2
 8000830:	4474      	add	r4, lr
 8000832:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000836:	fba0 8902 	umull	r8, r9, r0, r2
 800083a:	eba4 040a 	sub.w	r4, r4, sl
 800083e:	454c      	cmp	r4, r9
 8000840:	46c2      	mov	sl, r8
 8000842:	464b      	mov	r3, r9
 8000844:	d354      	bcc.n	80008f0 <__udivmoddi4+0x298>
 8000846:	d051      	beq.n	80008ec <__udivmoddi4+0x294>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d069      	beq.n	8000920 <__udivmoddi4+0x2c8>
 800084c:	ebb1 050a 	subs.w	r5, r1, sl
 8000850:	eb64 0403 	sbc.w	r4, r4, r3
 8000854:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000858:	40fd      	lsrs	r5, r7
 800085a:	40fc      	lsrs	r4, r7
 800085c:	ea4c 0505 	orr.w	r5, ip, r5
 8000860:	e9c6 5400 	strd	r5, r4, [r6]
 8000864:	2700      	movs	r7, #0
 8000866:	e747      	b.n	80006f8 <__udivmoddi4+0xa0>
 8000868:	f1c2 0320 	rsb	r3, r2, #32
 800086c:	fa20 f703 	lsr.w	r7, r0, r3
 8000870:	4095      	lsls	r5, r2
 8000872:	fa01 f002 	lsl.w	r0, r1, r2
 8000876:	fa21 f303 	lsr.w	r3, r1, r3
 800087a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800087e:	4338      	orrs	r0, r7
 8000880:	0c01      	lsrs	r1, r0, #16
 8000882:	fbb3 f7fe 	udiv	r7, r3, lr
 8000886:	fa1f f885 	uxth.w	r8, r5
 800088a:	fb0e 3317 	mls	r3, lr, r7, r3
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb07 f308 	mul.w	r3, r7, r8
 8000896:	428b      	cmp	r3, r1
 8000898:	fa04 f402 	lsl.w	r4, r4, r2
 800089c:	d907      	bls.n	80008ae <__udivmoddi4+0x256>
 800089e:	1869      	adds	r1, r5, r1
 80008a0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008a4:	d22f      	bcs.n	8000906 <__udivmoddi4+0x2ae>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d92d      	bls.n	8000906 <__udivmoddi4+0x2ae>
 80008aa:	3f02      	subs	r7, #2
 80008ac:	4429      	add	r1, r5
 80008ae:	1acb      	subs	r3, r1, r3
 80008b0:	b281      	uxth	r1, r0
 80008b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008be:	fb00 f308 	mul.w	r3, r0, r8
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x27e>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008cc:	d217      	bcs.n	80008fe <__udivmoddi4+0x2a6>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d915      	bls.n	80008fe <__udivmoddi4+0x2a6>
 80008d2:	3802      	subs	r0, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1ac9      	subs	r1, r1, r3
 80008d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008dc:	e73b      	b.n	8000756 <__udivmoddi4+0xfe>
 80008de:	4637      	mov	r7, r6
 80008e0:	4630      	mov	r0, r6
 80008e2:	e709      	b.n	80006f8 <__udivmoddi4+0xa0>
 80008e4:	4607      	mov	r7, r0
 80008e6:	e6e7      	b.n	80006b8 <__udivmoddi4+0x60>
 80008e8:	4618      	mov	r0, r3
 80008ea:	e6fb      	b.n	80006e4 <__udivmoddi4+0x8c>
 80008ec:	4541      	cmp	r1, r8
 80008ee:	d2ab      	bcs.n	8000848 <__udivmoddi4+0x1f0>
 80008f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008f4:	eb69 020e 	sbc.w	r2, r9, lr
 80008f8:	3801      	subs	r0, #1
 80008fa:	4613      	mov	r3, r2
 80008fc:	e7a4      	b.n	8000848 <__udivmoddi4+0x1f0>
 80008fe:	4660      	mov	r0, ip
 8000900:	e7e9      	b.n	80008d6 <__udivmoddi4+0x27e>
 8000902:	4618      	mov	r0, r3
 8000904:	e795      	b.n	8000832 <__udivmoddi4+0x1da>
 8000906:	4667      	mov	r7, ip
 8000908:	e7d1      	b.n	80008ae <__udivmoddi4+0x256>
 800090a:	4681      	mov	r9, r0
 800090c:	e77c      	b.n	8000808 <__udivmoddi4+0x1b0>
 800090e:	3802      	subs	r0, #2
 8000910:	442c      	add	r4, r5
 8000912:	e747      	b.n	80007a4 <__udivmoddi4+0x14c>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	442b      	add	r3, r5
 800091a:	e72f      	b.n	800077c <__udivmoddi4+0x124>
 800091c:	4638      	mov	r0, r7
 800091e:	e708      	b.n	8000732 <__udivmoddi4+0xda>
 8000920:	4637      	mov	r7, r6
 8000922:	e6e9      	b.n	80006f8 <__udivmoddi4+0xa0>

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_Init+0x40>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_Init+0x40>)
 800093e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x40>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f8fa 	bl	8000b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f00f fb28 	bl	800ffac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f00f fa5e 	bl	800fe1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023c00 	.word	0x40023c00

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000400 	.word	0x20000400
 8000990:	2000b194 	.word	0x2000b194

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	2000b194 	.word	0x2000b194

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff ffee 	bl	8000994 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_Delay+0x40>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffde 	bl	8000994 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000400 	.word	0x20000400

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ff4c 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b72:	f7ff ff61 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	6978      	ldr	r0, [r7, #20]
 8000b7e:	f7ff ffb1 	bl	8000ae4 <NVIC_EncodePriority>
 8000b82:	4602      	mov	r2, r0
 8000b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff80 	bl	8000a90 <__NVIC_SetPriority>
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff54 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fee8 	bl	8000994 <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e099      	b.n	8000d04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0201 	bic.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bf0:	e00f      	b.n	8000c12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bf2:	f7ff fecf 	bl	8000994 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b05      	cmp	r3, #5
 8000bfe:	d908      	bls.n	8000c12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2220      	movs	r2, #32
 8000c04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2203      	movs	r2, #3
 8000c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e078      	b.n	8000d04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1e8      	bne.n	8000bf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <HAL_DMA_Init+0x158>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d107      	bne.n	8000c7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4313      	orrs	r3, r2
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f023 0307 	bic.w	r3, r3, #7
 8000c92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d117      	bne.n	8000cd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00e      	beq.n	8000cd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 fae7 	bl	800128c <DMA_CheckFifoParam>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d008      	beq.n	8000cd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2240      	movs	r2, #64	; 0x40
 8000cc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e016      	b.n	8000d04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 fa9e 	bl	8001220 <DMA_CalcBaseAndBitshift>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cec:	223f      	movs	r2, #63	; 0x3f
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	f010803f 	.word	0xf010803f

08000d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d101      	bne.n	8000d36 <HAL_DMA_Start_IT+0x26>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e048      	b.n	8000dc8 <HAL_DMA_Start_IT+0xb8>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d137      	bne.n	8000dba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2200      	movs	r2, #0
 8000d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 fa30 	bl	80011c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d68:	223f      	movs	r2, #63	; 0x3f
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0216 	orr.w	r2, r2, #22
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	695a      	ldr	r2, [r3, #20]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0208 	orr.w	r2, r2, #8
 8000da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e005      	b.n	8000dc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dde:	f7ff fdd9 	bl	8000994 <HAL_GetTick>
 8000de2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d008      	beq.n	8000e02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e052      	b.n	8000ea8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0216 	bic.w	r2, r2, #22
 8000e10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_DMA_Abort+0x62>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0208 	bic.w	r2, r2, #8
 8000e40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e52:	e013      	b.n	8000e7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e54:	f7ff fd9e 	bl	8000994 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	d90c      	bls.n	8000e7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2220      	movs	r2, #32
 8000e66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2203      	movs	r2, #3
 8000e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e015      	b.n	8000ea8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1e4      	bne.n	8000e54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8e:	223f      	movs	r2, #63	; 0x3f
 8000e90:	409a      	lsls	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ebc:	4b92      	ldr	r3, [pc, #584]	; (8001108 <HAL_DMA_IRQHandler+0x258>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a92      	ldr	r2, [pc, #584]	; (800110c <HAL_DMA_IRQHandler+0x25c>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	0a9b      	lsrs	r3, r3, #10
 8000ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eda:	2208      	movs	r2, #8
 8000edc:	409a      	lsls	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d01a      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0204 	bic.w	r2, r2, #4
 8000f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f08:	2208      	movs	r2, #8
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f14:	f043 0201 	orr.w	r2, r3, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f20:	2201      	movs	r2, #1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d012      	beq.n	8000f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00b      	beq.n	8000f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f3e:	2201      	movs	r2, #1
 8000f40:	409a      	lsls	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4a:	f043 0202 	orr.w	r2, r3, #2
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f56:	2204      	movs	r2, #4
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d012      	beq.n	8000f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f74:	2204      	movs	r2, #4
 8000f76:	409a      	lsls	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f80:	f043 0204 	orr.w	r2, r3, #4
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d043      	beq.n	8001020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d03c      	beq.n	8001020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000faa:	2210      	movs	r2, #16
 8000fac:	409a      	lsls	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d018      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d108      	bne.n	8000fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d024      	beq.n	8001020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	4798      	blx	r3
 8000fde:	e01f      	b.n	8001020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d01b      	beq.n	8001020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	4798      	blx	r3
 8000ff0:	e016      	b.n	8001020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d107      	bne.n	8001010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0208 	bic.w	r2, r2, #8
 800100e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001024:	2220      	movs	r2, #32
 8001026:	409a      	lsls	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 808e 	beq.w	800114e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 8086 	beq.w	800114e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001046:	2220      	movs	r2, #32
 8001048:	409a      	lsls	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b05      	cmp	r3, #5
 8001058:	d136      	bne.n	80010c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0216 	bic.w	r2, r2, #22
 8001068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <HAL_DMA_IRQHandler+0x1da>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0208 	bic.w	r2, r2, #8
 8001098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109e:	223f      	movs	r2, #63	; 0x3f
 80010a0:	409a      	lsls	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d07d      	beq.n	80011ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4798      	blx	r3
        }
        return;
 80010c6:	e078      	b.n	80011ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d01c      	beq.n	8001110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d108      	bne.n	80010f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d030      	beq.n	800114e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	4798      	blx	r3
 80010f4:	e02b      	b.n	800114e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d027      	beq.n	800114e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	4798      	blx	r3
 8001106:	e022      	b.n	800114e <HAL_DMA_IRQHandler+0x29e>
 8001108:	20000438 	.word	0x20000438
 800110c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10f      	bne.n	800113e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0210 	bic.w	r2, r2, #16
 800112c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001152:	2b00      	cmp	r3, #0
 8001154:	d032      	beq.n	80011bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d022      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2205      	movs	r2, #5
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0201 	bic.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	429a      	cmp	r2, r3
 8001184:	d307      	bcc.n	8001196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f2      	bne.n	800117a <HAL_DMA_IRQHandler+0x2ca>
 8001194:	e000      	b.n	8001198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001196:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	4798      	blx	r3
 80011b8:	e000      	b.n	80011bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80011ba:	bf00      	nop
    }
  }
}
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop

080011c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b40      	cmp	r3, #64	; 0x40
 80011f0:	d108      	bne.n	8001204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001202:	e007      	b.n	8001214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3b10      	subs	r3, #16
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <DMA_CalcBaseAndBitshift+0x64>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <DMA_CalcBaseAndBitshift+0x68>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d909      	bls.n	8001262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001256:	f023 0303 	bic.w	r3, r3, #3
 800125a:	1d1a      	adds	r2, r3, #4
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	659a      	str	r2, [r3, #88]	; 0x58
 8001260:	e007      	b.n	8001272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	aaaaaaab 	.word	0xaaaaaaab
 8001288:	080136f0 	.word	0x080136f0

0800128c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d11f      	bne.n	80012e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d855      	bhi.n	8001358 <DMA_CheckFifoParam+0xcc>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <DMA_CheckFifoParam+0x28>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012d7 	.word	0x080012d7
 80012bc:	080012c5 	.word	0x080012c5
 80012c0:	08001359 	.word	0x08001359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d045      	beq.n	800135c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012d4:	e042      	b.n	800135c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012de:	d13f      	bne.n	8001360 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012e4:	e03c      	b.n	8001360 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ee:	d121      	bne.n	8001334 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d836      	bhi.n	8001364 <DMA_CheckFifoParam+0xd8>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <DMA_CheckFifoParam+0x70>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	08001313 	.word	0x08001313
 8001304:	0800130d 	.word	0x0800130d
 8001308:	08001325 	.word	0x08001325
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
      break;
 8001310:	e02f      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001322:	e021      	b.n	8001368 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800132c:	d11e      	bne.n	800136c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001332:	e01b      	b.n	800136c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d902      	bls.n	8001340 <DMA_CheckFifoParam+0xb4>
 800133a:	2b03      	cmp	r3, #3
 800133c:	d003      	beq.n	8001346 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800133e:	e018      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
      break;
 8001344:	e015      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00e      	beq.n	8001370 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
      break;
 8001356:	e00b      	b.n	8001370 <DMA_CheckFifoParam+0xe4>
      break;
 8001358:	bf00      	nop
 800135a:	e00a      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      break;
 800135c:	bf00      	nop
 800135e:	e008      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      break;
 8001360:	bf00      	nop
 8001362:	e006      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      break;
 8001364:	bf00      	nop
 8001366:	e004      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      break;
 8001368:	bf00      	nop
 800136a:	e002      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      break;   
 800136c:	bf00      	nop
 800136e:	e000      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      break;
 8001370:	bf00      	nop
    }
  } 
  
  return status; 
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	e16b      	b.n	8001674 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 815a 	bne.w	800166e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x4a>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	69b9      	ldr	r1, [r7, #24]
 800140e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0203 	and.w	r2, r3, #3
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d00b      	beq.n	8001466 <HAL_GPIO_Init+0xe6>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145a:	2b11      	cmp	r3, #17
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b12      	cmp	r3, #18
 8001464:	d130      	bne.n	80014c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 0201 	and.w	r2, r3, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80b4 	beq.w	800166e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_GPIO_Init+0x308>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a5e      	ldr	r2, [pc, #376]	; (8001688 <HAL_GPIO_Init+0x308>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <HAL_GPIO_Init+0x308>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001522:	4a5a      	ldr	r2, [pc, #360]	; (800168c <HAL_GPIO_Init+0x30c>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a51      	ldr	r2, [pc, #324]	; (8001690 <HAL_GPIO_Init+0x310>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d02b      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a50      	ldr	r2, [pc, #320]	; (8001694 <HAL_GPIO_Init+0x314>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d025      	beq.n	80015a2 <HAL_GPIO_Init+0x222>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4f      	ldr	r2, [pc, #316]	; (8001698 <HAL_GPIO_Init+0x318>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01f      	beq.n	800159e <HAL_GPIO_Init+0x21e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4e      	ldr	r2, [pc, #312]	; (800169c <HAL_GPIO_Init+0x31c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x21a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <HAL_GPIO_Init+0x320>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x216>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <HAL_GPIO_Init+0x324>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x212>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <HAL_GPIO_Init+0x328>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <HAL_GPIO_Init+0x32c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x20a>
 8001586:	2307      	movs	r3, #7
 8001588:	e00e      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800158a:	2308      	movs	r3, #8
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800158e:	2306      	movs	r3, #6
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b8:	4934      	ldr	r1, [pc, #208]	; (800168c <HAL_GPIO_Init+0x30c>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_GPIO_Init+0x330>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ea:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <HAL_GPIO_Init+0x330>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x330>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_GPIO_Init+0x330>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_GPIO_Init+0x330>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f ae90 	bls.w	800139c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	3724      	adds	r7, #36	; 0x24
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40021c00 	.word	0x40021c00
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	401a      	ands	r2, r3
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d104      	bne.n	800170a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	041a      	lsls	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b08f      	sub	sp, #60	; 0x3c
 8001720:	af0a      	add	r7, sp, #40	; 0x28
 8001722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e054      	b.n	80017d8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f00e fd1d 	bl	8010188 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fabb 	bl	8004ce8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	687e      	ldr	r6, [r7, #4]
 800177a:	466d      	mov	r5, sp
 800177c:	f106 0410 	add.w	r4, r6, #16
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001790:	1d33      	adds	r3, r6, #4
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f003 fa35 	bl	8004c04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fab2 	bl	8004d0a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	687e      	ldr	r6, [r7, #4]
 80017ae:	466d      	mov	r5, sp
 80017b0:	f106 0410 	add.w	r4, r6, #16
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c4:	1d33      	adds	r3, r6, #4
 80017c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f003 fbc5 	bl	8004f58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	70fb      	strb	r3, [r7, #3]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70bb      	strb	r3, [r7, #2]
 80017f6:	4613      	mov	r3, r2
 80017f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_HCD_HC_Init+0x28>
 8001804:	2302      	movs	r3, #2
 8001806:	e07f      	b.n	8001908 <HAL_HCD_HC_Init+0x128>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	333d      	adds	r3, #61	; 0x3d
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3338      	adds	r3, #56	; 0x38
 8001834:	787a      	ldrb	r2, [r7, #1]
 8001836:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3340      	adds	r3, #64	; 0x40
 8001848:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800184a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3339      	adds	r3, #57	; 0x39
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	333f      	adds	r3, #63	; 0x3f
 8001870:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001874:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800187e:	b2d8      	uxtb	r0, r3
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	333a      	adds	r3, #58	; 0x3a
 800188e:	4602      	mov	r2, r0
 8001890:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001892:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001896:	2b00      	cmp	r3, #0
 8001898:	da0a      	bge.n	80018b0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	333b      	adds	r3, #59	; 0x3b
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e009      	b.n	80018c4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	333b      	adds	r3, #59	; 0x3b
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	333c      	adds	r3, #60	; 0x3c
 80018d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018d8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	787c      	ldrb	r4, [r7, #1]
 80018e0:	78ba      	ldrb	r2, [r7, #2]
 80018e2:	78f9      	ldrb	r1, [r7, #3]
 80018e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4623      	mov	r3, r4
 80018f6:	f003 fcb1 	bl	800525c <USB_HC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}

08001910 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_HCD_HC_Halt+0x1e>
 800192a:	2302      	movs	r3, #2
 800192c:	e00f      	b.n	800194e <HAL_HCD_HC_Halt+0x3e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f003 feeb 	bl	800571a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4603      	mov	r3, r0
 8001968:	70fb      	strb	r3, [r7, #3]
 800196a:	460b      	mov	r3, r1
 800196c:	70bb      	strb	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	333b      	adds	r3, #59	; 0x3b
 8001982:	78ba      	ldrb	r2, [r7, #2]
 8001984:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	333f      	adds	r3, #63	; 0x3f
 8001996:	787a      	ldrb	r2, [r7, #1]
 8001998:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800199a:	7c3b      	ldrb	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10a      	bne.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3342      	adds	r3, #66	; 0x42
 80019b0:	2203      	movs	r2, #3
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e009      	b.n	80019ca <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3342      	adds	r3, #66	; 0x42
 80019c6:	2202      	movs	r2, #2
 80019c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019ca:	787b      	ldrb	r3, [r7, #1]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	f200 80d6 	bhi.w	8001b7e <HAL_HCD_HC_SubmitRequest+0x226>
 80019d2:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <HAL_HCD_HC_SubmitRequest+0x80>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019e9 	.word	0x080019e9
 80019dc:	08001b69 	.word	0x08001b69
 80019e0:	08001a55 	.word	0x08001a55
 80019e4:	08001adf 	.word	0x08001adf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019e8:	7c3b      	ldrb	r3, [r7, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	f040 80c9 	bne.w	8001b82 <HAL_HCD_HC_SubmitRequest+0x22a>
 80019f0:	78bb      	ldrb	r3, [r7, #2]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 80c5 	bne.w	8001b82 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80019f8:	8b3b      	ldrh	r3, [r7, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3351      	adds	r3, #81	; 0x51
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3351      	adds	r3, #81	; 0x51
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3342      	adds	r3, #66	; 0x42
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a3c:	e0a1      	b.n	8001b82 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3342      	adds	r3, #66	; 0x42
 8001a4e:	2202      	movs	r2, #2
 8001a50:	701a      	strb	r2, [r3, #0]
      break;
 8001a52:	e096      	b.n	8001b82 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a54:	78bb      	ldrb	r3, [r7, #2]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d120      	bne.n	8001a9c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	3351      	adds	r3, #81	; 0x51
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10a      	bne.n	8001a86 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3342      	adds	r3, #66	; 0x42
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a84:	e07e      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3342      	adds	r3, #66	; 0x42
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
      break;
 8001a9a:	e073      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3350      	adds	r3, #80	; 0x50
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3342      	adds	r3, #66	; 0x42
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
      break;
 8001ac6:	e05d      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3342      	adds	r3, #66	; 0x42
 8001ad8:	2202      	movs	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
      break;
 8001adc:	e052      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ade:	78bb      	ldrb	r3, [r7, #2]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d120      	bne.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	3351      	adds	r3, #81	; 0x51
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	3342      	adds	r3, #66	; 0x42
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b0e:	e039      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3342      	adds	r3, #66	; 0x42
 8001b20:	2202      	movs	r2, #2
 8001b22:	701a      	strb	r2, [r3, #0]
      break;
 8001b24:	e02e      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3350      	adds	r3, #80	; 0x50
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3342      	adds	r3, #66	; 0x42
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
      break;
 8001b50:	e018      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3342      	adds	r3, #66	; 0x42
 8001b62:	2202      	movs	r2, #2
 8001b64:	701a      	strb	r2, [r3, #0]
      break;
 8001b66:	e00d      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	3342      	adds	r3, #66	; 0x42
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
      break;
 8001b7c:	e002      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001b7e:	bf00      	nop
 8001b80:	e000      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001b82:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	3344      	adds	r3, #68	; 0x44
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	8b39      	ldrh	r1, [r7, #24]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4403      	add	r3, r0
 8001ba8:	3348      	adds	r3, #72	; 0x48
 8001baa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	335c      	adds	r3, #92	; 0x5c
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	334c      	adds	r3, #76	; 0x4c
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3339      	adds	r3, #57	; 0x39
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	335d      	adds	r3, #93	; 0x5d
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	3338      	adds	r3, #56	; 0x38
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	18d1      	adds	r1, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	f003 fc2a 	bl	8005470 <USB_HC_StartXfer>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop

08001c28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f947 	bl	8004ed2 <USB_GetMode>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	f040 80f1 	bne.w	8001e2e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 f92b 	bl	8004eac <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80e7 	beq.w	8001e2c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 f922 	bl	8004eac <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c72:	d104      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 f912 	bl	8004eac <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c92:	d104      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 f902 	bl	8004eac <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cb2:	d104      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 f8f2 	bl	8004eac <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d103      	bne.n	8001cda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f8e4 	bl	8004eac <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cee:	d117      	bne.n	8001d20 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001cfe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d02:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f00e fabd 	bl	8010284 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 f9dd 	bl	80050d0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f8c1 	bl	8004eac <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d102      	bne.n	8001d3c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f001 f8c8 	bl	8002ecc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 f8b3 	bl	8004eac <USB_ReadInterrupts>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d106      	bne.n	8001d5e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f00e fa7b 	bl	801024c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 f8a2 	bl	8004eac <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d72:	d138      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fcbd 	bl	80056f8 <USB_HC_ReadInterrupt>
 8001d7e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e025      	b.n	8001dd2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d018      	beq.n	8001dcc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db0:	d106      	bne.n	8001dc0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8cf 	bl	8001f5c <HCD_HC_IN_IRQHandler>
 8001dbe:	e005      	b.n	8001dcc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fc5f 	bl	800268a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3d4      	bcc.n	8001d86 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 f85e 	bl	8004eac <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d101      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x1d6>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_HCD_IRQHandler+0x1d8>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d014      	beq.n	8001e2e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0210 	bic.w	r2, r2, #16
 8001e12:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 ffad 	bl	8002d74 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0210 	orr.w	r2, r2, #16
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	e000      	b.n	8001e2e <HAL_HCD_IRQHandler+0x206>
      return;
 8001e2c:	bf00      	nop
    }
  }
}
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_HCD_Start+0x16>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e013      	b.n	8001e72 <HAL_HCD_Start+0x3e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 ff35 	bl	8004cc6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 f998 	bl	8005198 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_HCD_Stop+0x16>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e00d      	b.n	8001eac <HAL_HCD_Stop+0x32>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fd77 	bl	8005990 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 f93f 	bl	8005144 <USB_ResetPort>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	335c      	adds	r3, #92	; 0x5c
 8001eec:	781b      	ldrb	r3, [r3, #0]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	334c      	adds	r3, #76	; 0x4c
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f981 	bl	8005238 <USB_GetCurrentFrame>
 8001f36:	4603      	mov	r3, r0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f95c 	bl	800520a <USB_GetHostSpeed>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d119      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	0151      	lsls	r1, r2, #5
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	440a      	add	r2, r1
 8001fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	60d3      	str	r3, [r2, #12]
 8001fbe:	e095      	b.n	80020ec <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d109      	bne.n	8001fea <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	6093      	str	r3, [r2, #8]
 8001fe8:	e080      	b.n	80020ec <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d134      	bne.n	800206a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	0151      	lsls	r1, r2, #5
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	440a      	add	r2, r1
 8002016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	335d      	adds	r3, #93	; 0x5d
 8002030:	2205      	movs	r2, #5
 8002032:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2310      	movs	r3, #16
 8002044:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	461a      	mov	r2, r3
 8002054:	2308      	movs	r3, #8
 8002056:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fb59 	bl	800571a <USB_HC_Halt>
 8002068:	e040      	b.n	80020ec <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002080:	d134      	bne.n	80020ec <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	0151      	lsls	r1, r2, #5
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	440a      	add	r2, r1
 8002098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fb34 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2310      	movs	r3, #16
 80020c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335d      	adds	r3, #93	; 0x5d
 80020d4:	2208      	movs	r2, #8
 80020d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ea:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002102:	d122      	bne.n	800214a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	0151      	lsls	r1, r2, #5
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	440a      	add	r2, r1
 800211a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 faf3 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002140:	461a      	mov	r2, r3
 8002142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002146:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002148:	e29b      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	f040 80c1 	bne.w	80022e4 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01b      	beq.n	80021a2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3348      	adds	r3, #72	; 0x48
 800217a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0159      	lsls	r1, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	440b      	add	r3, r1
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800218e:	1ad1      	subs	r1, r2, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4403      	add	r3, r0
 800219e:	334c      	adds	r3, #76	; 0x4c
 80021a0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335d      	adds	r3, #93	; 0x5d
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	3358      	adds	r3, #88	; 0x58
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2301      	movs	r3, #1
 80021da:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	333f      	adds	r3, #63	; 0x3f
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	333f      	adds	r3, #63	; 0x3f
 8002202:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002204:	2b02      	cmp	r3, #2
 8002206:	d121      	bne.n	800224c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	0151      	lsls	r1, r2, #5
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	440a      	add	r2, r1
 800221e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fa71 	bl	800571a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	461a      	mov	r2, r3
 8002246:	2310      	movs	r3, #16
 8002248:	6093      	str	r3, [r2, #8]
 800224a:	e034      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	333f      	adds	r3, #63	; 0x3f
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d129      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	0151      	lsls	r1, r2, #5
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	440a      	add	r2, r1
 8002278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800227c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002280:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	335c      	adds	r3, #92	; 0x5c
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	b2d8      	uxtb	r0, r3
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	335c      	adds	r3, #92	; 0x5c
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4601      	mov	r1, r0
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f00d fff5 	bl	80102a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3350      	adds	r3, #80	; 0x50
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	3350      	adds	r3, #80	; 0x50
 80022de:	4602      	mov	r2, r0
 80022e0:	701a      	strb	r2, [r3, #0]
}
 80022e2:	e1ce      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	f040 80f1 	bne.w	80024de <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	0151      	lsls	r1, r2, #5
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	440a      	add	r2, r1
 8002312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002316:	f023 0302 	bic.w	r3, r3, #2
 800231a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	335d      	adds	r3, #93	; 0x5d
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10a      	bne.n	8002348 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	335c      	adds	r3, #92	; 0x5c
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e0b0      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	335d      	adds	r3, #93	; 0x5d
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d10a      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	335c      	adds	r3, #92	; 0x5c
 800236e:	2205      	movs	r2, #5
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e09a      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	335d      	adds	r3, #93	; 0x5d
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b06      	cmp	r3, #6
 8002388:	d00a      	beq.n	80023a0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	335d      	adds	r3, #93	; 0x5d
 800239a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800239c:	2b08      	cmp	r3, #8
 800239e:	d156      	bne.n	800244e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	3358      	adds	r3, #88	; 0x58
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1c59      	adds	r1, r3, #1
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4403      	add	r3, r0
 80023c2:	3358      	adds	r3, #88	; 0x58
 80023c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	3358      	adds	r3, #88	; 0x58
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d914      	bls.n	8002406 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3358      	adds	r3, #88	; 0x58
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	2204      	movs	r2, #4
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e009      	b.n	800241a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	335c      	adds	r3, #92	; 0x5c
 8002416:	2202      	movs	r2, #2
 8002418:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002430:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002438:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e02d      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	335d      	adds	r3, #93	; 0x5d
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d122      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	335c      	adds	r3, #92	; 0x5c
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800248e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002496:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2302      	movs	r3, #2
 80024ba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	b2d8      	uxtb	r0, r3
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	335c      	adds	r3, #92	; 0x5c
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4601      	mov	r1, r0
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f00d fee2 	bl	80102a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024dc:	e0d1      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d13e      	bne.n	8002572 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	0151      	lsls	r1, r2, #5
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	440a      	add	r2, r1
 800250a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	3358      	adds	r3, #88	; 0x58
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4403      	add	r3, r0
 8002536:	3358      	adds	r3, #88	; 0x58
 8002538:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	335d      	adds	r3, #93	; 0x5d
 800254a:	2206      	movs	r2, #6
 800254c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f003 f8de 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	461a      	mov	r2, r3
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	6093      	str	r3, [r2, #8]
}
 8002570:	e087      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b10      	cmp	r3, #16
 8002586:	d17c      	bne.n	8002682 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	333f      	adds	r3, #63	; 0x3f
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d122      	bne.n	80025e4 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	3358      	adds	r3, #88	; 0x58
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	0151      	lsls	r1, r2, #5
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	440a      	add	r2, r1
 80025c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f89c 	bl	800571a <USB_HC_Halt>
 80025e2:	e045      	b.n	8002670 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	333f      	adds	r3, #63	; 0x3f
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	333f      	adds	r3, #63	; 0x3f
 800260a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800260c:	2b02      	cmp	r3, #2
 800260e:	d12f      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	3358      	adds	r3, #88	; 0x58
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d121      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	335d      	adds	r3, #93	; 0x5d
 800263c:	2203      	movs	r2, #3
 800263e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	0151      	lsls	r1, r2, #5
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	440a      	add	r2, r1
 8002656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f855 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2310      	movs	r3, #16
 8002680:	6093      	str	r3, [r2, #8]
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d119      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	2304      	movs	r3, #4
 80026ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026ec:	e33e      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b20      	cmp	r3, #32
 8002702:	d141      	bne.n	8002788 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	2320      	movs	r3, #32
 8002714:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	333d      	adds	r3, #61	; 0x3d
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	f040 831f 	bne.w	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	333d      	adds	r3, #61	; 0x3d
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	335c      	adds	r3, #92	; 0x5c
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	0151      	lsls	r1, r2, #5
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	440a      	add	r2, r1
 800276c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f002 ffca 	bl	800571a <USB_HC_Halt>
}
 8002786:	e2f1      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d13f      	bne.n	800281e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	335d      	adds	r3, #93	; 0x5d
 80027ae:	2204      	movs	r2, #4
 80027b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	333d      	adds	r3, #61	; 0x3d
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	3358      	adds	r3, #88	; 0x58
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	0151      	lsls	r1, r2, #5
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	440a      	add	r2, r1
 80027f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f002 ff88 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	461a      	mov	r2, r3
 8002818:	2340      	movs	r3, #64	; 0x40
 800281a:	6093      	str	r3, [r2, #8]
}
 800281c:	e2a6      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002834:	d122      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	0151      	lsls	r1, r2, #5
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	440a      	add	r2, r1
 800284c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f002 ff5a 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002878:	6093      	str	r3, [r2, #8]
}
 800287a:	e277      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d135      	bne.n	80028fe <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	3358      	adds	r3, #88	; 0x58
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	0151      	lsls	r1, r2, #5
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	440a      	add	r2, r1
 80028bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 ff22 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	2301      	movs	r3, #1
 80028e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	335d      	adds	r3, #93	; 0x5d
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
}
 80028fc:	e236      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d12b      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	461a      	mov	r2, r3
 8002922:	2308      	movs	r3, #8
 8002924:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fee2 	bl	800571a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	335d      	adds	r3, #93	; 0x5d
 8002966:	2205      	movs	r2, #5
 8002968:	701a      	strb	r2, [r3, #0]
}
 800296a:	e1ff      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b10      	cmp	r3, #16
 8002980:	d155      	bne.n	8002a2e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	3358      	adds	r3, #88	; 0x58
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	335d      	adds	r3, #93	; 0x5d
 80029a6:	2203      	movs	r2, #3
 80029a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	333d      	adds	r3, #61	; 0x3d
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d114      	bne.n	80029ea <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	333c      	adds	r3, #60	; 0x3c
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	333d      	adds	r3, #61	; 0x3d
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	0151      	lsls	r1, r2, #5
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	440a      	add	r2, r1
 8002a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fe80 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	2310      	movs	r3, #16
 8002a2a:	6093      	str	r3, [r2, #8]
}
 8002a2c:	e19e      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d12b      	bne.n	8002a9c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 fe53 	bl	800571a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	335d      	adds	r3, #93	; 0x5d
 8002a84:	2206      	movs	r2, #6
 8002a86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	6093      	str	r3, [r2, #8]
}
 8002a9a:	e167      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d135      	bne.n	8002b20 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	0151      	lsls	r1, r2, #5
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	440a      	add	r2, r1
 8002aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 fe1b 	bl	800571a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	2310      	movs	r3, #16
 8002af4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	335d      	adds	r3, #93	; 0x5d
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	701a      	strb	r2, [r3, #0]
}
 8002b1e:	e125      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	f040 811a 	bne.w	8002d6c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	0151      	lsls	r1, r2, #5
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	440a      	add	r2, r1
 8002b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b52:	f023 0302 	bic.w	r3, r3, #2
 8002b56:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	335d      	adds	r3, #93	; 0x5d
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d137      	bne.n	8002bde <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	335c      	adds	r3, #92	; 0x5c
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	333f      	adds	r3, #63	; 0x3f
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d00b      	beq.n	8002bb0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	333f      	adds	r3, #63	; 0x3f
 8002ba8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	f040 80c5 	bne.w	8002d3a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3351      	adds	r3, #81	; 0x51
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2d8      	uxtb	r0, r3
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3351      	adds	r3, #81	; 0x51
 8002bd8:	4602      	mov	r2, r0
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e0ad      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	335d      	adds	r3, #93	; 0x5d
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d10a      	bne.n	8002c0a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	335c      	adds	r3, #92	; 0x5c
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e097      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	335d      	adds	r3, #93	; 0x5d
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d10a      	bne.n	8002c36 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e081      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	335d      	adds	r3, #93	; 0x5d
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d10a      	bne.n	8002c62 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e06b      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	335d      	adds	r3, #93	; 0x5d
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d00a      	beq.n	8002c8e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	335d      	adds	r3, #93	; 0x5d
 8002c88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d155      	bne.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3358      	adds	r3, #88	; 0x58
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4403      	add	r3, r0
 8002cb0:	3358      	adds	r3, #88	; 0x58
 8002cb2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3358      	adds	r3, #88	; 0x58
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d914      	bls.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3358      	adds	r3, #88	; 0x58
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	335c      	adds	r3, #92	; 0x5c
 8002cee:	2204      	movs	r2, #4
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e009      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2202      	movs	r2, #2
 8002d06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2302      	movs	r3, #2
 8002d4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	b2d8      	uxtb	r0, r3
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	335c      	adds	r3, #92	; 0x5c
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4601      	mov	r1, r0
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f00d fa9a 	bl	80102a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d6c:	bf00      	nop
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	0c5b      	lsrs	r3, r3, #17
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d003      	beq.n	8002db8 <HCD_RXQLVL_IRQHandler+0x44>
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	f000 8082 	beq.w	8002eba <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002db6:	e083      	b.n	8002ec0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d07f      	beq.n	8002ebe <HCD_RXQLVL_IRQHandler+0x14a>
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	3344      	adds	r3, #68	; 0x44
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d074      	beq.n	8002ebe <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3344      	adds	r3, #68	; 0x44
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	b292      	uxth	r2, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f002 f833 	bl	8004e5a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3344      	adds	r3, #68	; 0x44
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	18d1      	adds	r1, r2, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4403      	add	r3, r0
 8002e18:	3344      	adds	r3, #68	; 0x44
 8002e1a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	334c      	adds	r3, #76	; 0x4c
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	18d1      	adds	r1, r2, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4403      	add	r3, r0
 8002e40:	334c      	adds	r3, #76	; 0x4c
 8002e42:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d031      	beq.n	8002ebe <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e70:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e78:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3350      	adds	r3, #80	; 0x50
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2d8      	uxtb	r0, r3
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3350      	adds	r3, #80	; 0x50
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	701a      	strb	r2, [r3, #0]
      break;
 8002eb8:	e001      	b.n	8002ebe <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002ebe:	bf00      	nop
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	1ff80000 	.word	0x1ff80000

08002ecc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ef8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d113      	bne.n	8002f2c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10a      	bne.n	8002f24 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002f1c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f00d f9a2 	bl	8010268 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d147      	bne.n	8002fc6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d129      	bne.n	8002f9c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d113      	bne.n	8002f78 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f5a:	d106      	bne.n	8002f6a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2102      	movs	r1, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 f8b4 	bl	80050d0 <USB_InitFSLSPClkSel>
 8002f68:	e011      	b.n	8002f8e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 f8ad 	bl	80050d0 <USB_InitFSLSPClkSel>
 8002f76:	e00a      	b.n	8002f8e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f86:	461a      	mov	r2, r3
 8002f88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f8c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f00d f998 	bl	80102c4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f00d f967 	bl	8010268 <HAL_HCD_Connect_Callback>
 8002f9a:	e014      	b.n	8002fc6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f00d f99f 	bl	80102e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002fb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fb4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fc4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d103      	bne.n	8002fd8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f043 0320 	orr.w	r3, r3, #32
 8002fd6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e128      	b.n	8003250 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a90      	ldr	r2, [pc, #576]	; (8003258 <HAL_I2S_Init+0x26c>)
 8003016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f00c ff2b 	bl	800fe74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003034:	f023 030f 	bic.w	r3, r3, #15
 8003038:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2202      	movs	r2, #2
 8003040:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d060      	beq.n	800310c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003052:	2310      	movs	r3, #16
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e001      	b.n	800305c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003058:	2320      	movs	r3, #32
 800305a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b20      	cmp	r3, #32
 8003062:	d802      	bhi.n	800306a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800306a:	2001      	movs	r0, #1
 800306c:	f001 fb30 	bl	80046d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003070:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307a:	d125      	bne.n	80030c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	fbb2 f2f3 	udiv	r2, r2, r3
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	461a      	mov	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	3305      	adds	r3, #5
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e01f      	b.n	80030e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	461a      	mov	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	3305      	adds	r3, #5
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e00e      	b.n	80030e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	3305      	adds	r3, #5
 80030e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4a5c      	ldr	r2, [pc, #368]	; (800325c <HAL_I2S_Init+0x270>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	e003      	b.n	8003114 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800310c:	2302      	movs	r3, #2
 800310e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d902      	bls.n	8003120 <HAL_I2S_Init+0x134>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2bff      	cmp	r3, #255	; 0xff
 800311e:	d907      	bls.n	8003130 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	f043 0210 	orr.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e08f      	b.n	8003250 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	ea42 0103 	orr.w	r1, r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	430a      	orrs	r2, r1
 8003142:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800314e:	f023 030f 	bic.w	r3, r3, #15
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6851      	ldr	r1, [r2, #4]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6892      	ldr	r2, [r2, #8]
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68d2      	ldr	r2, [r2, #12]
 8003160:	4311      	orrs	r1, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6992      	ldr	r2, [r2, #24]
 8003166:	430a      	orrs	r2, r1
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003172:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d161      	bne.n	8003240 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a38      	ldr	r2, [pc, #224]	; (8003260 <HAL_I2S_Init+0x274>)
 8003180:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a37      	ldr	r2, [pc, #220]	; (8003264 <HAL_I2S_Init+0x278>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_I2S_Init+0x1a4>
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_I2S_Init+0x27c>)
 800318e:	e001      	b.n	8003194 <HAL_I2S_Init+0x1a8>
 8003190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	4932      	ldr	r1, [pc, #200]	; (8003264 <HAL_I2S_Init+0x278>)
 800319c:	428a      	cmp	r2, r1
 800319e:	d101      	bne.n	80031a4 <HAL_I2S_Init+0x1b8>
 80031a0:	4a31      	ldr	r2, [pc, #196]	; (8003268 <HAL_I2S_Init+0x27c>)
 80031a2:	e001      	b.n	80031a8 <HAL_I2S_Init+0x1bc>
 80031a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031ac:	f023 030f 	bic.w	r3, r3, #15
 80031b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <HAL_I2S_Init+0x278>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_I2S_Init+0x1d4>
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_I2S_Init+0x27c>)
 80031be:	e001      	b.n	80031c4 <HAL_I2S_Init+0x1d8>
 80031c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031c4:	2202      	movs	r2, #2
 80031c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_I2S_Init+0x278>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_I2S_Init+0x1ea>
 80031d2:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_I2S_Init+0x27c>)
 80031d4:	e001      	b.n	80031da <HAL_I2S_Init+0x1ee>
 80031d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e6:	d003      	beq.n	80031f0 <HAL_I2S_Init+0x204>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e001      	b.n	80031fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	b299      	uxth	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003212:	4303      	orrs	r3, r0
 8003214:	b29b      	uxth	r3, r3
 8003216:	430b      	orrs	r3, r1
 8003218:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800321a:	4313      	orrs	r3, r2
 800321c:	b29a      	uxth	r2, r3
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	4313      	orrs	r3, r2
 8003222:	b29b      	uxth	r3, r3
 8003224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003228:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_I2S_Init+0x278>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d101      	bne.n	8003238 <HAL_I2S_Init+0x24c>
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HAL_I2S_Init+0x27c>)
 8003236:	e001      	b.n	800323c <HAL_I2S_Init+0x250>
 8003238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800323c:	897a      	ldrh	r2, [r7, #10]
 800323e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	080036a9 	.word	0x080036a9
 800325c:	cccccccd 	.word	0xcccccccd
 8003260:	080037bd 	.word	0x080037bd
 8003264:	40003800 	.word	0x40003800
 8003268:	40003400 	.word	0x40003400

0800326c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_I2S_Receive_DMA+0x1a>
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0a1      	b.n	80033ce <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_I2S_Receive_DMA+0x2e>
 8003296:	2302      	movs	r3, #2
 8003298:	e099      	b.n	80033ce <HAL_I2S_Receive_DMA+0x162>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d005      	beq.n	80032ba <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e089      	b.n	80033ce <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2204      	movs	r2, #4
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d002      	beq.n	80032e6 <HAL_I2S_Receive_DMA+0x7a>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10a      	bne.n	80032fc <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	865a      	strh	r2, [r3, #50]	; 0x32
 80032fa:	e005      	b.n	8003308 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	4a32      	ldr	r2, [pc, #200]	; (80033d8 <HAL_I2S_Receive_DMA+0x16c>)
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	4a31      	ldr	r2, [pc, #196]	; (80033dc <HAL_I2S_Receive_DMA+0x170>)
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <HAL_I2S_Receive_DMA+0x174>)
 800331e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332e:	d10a      	bne.n	8003346 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr, hi2s->RxXferSize))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	4619      	mov	r1, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800335c:	b29b      	uxth	r3, r3
 800335e:	f7fd fcd7 	bl	8000d10 <HAL_DMA_Start_IT>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00f      	beq.n	8003388 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f043 0208 	orr.w	r2, r3, #8
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e022      	b.n	80033ce <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033a4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	08003587 	.word	0x08003587
 80033dc:	08003545 	.word	0x08003545
 80033e0:	080035a3 	.word	0x080035a3

080033e4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0202 	bic.w	r2, r2, #2
 80033fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	605a      	str	r2, [r3, #4]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fcd7 	bl	8000dd0 <HAL_DMA_Abort>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f043 0208 	orr.w	r2, r3, #8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
      errorcode = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00f      	beq.n	8003460 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd fcc3 	bl	8000dd0 <HAL_DMA_Abort>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	f043 0208 	orr.w	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
      errorcode = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
    }
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  /* In case of Full-Duplex, disable the I2SxEXT Tx/Rx DMA requests*/
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b05      	cmp	r3, #5
 800346a:	d141      	bne.n	80034f0 <HAL_I2S_DMAStop+0x10c>
  {
    /* Disable the I2SxEXT DMA requests */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a28      	ldr	r2, [pc, #160]	; (8003514 <HAL_I2S_DMAStop+0x130>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_I2S_DMAStop+0x96>
 8003476:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_I2S_DMAStop+0x134>)
 8003478:	e001      	b.n	800347e <HAL_I2S_DMAStop+0x9a>
 800347a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4923      	ldr	r1, [pc, #140]	; (8003514 <HAL_I2S_DMAStop+0x130>)
 8003486:	428b      	cmp	r3, r1
 8003488:	d101      	bne.n	800348e <HAL_I2S_DMAStop+0xaa>
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_I2S_DMAStop+0x134>)
 800348c:	e001      	b.n	8003492 <HAL_I2S_DMAStop+0xae>
 800348e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003492:	f022 0202 	bic.w	r2, r2, #2
 8003496:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_I2S_DMAStop+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_I2S_DMAStop+0xc2>
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_I2S_DMAStop+0x134>)
 80034a4:	e001      	b.n	80034aa <HAL_I2S_DMAStop+0xc6>
 80034a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4918      	ldr	r1, [pc, #96]	; (8003514 <HAL_I2S_DMAStop+0x130>)
 80034b2:	428b      	cmp	r3, r1
 80034b4:	d101      	bne.n	80034ba <HAL_I2S_DMAStop+0xd6>
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <HAL_I2S_DMAStop+0x134>)
 80034b8:	e001      	b.n	80034be <HAL_I2S_DMAStop+0xda>
 80034ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	605a      	str	r2, [r3, #4]

    /* Disable I2Sext peripheral */
    __HAL_I2SEXT_DISABLE(hi2s);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <HAL_I2S_DMAStop+0x130>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_I2S_DMAStop+0xee>
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_I2S_DMAStop+0x134>)
 80034d0:	e001      	b.n	80034d6 <HAL_I2S_DMAStop+0xf2>
 80034d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	490d      	ldr	r1, [pc, #52]	; (8003514 <HAL_I2S_DMAStop+0x130>)
 80034de:	428b      	cmp	r3, r1
 80034e0:	d101      	bne.n	80034e6 <HAL_I2S_DMAStop+0x102>
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_I2S_DMAStop+0x134>)
 80034e4:	e001      	b.n	80034ea <HAL_I2S_DMAStop+0x106>
 80034e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	61da      	str	r2, [r3, #28]

  hi2s->State = HAL_I2S_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40003800 	.word	0x40003800
 8003518:	40003400 	.word	0x40003400

0800351c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10e      	bne.n	8003578 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f00c fb73 	bl	800fc64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f00c fb17 	bl	800fbc8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0203 	bic.w	r2, r2, #3
 80035be:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f043 0208 	orr.w	r2, r3, #8
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ffa5 	bl	8003530 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10e      	bne.n	8003642 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003632:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff6d 	bl	800351c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	b292      	uxth	r2, r2
 800365e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	1c9a      	adds	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10e      	bne.n	80036a0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003690:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f00c fae2 	bl	800fc64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d13a      	bne.n	800373a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d109      	bne.n	80036e2 <I2S_IRQHandler+0x3a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d102      	bne.n	80036e2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ffb4 	bl	800364a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d126      	bne.n	800373a <I2S_IRQHandler+0x92>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d11f      	bne.n	800373a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003708:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	f043 0202 	orr.w	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fefb 	bl	8003530 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b03      	cmp	r3, #3
 8003744:	d136      	bne.n	80037b4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d109      	bne.n	8003764 <I2S_IRQHandler+0xbc>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d102      	bne.n	8003764 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff45 	bl	80035ee <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d122      	bne.n	80037b4 <I2S_IRQHandler+0x10c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b20      	cmp	r3, #32
 800377a:	d11b      	bne.n	80037b4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800378a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff febe 	bl	8003530 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4aa2      	ldr	r2, [pc, #648]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037d6:	4ba2      	ldr	r3, [pc, #648]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d8:	e001      	b.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a9b      	ldr	r2, [pc, #620]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037f4:	4b9a      	ldr	r3, [pc, #616]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f6:	e001      	b.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003808:	d004      	beq.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8099 	bne.w	8003946 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d107      	bne.n	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f925 	bl	8003a78 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9c8 	bl	8003bd8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d13a      	bne.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d035      	beq.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a7e      	ldr	r2, [pc, #504]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d101      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003866:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003868:	e001      	b.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800386a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4979      	ldr	r1, [pc, #484]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003876:	428b      	cmp	r3, r1
 8003878:	d101      	bne.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800387a:	4b79      	ldr	r3, [pc, #484]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800387c:	e001      	b.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800387e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003882:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003886:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003896:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fe34 	bl	8003530 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	f040 80be 	bne.w	8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80b8 	beq.w	8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a59      	ldr	r2, [pc, #356]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038fa:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038fc:	e001      	b.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4954      	ldr	r1, [pc, #336]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800390a:	428b      	cmp	r3, r1
 800390c:	d101      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003910:	e001      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f043 0204 	orr.w	r2, r3, #4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fdf6 	bl	8003530 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003944:	e084      	b.n	8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b02      	cmp	r3, #2
 800394e:	d107      	bne.n	8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8be 	bl	8003adc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f8fd 	bl	8003b74 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d12f      	bne.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02a      	beq.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800399c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039a8:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039aa:	e001      	b.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4929      	ldr	r1, [pc, #164]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b8:	428b      	cmp	r3, r1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039be:	e001      	b.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f043 0202 	orr.w	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fda6 	bl	8003530 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d131      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02c      	beq.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a02:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a04:	e001      	b.n	8003a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4912      	ldr	r1, [pc, #72]	; (8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a12:	428b      	cmp	r3, r1
 8003a14:	d101      	bne.n	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a18:	e001      	b.n	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a22:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a32:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fd71 	bl	8003530 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a4e:	e000      	b.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a50:	bf00      	nop
}
 8003a52:	bf00      	nop
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40003800 	.word	0x40003800
 8003a60:	40003400 	.word	0x40003400

08003a64 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c99      	adds	r1, r3, #2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6251      	str	r1, [r2, #36]	; 0x24
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d113      	bne.n	8003ad2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ab8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ffc9 	bl	8003a64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c99      	adds	r1, r3, #2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6251      	str	r1, [r2, #36]	; 0x24
 8003aee:	8819      	ldrh	r1, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <I2SEx_TxISR_I2SExt+0x90>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <I2SEx_TxISR_I2SExt+0x22>
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <I2SEx_TxISR_I2SExt+0x94>)
 8003afc:	e001      	b.n	8003b02 <I2SEx_TxISR_I2SExt+0x26>
 8003afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b02:	460a      	mov	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d121      	bne.n	8003b62 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <I2SEx_TxISR_I2SExt+0x90>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <I2SEx_TxISR_I2SExt+0x50>
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <I2SEx_TxISR_I2SExt+0x94>)
 8003b2a:	e001      	b.n	8003b30 <I2SEx_TxISR_I2SExt+0x54>
 8003b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	490d      	ldr	r1, [pc, #52]	; (8003b6c <I2SEx_TxISR_I2SExt+0x90>)
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	d101      	bne.n	8003b40 <I2SEx_TxISR_I2SExt+0x64>
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <I2SEx_TxISR_I2SExt+0x94>)
 8003b3e:	e001      	b.n	8003b44 <I2SEx_TxISR_I2SExt+0x68>
 8003b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff81 	bl	8003a64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40003800 	.word	0x40003800
 8003b70:	40003400 	.word	0x40003400

08003b74 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68d8      	ldr	r0, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	1c99      	adds	r1, r3, #2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b8c:	b282      	uxth	r2, r0
 8003b8e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d113      	bne.n	8003bd0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff4a 	bl	8003a64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <I2SEx_RxISR_I2SExt+0x90>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <I2SEx_RxISR_I2SExt+0x16>
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <I2SEx_RxISR_I2SExt+0x94>)
 8003bec:	e001      	b.n	8003bf2 <I2SEx_RxISR_I2SExt+0x1a>
 8003bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf2:	68d8      	ldr	r0, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	1c99      	adds	r1, r3, #2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bfe:	b282      	uxth	r2, r0
 8003c00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d121      	bne.n	8003c5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <I2SEx_RxISR_I2SExt+0x90>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d101      	bne.n	8003c28 <I2SEx_RxISR_I2SExt+0x50>
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <I2SEx_RxISR_I2SExt+0x94>)
 8003c26:	e001      	b.n	8003c2c <I2SEx_RxISR_I2SExt+0x54>
 8003c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	490d      	ldr	r1, [pc, #52]	; (8003c68 <I2SEx_RxISR_I2SExt+0x90>)
 8003c34:	428b      	cmp	r3, r1
 8003c36:	d101      	bne.n	8003c3c <I2SEx_RxISR_I2SExt+0x64>
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <I2SEx_RxISR_I2SExt+0x94>)
 8003c3a:	e001      	b.n	8003c40 <I2SEx_RxISR_I2SExt+0x68>
 8003c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff03 	bl	8003a64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40003800 	.word	0x40003800
 8003c6c:	40003400 	.word	0x40003400

08003c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e22d      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d075      	beq.n	8003d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8e:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d00c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9a:	4ba0      	ldr	r3, [pc, #640]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d112      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca6:	4b9d      	ldr	r3, [pc, #628]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	4b99      	ldr	r3, [pc, #612]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05b      	beq.n	8003d78 <HAL_RCC_OscConfig+0x108>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d157      	bne.n	8003d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e208      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x74>
 8003cd6:	4b91      	ldr	r3, [pc, #580]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a90      	ldr	r2, [pc, #576]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e01d      	b.n	8003d20 <HAL_RCC_OscConfig+0xb0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x98>
 8003cee:	4b8b      	ldr	r3, [pc, #556]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a8a      	ldr	r2, [pc, #552]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a87      	ldr	r2, [pc, #540]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0xb0>
 8003d08:	4b84      	ldr	r3, [pc, #528]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a83      	ldr	r2, [pc, #524]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a80      	ldr	r2, [pc, #512]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fc fe34 	bl	8000994 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fc fe30 	bl	8000994 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1cd      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0xc0>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fc fe20 	bl	8000994 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fc fe1c 	bl	8000994 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1b9      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0xe8>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d063      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d92:	4b62      	ldr	r3, [pc, #392]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d11c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d116      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x152>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e18d      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc2:	4b56      	ldr	r3, [pc, #344]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4952      	ldr	r1, [pc, #328]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	e03a      	b.n	8003e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de0:	4b4f      	ldr	r3, [pc, #316]	; (8003f20 <HAL_RCC_OscConfig+0x2b0>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fc fdd5 	bl	8000994 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dee:	f7fc fdd1 	bl	8000994 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e16e      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4940      	ldr	r1, [pc, #256]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
 8003e20:	e015      	b.n	8003e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e22:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <HAL_RCC_OscConfig+0x2b0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fc fdb4 	bl	8000994 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e30:	f7fc fdb0 	bl	8000994 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e14d      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d030      	beq.n	8003ebc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e62:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <HAL_RCC_OscConfig+0x2b4>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fc fd94 	bl	8000994 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fc fd90 	bl	8000994 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e12d      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x200>
 8003e8e:	e015      	b.n	8003ebc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <HAL_RCC_OscConfig+0x2b4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e96:	f7fc fd7d 	bl	8000994 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9e:	f7fc fd79 	bl	8000994 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e116      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a0 	beq.w	800400a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d121      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fc fd3f 	bl	8000994 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	e011      	b.n	8003f3e <HAL_RCC_OscConfig+0x2ce>
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
 8003f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fc fd32 	bl	8000994 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0cf      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <HAL_RCC_OscConfig+0x478>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2f0>
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a65      	ldr	r2, [pc, #404]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	e01c      	b.n	8003f9a <HAL_RCC_OscConfig+0x32a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x312>
 8003f68:	4b60      	ldr	r3, [pc, #384]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a5c      	ldr	r2, [pc, #368]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	e00b      	b.n	8003f9a <HAL_RCC_OscConfig+0x32a>
 8003f82:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a59      	ldr	r2, [pc, #356]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b57      	ldr	r3, [pc, #348]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a56      	ldr	r2, [pc, #344]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d015      	beq.n	8003fce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fc fcf7 	bl	8000994 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fc fcf3 	bl	8000994 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e08e      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ee      	beq.n	8003faa <HAL_RCC_OscConfig+0x33a>
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fce:	f7fc fce1 	bl	8000994 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fc fcdd 	bl	8000994 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e078      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ee      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d064      	beq.n	80040dc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004012:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b08      	cmp	r3, #8
 800401c:	d05c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d141      	bne.n	80040aa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCC_OscConfig+0x480>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fc fcb2 	bl	8000994 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004034:	f7fc fcae 	bl	8000994 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e04b      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	3b01      	subs	r3, #1
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	491d      	ldr	r1, [pc, #116]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <HAL_RCC_OscConfig+0x480>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fc fc87 	bl	8000994 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408a:	f7fc fc83 	bl	8000994 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e020      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	4b13      	ldr	r3, [pc, #76]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x41a>
 80040a8:	e018      	b.n	80040dc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <HAL_RCC_OscConfig+0x480>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fc fc70 	bl	8000994 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fc fc6c 	bl	8000994 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e009      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <HAL_RCC_OscConfig+0x47c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x448>
 80040d6:	e001      	b.n	80040dc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40007000 	.word	0x40007000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	42470060 	.word	0x42470060

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0ca      	b.n	800429e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <HAL_RCC_ClockConfig+0x1b4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d90c      	bls.n	8004130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b64      	ldr	r3, [pc, #400]	; (80042a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0b6      	b.n	800429e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a57      	ldr	r2, [pc, #348]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004160:	4b52      	ldr	r3, [pc, #328]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a51      	ldr	r2, [pc, #324]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800416a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	494c      	ldr	r1, [pc, #304]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d044      	beq.n	8004214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d119      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e07d      	b.n	800429e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06d      	b.n	800429e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b3a      	ldr	r3, [pc, #232]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e065      	b.n	800429e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4933      	ldr	r1, [pc, #204]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fc fbd6 	bl	8000994 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fc fbd2 	bl	8000994 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e04d      	b.n	800429e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d20c      	bcs.n	800423c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <HAL_RCC_ClockConfig+0x1b4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e030      	b.n	800429e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b18      	ldr	r3, [pc, #96]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4915      	ldr	r1, [pc, #84]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490d      	ldr	r1, [pc, #52]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427a:	f000 f81d 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 800427e:	4601      	mov	r1, r0
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	5cd3      	ldrb	r3, [r2, r3]
 800428e:	fa21 f303 	lsr.w	r3, r1, r3
 8004292:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004296:	2000      	movs	r0, #0
 8004298:	f00b fe88 	bl	800ffac <HAL_InitTick>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00
 80042ac:	40023800 	.word	0x40023800
 80042b0:	08013778 	.word	0x08013778
 80042b4:	20000438 	.word	0x20000438

080042b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	2300      	movs	r3, #0
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ce:	4b63      	ldr	r3, [pc, #396]	; (800445c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d007      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x32>
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d008      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x38>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 80b4 	bne.w	800444c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042e6:	60bb      	str	r3, [r7, #8]
       break;
 80042e8:	e0b3      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ea:	4b5e      	ldr	r3, [pc, #376]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042ec:	60bb      	str	r3, [r7, #8]
      break;
 80042ee:	e0b0      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f0:	4b5a      	ldr	r3, [pc, #360]	; (800445c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b58      	ldr	r3, [pc, #352]	; (800445c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04a      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b55      	ldr	r3, [pc, #340]	; (800445c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	f04f 0400 	mov.w	r4, #0
 8004310:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	ea03 0501 	and.w	r5, r3, r1
 800431c:	ea04 0602 	and.w	r6, r4, r2
 8004320:	4629      	mov	r1, r5
 8004322:	4632      	mov	r2, r6
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	f04f 0400 	mov.w	r4, #0
 800432c:	0154      	lsls	r4, r2, #5
 800432e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004332:	014b      	lsls	r3, r1, #5
 8004334:	4619      	mov	r1, r3
 8004336:	4622      	mov	r2, r4
 8004338:	1b49      	subs	r1, r1, r5
 800433a:	eb62 0206 	sbc.w	r2, r2, r6
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	f04f 0400 	mov.w	r4, #0
 8004346:	0194      	lsls	r4, r2, #6
 8004348:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800434c:	018b      	lsls	r3, r1, #6
 800434e:	1a5b      	subs	r3, r3, r1
 8004350:	eb64 0402 	sbc.w	r4, r4, r2
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	00e2      	lsls	r2, r4, #3
 800435e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004362:	00d9      	lsls	r1, r3, #3
 8004364:	460b      	mov	r3, r1
 8004366:	4614      	mov	r4, r2
 8004368:	195b      	adds	r3, r3, r5
 800436a:	eb44 0406 	adc.w	r4, r4, r6
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	0262      	lsls	r2, r4, #9
 8004378:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800437c:	0259      	lsls	r1, r3, #9
 800437e:	460b      	mov	r3, r1
 8004380:	4614      	mov	r4, r2
 8004382:	4618      	mov	r0, r3
 8004384:	4621      	mov	r1, r4
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f04f 0400 	mov.w	r4, #0
 800438c:	461a      	mov	r2, r3
 800438e:	4623      	mov	r3, r4
 8004390:	f7fc f94a 	bl	8000628 <__aeabi_uldivmod>
 8004394:	4603      	mov	r3, r0
 8004396:	460c      	mov	r4, r1
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e049      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439c:	4b2f      	ldr	r3, [pc, #188]	; (800445c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	ea03 0501 	and.w	r5, r3, r1
 80043b2:	ea04 0602 	and.w	r6, r4, r2
 80043b6:	4629      	mov	r1, r5
 80043b8:	4632      	mov	r2, r6
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	f04f 0400 	mov.w	r4, #0
 80043c2:	0154      	lsls	r4, r2, #5
 80043c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043c8:	014b      	lsls	r3, r1, #5
 80043ca:	4619      	mov	r1, r3
 80043cc:	4622      	mov	r2, r4
 80043ce:	1b49      	subs	r1, r1, r5
 80043d0:	eb62 0206 	sbc.w	r2, r2, r6
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	0194      	lsls	r4, r2, #6
 80043de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043e2:	018b      	lsls	r3, r1, #6
 80043e4:	1a5b      	subs	r3, r3, r1
 80043e6:	eb64 0402 	sbc.w	r4, r4, r2
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	00e2      	lsls	r2, r4, #3
 80043f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043f8:	00d9      	lsls	r1, r3, #3
 80043fa:	460b      	mov	r3, r1
 80043fc:	4614      	mov	r4, r2
 80043fe:	195b      	adds	r3, r3, r5
 8004400:	eb44 0406 	adc.w	r4, r4, r6
 8004404:	f04f 0100 	mov.w	r1, #0
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	02a2      	lsls	r2, r4, #10
 800440e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004412:	0299      	lsls	r1, r3, #10
 8004414:	460b      	mov	r3, r1
 8004416:	4614      	mov	r4, r2
 8004418:	4618      	mov	r0, r3
 800441a:	4621      	mov	r1, r4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f04f 0400 	mov.w	r4, #0
 8004422:	461a      	mov	r2, r3
 8004424:	4623      	mov	r3, r4
 8004426:	f7fc f8ff 	bl	8000628 <__aeabi_uldivmod>
 800442a:	4603      	mov	r3, r0
 800442c:	460c      	mov	r4, r1
 800442e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	3301      	adds	r3, #1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	60bb      	str	r3, [r7, #8]
      break;
 800444a:	e002      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800444e:	60bb      	str	r3, [r7, #8]
      break;
 8004450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004452:	68bb      	ldr	r3, [r7, #8]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	00f42400 	.word	0x00f42400
 8004464:	007a1200 	.word	0x007a1200

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_RCC_GetHCLKFreq+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000438 	.word	0x20000438

08004480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004484:	f7ff fff0 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004488:	4601      	mov	r1, r0
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0b5b      	lsrs	r3, r3, #13
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	08013788 	.word	0x08013788

080044a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	220f      	movs	r2, #15
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0203 	and.w	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_RCC_GetClockConfig+0x60>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 020f 	and.w	r2, r3, #15
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	601a      	str	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	40023c00 	.word	0x40023c00

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004530:	2b00      	cmp	r3, #0
 8004532:	d035      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004534:	4b62      	ldr	r3, [pc, #392]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453a:	f7fc fa2b 	bl	8000994 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004542:	f7fc fa27 	bl	8000994 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0b0      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004554:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	019a      	lsls	r2, r3, #6
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	071b      	lsls	r3, r3, #28
 800456c:	4955      	ldr	r1, [pc, #340]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800457a:	f7fc fa0b 	bl	8000994 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004582:	f7fc fa07 	bl	8000994 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e090      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004594:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8083 	beq.w	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b44      	ldr	r3, [pc, #272]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a43      	ldr	r2, [pc, #268]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3e      	ldr	r2, [pc, #248]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045d6:	f7fc f9dd 	bl	8000994 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fc f9d9 	bl	8000994 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e062      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045fc:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004604:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02f      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	429a      	cmp	r2, r3
 8004618:	d028      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004622:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004624:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b01      	cmp	r3, #1
 8004640:	d114      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004642:	f7fc f9a7 	bl	8000994 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fc f9a3 	bl	8000994 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e02a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ee      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004678:	d10d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	490d      	ldr	r1, [pc, #52]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
 8004694:	e005      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046a0:	6093      	str	r3, [r2, #8]
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ae:	4905      	ldr	r1, [pc, #20]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	42470068 	.word	0x42470068
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40007000 	.word	0x40007000
 80046cc:	42470e40 	.word	0x42470e40

080046d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d13d      	bne.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046f6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d12f      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004704:	617b      	str	r3, [r7, #20]
          break;
 8004706:	e02f      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004714:	d108      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e007      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004752:	0f1b      	lsrs	r3, r3, #28
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	617b      	str	r3, [r7, #20]
          break;
 8004760:	e002      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
          break;
 8004766:	bf00      	nop
        }
      }
      break;
 8004768:	bf00      	nop
    }
  }
  return frequency;
 800476a:	697b      	ldr	r3, [r7, #20]
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40023800 	.word	0x40023800
 800477c:	00bb8000 	.word	0x00bb8000
 8004780:	007a1200 	.word	0x007a1200
 8004784:	00f42400 	.word	0x00f42400

08004788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e01d      	b.n	80047d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f815 	bl	80047de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f000 f968 	bl	8004a9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b06      	cmp	r3, #6
 800481a:	d007      	beq.n	800482c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d122      	bne.n	8004896 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d11b      	bne.n	8004896 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f06f 0202 	mvn.w	r2, #2
 8004866:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8ee 	bl	8004a5e <HAL_TIM_IC_CaptureCallback>
 8004882:	e005      	b.n	8004890 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8e0 	bl	8004a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f8f1 	bl	8004a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d122      	bne.n	80048ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d11b      	bne.n	80048ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f06f 0204 	mvn.w	r2, #4
 80048ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8c4 	bl	8004a5e <HAL_TIM_IC_CaptureCallback>
 80048d6:	e005      	b.n	80048e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8b6 	bl	8004a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8c7 	bl	8004a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d122      	bne.n	800493e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d11b      	bne.n	800493e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0208 	mvn.w	r2, #8
 800490e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2204      	movs	r2, #4
 8004914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f89a 	bl	8004a5e <HAL_TIM_IC_CaptureCallback>
 800492a:	e005      	b.n	8004938 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f88c 	bl	8004a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f89d 	bl	8004a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	d122      	bne.n	8004992 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d11b      	bne.n	8004992 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f06f 0210 	mvn.w	r2, #16
 8004962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2208      	movs	r2, #8
 8004968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f870 	bl	8004a5e <HAL_TIM_IC_CaptureCallback>
 800497e:	e005      	b.n	800498c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f862 	bl	8004a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f873 	bl	8004a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10e      	bne.n	80049be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d107      	bne.n	80049be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f06f 0201 	mvn.w	r2, #1
 80049b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f00b fa15 	bl	800fde8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d10e      	bne.n	80049ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d107      	bne.n	80049ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f903 	bl	8004bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d10e      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d107      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f838 	bl	8004a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d10e      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d107      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f06f 0220 	mvn.w	r2, #32
 8004a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8cd 	bl	8004bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a40      	ldr	r2, [pc, #256]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aba:	d00f      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3d      	ldr	r2, [pc, #244]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <TIM_Base_SetConfig+0x120>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d02b      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d027      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d023      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2b      	ldr	r2, [pc, #172]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01f      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <TIM_Base_SetConfig+0x120>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01b      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d017      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a28      	ldr	r2, [pc, #160]	; (8004bc4 <TIM_Base_SetConfig+0x128>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <TIM_Base_SetConfig+0x12c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a26      	ldr	r2, [pc, #152]	; (8004bcc <TIM_Base_SetConfig+0x130>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <TIM_Base_SetConfig+0x134>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <TIM_Base_SetConfig+0x138>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <TIM_Base_SetConfig+0x13c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800
 8004bd0:	40001800 	.word	0x40001800
 8004bd4:	40001c00 	.word	0x40001c00
 8004bd8:	40002000 	.word	0x40002000

08004bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c04:	b084      	sub	sp, #16
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	f107 001c 	add.w	r0, r7, #28
 8004c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d122      	bne.n	8004c62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f94a 	bl	8004ef0 <USB_CoreReset>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	e01a      	b.n	8004c98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f93e 	bl	8004ef0 <USB_CoreReset>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
 8004c8a:	e005      	b.n	8004c98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d10b      	bne.n	8004cb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f043 0206 	orr.w	r2, r3, #6
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc2:	b004      	add	sp, #16
 8004cc4:	4770      	bx	lr

08004cc6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 0201 	bic.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d106      	bne.n	8004d36 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	e00b      	b.n	8004d4e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60da      	str	r2, [r3, #12]
 8004d48:	e001      	b.n	8004d4e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e003      	b.n	8004d56 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d4e:	2032      	movs	r0, #50	; 0x32
 8004d50:	f7fb fe2c 	bl	80009ac <HAL_Delay>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <USB_FlushTxFifo+0x48>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d901      	bls.n	8004d8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e006      	b.n	8004d9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d0f0      	beq.n	8004d7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	00030d40 	.word	0x00030d40

08004dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2210      	movs	r2, #16
 8004dbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <USB_FlushRxFifo+0x40>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e006      	b.n	8004dde <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d0f0      	beq.n	8004dbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	00030d40 	.word	0x00030d40

08004df0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	460b      	mov	r3, r1
 8004e00:	71fb      	strb	r3, [r7, #7]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d11a      	bne.n	8004e4c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e16:	88bb      	ldrh	r3, [r7, #4]
 8004e18:	3303      	adds	r3, #3
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e00f      	b.n	8004e44 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	031a      	lsls	r2, r3, #12
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e30:	461a      	mov	r2, r3
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3eb      	bcc.n	8004e24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3724      	adds	r7, #36	; 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b089      	sub	sp, #36	; 0x24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	3303      	adds	r3, #3
 8004e74:	089b      	lsrs	r3, r3, #2
 8004e76:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e00b      	b.n	8004e96 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	3301      	adds	r3, #1
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3ef      	bcc.n	8004e7e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004e9e:	69fb      	ldr	r3, [r7, #28]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3724      	adds	r7, #36	; 0x24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0301 	and.w	r3, r3, #1
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <USB_CoreReset+0x64>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e01b      	b.n	8004f46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	daf2      	bge.n	8004efc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <USB_CoreReset+0x64>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e006      	b.n	8004f46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d0f0      	beq.n	8004f26 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	00030d40 	.word	0x00030d40

08004f58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f58:	b084      	sub	sp, #16
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	f107 001c 	add.w	r0, r7, #28
 8004f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f74:	461a      	mov	r2, r3
 8004f76:	2300      	movs	r3, #0
 8004f78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d10a      	bne.n	8004fc6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fbe:	f043 0304 	orr.w	r3, r3, #4
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e014      	b.n	8004ff0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e009      	b.n	8004ff0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fea:	f023 0304 	bic.w	r3, r3, #4
 8004fee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff feb4 	bl	8004d60 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fed7 	bl	8004dac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	e015      	b.n	8005030 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	461a      	mov	r2, r3
 8005012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005016:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4413      	add	r3, r2
 8005020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005024:	461a      	mov	r2, r3
 8005026:	2300      	movs	r3, #0
 8005028:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	429a      	cmp	r2, r3
 8005036:	d3e5      	bcc.n	8005004 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005038:	2101      	movs	r1, #1
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8ac 	bl	8005198 <USB_DriveVbus>

  HAL_Delay(200U);
 8005040:	20c8      	movs	r0, #200	; 0xc8
 8005042:	f7fb fcb3 	bl	80009ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005052:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00b      	beq.n	8005078 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a14      	ldr	r2, [pc, #80]	; (80050bc <USB_HostInit+0x164>)
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <USB_HostInit+0x168>)
 8005072:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005076:	e009      	b.n	800508c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2280      	movs	r2, #128	; 0x80
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <USB_HostInit+0x16c>)
 8005082:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <USB_HostInit+0x170>)
 8005088:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d105      	bne.n	800509e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f043 0210 	orr.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <USB_HostInit+0x174>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b6:	b004      	add	sp, #16
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	01000200 	.word	0x01000200
 80050c0:	00e00300 	.word	0x00e00300
 80050c4:	00600080 	.word	0x00600080
 80050c8:	004000e0 	.word	0x004000e0
 80050cc:	a3200008 	.word	0xa3200008

080050d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005118:	461a      	mov	r2, r3
 800511a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800511e:	6053      	str	r3, [r2, #4]
 8005120:	e009      	b.n	8005136 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d106      	bne.n	8005136 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512e:	461a      	mov	r2, r3
 8005130:	f241 7370 	movw	r3, #6000	; 0x1770
 8005134:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005164:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005174:	2064      	movs	r0, #100	; 0x64
 8005176:	f7fb fc19 	bl	80009ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005186:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005188:	200a      	movs	r0, #10
 800518a:	f7fb fc0f 	bl	80009ac <HAL_Delay>

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <USB_DriveVbus+0x44>
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d106      	bne.n	80051dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d109      	bne.n	80051fc <USB_DriveVbus+0x64>
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	0c5b      	lsrs	r3, r3, #17
 8005228:	f003 0303 	and.w	r3, r3, #3
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	b29b      	uxth	r3, r3
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	70fb      	strb	r3, [r7, #3]
 800526e:	460b      	mov	r3, r1
 8005270:	70bb      	strb	r3, [r7, #2]
 8005272:	4613      	mov	r3, r2
 8005274:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4413      	add	r3, r2
 8005286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528a:	461a      	mov	r2, r3
 800528c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005290:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005296:	2b03      	cmp	r3, #3
 8005298:	d87e      	bhi.n	8005398 <USB_HC_Init+0x13c>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <USB_HC_Init+0x44>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	0800535b 	.word	0x0800535b
 80052a8:	080052b1 	.word	0x080052b1
 80052ac:	0800531d 	.word	0x0800531d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	461a      	mov	r2, r3
 80052be:	f240 439d 	movw	r3, #1181	; 0x49d
 80052c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80052c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da10      	bge.n	80052ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ea:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80052ec:	e057      	b.n	800539e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d051      	beq.n	800539e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	440a      	add	r2, r1
 8005310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005314:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005318:	60d3      	str	r3, [r2, #12]
      break;
 800531a:	e040      	b.n	800539e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005328:	461a      	mov	r2, r3
 800532a:	f240 639d 	movw	r3, #1693	; 0x69d
 800532e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005330:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005334:	2b00      	cmp	r3, #0
 8005336:	da34      	bge.n	80053a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	440a      	add	r2, r1
 800534e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005358:	e023      	b.n	80053a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	461a      	mov	r2, r3
 8005368:	f240 2325 	movw	r3, #549	; 0x225
 800536c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800536e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005372:	2b00      	cmp	r3, #0
 8005374:	da17      	bge.n	80053a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	440a      	add	r2, r1
 800538c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005390:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005394:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005396:	e006      	b.n	80053a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
      break;
 800539c:	e004      	b.n	80053a8 <USB_HC_Init+0x14c>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <USB_HC_Init+0x14c>
      break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <USB_HC_Init+0x14c>
      break;
 80053a6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053c2:	4313      	orrs	r3, r2
 80053c4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80053d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	da03      	bge.n	80053e2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80053da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	e001      	b.n	80053e6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80053e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d103      	bne.n	80053f6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80053ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e001      	b.n	80053fa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053fa:	787b      	ldrb	r3, [r7, #1]
 80053fc:	059b      	lsls	r3, r3, #22
 80053fe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005402:	78bb      	ldrb	r3, [r7, #2]
 8005404:	02db      	lsls	r3, r3, #11
 8005406:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800540a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800540c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005410:	049b      	lsls	r3, r3, #18
 8005412:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005416:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005418:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800541a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800541e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	0159      	lsls	r1, r3, #5
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	440b      	add	r3, r1
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005436:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005438:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800543c:	2b03      	cmp	r3, #3
 800543e:	d10f      	bne.n	8005460 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	440a      	add	r2, r1
 8005456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800545e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
}
 8005462:	4618      	mov	r0, r3
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop

08005470 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	; 0x30
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800548c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d028      	beq.n	80054ec <USB_HC_StartXfer+0x7c>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	791b      	ldrb	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d124      	bne.n	80054ec <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <USB_HC_StartXfer+0x50>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	795b      	ldrb	r3, [r3, #5]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d107      	bne.n	80054c0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	4619      	mov	r1, r3
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fa2e 	bl	8005918 <USB_DoPing>
      return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e112      	b.n	80056e6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d112      	bne.n	80054ec <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80054e4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2200      	movs	r2, #0
 80054ea:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d018      	beq.n	8005526 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	8912      	ldrh	r2, [r2, #8]
 80054fc:	4413      	add	r3, r2
 80054fe:	3b01      	subs	r3, #1
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	8912      	ldrh	r2, [r2, #8]
 8005504:	fbb3 f3f2 	udiv	r3, r3, r2
 8005508:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800550a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800550c:	8b7b      	ldrh	r3, [r7, #26]
 800550e:	429a      	cmp	r2, r3
 8005510:	d90b      	bls.n	800552a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005512:	8b7b      	ldrh	r3, [r7, #26]
 8005514:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	8912      	ldrh	r2, [r2, #8]
 800551c:	fb02 f203 	mul.w	r2, r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	611a      	str	r2, [r3, #16]
 8005524:	e001      	b.n	800552a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005526:	2301      	movs	r3, #1
 8005528:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005532:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	8912      	ldrh	r2, [r2, #8]
 8005538:	fb02 f203 	mul.w	r2, r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800554a:	04d9      	lsls	r1, r3, #19
 800554c:	4b68      	ldr	r3, [pc, #416]	; (80056f0 <USB_HC_StartXfer+0x280>)
 800554e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005550:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	7a9b      	ldrb	r3, [r3, #10]
 8005556:	075b      	lsls	r3, r3, #29
 8005558:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800555c:	69f9      	ldr	r1, [r7, #28]
 800555e:	0148      	lsls	r0, r1, #5
 8005560:	6a39      	ldr	r1, [r7, #32]
 8005562:	4401      	add	r1, r0
 8005564:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005568:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800556a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	68d9      	ldr	r1, [r3, #12]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	460a      	mov	r2, r1
 8005584:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf0c      	ite	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	2300      	movne	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	7e7b      	ldrb	r3, [r7, #25]
 80055ce:	075b      	lsls	r3, r3, #29
 80055d0:	69f9      	ldr	r1, [r7, #28]
 80055d2:	0148      	lsls	r0, r1, #5
 80055d4:	6a39      	ldr	r1, [r7, #32]
 80055d6:	4401      	add	r1, r0
 80055d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80055dc:	4313      	orrs	r3, r2
 80055de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a41      	ldr	r2, [pc, #260]	; (80056f4 <USB_HC_StartXfer+0x284>)
 80055f0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055f2:	4b40      	ldr	r3, [pc, #256]	; (80056f4 <USB_HC_StartXfer+0x284>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055fa:	4a3e      	ldr	r2, [pc, #248]	; (80056f4 <USB_HC_StartXfer+0x284>)
 80055fc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	78db      	ldrb	r3, [r3, #3]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005606:	4b3b      	ldr	r3, [pc, #236]	; (80056f4 <USB_HC_StartXfer+0x284>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560e:	4a39      	ldr	r2, [pc, #228]	; (80056f4 <USB_HC_StartXfer+0x284>)
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e005      	b.n	8005620 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005614:	4b37      	ldr	r3, [pc, #220]	; (80056f4 <USB_HC_StartXfer+0x284>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800561c:	4a35      	ldr	r2, [pc, #212]	; (80056f4 <USB_HC_StartXfer+0x284>)
 800561e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005620:	4b34      	ldr	r3, [pc, #208]	; (80056f4 <USB_HC_StartXfer+0x284>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005628:	4a32      	ldr	r2, [pc, #200]	; (80056f4 <USB_HC_StartXfer+0x284>)
 800562a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005638:	461a      	mov	r2, r3
 800563a:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <USB_HC_StartXfer+0x284>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d14e      	bne.n	80056e4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	78db      	ldrb	r3, [r3, #3]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d14a      	bne.n	80056e4 <USB_HC_StartXfer+0x274>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d046      	beq.n	80056e4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	79db      	ldrb	r3, [r3, #7]
 800565a:	2b03      	cmp	r3, #3
 800565c:	d830      	bhi.n	80056c0 <USB_HC_StartXfer+0x250>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <USB_HC_StartXfer+0x1f4>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	08005675 	.word	0x08005675
 8005668:	08005699 	.word	0x08005699
 800566c:	08005675 	.word	0x08005675
 8005670:	08005699 	.word	0x08005699
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	3303      	adds	r3, #3
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800567e:	8afa      	ldrh	r2, [r7, #22]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	b29b      	uxth	r3, r3
 8005686:	429a      	cmp	r2, r3
 8005688:	d91c      	bls.n	80056c4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	619a      	str	r2, [r3, #24]
          }
          break;
 8005696:	e015      	b.n	80056c4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	3303      	adds	r3, #3
 800569e:	089b      	lsrs	r3, r3, #2
 80056a0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80056a2:	8afa      	ldrh	r2, [r7, #22]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d90a      	bls.n	80056c8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	619a      	str	r2, [r3, #24]
          }
          break;
 80056be:	e003      	b.n	80056c8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80056c0:	bf00      	nop
 80056c2:	e002      	b.n	80056ca <USB_HC_StartXfer+0x25a>
          break;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <USB_HC_StartXfer+0x25a>
          break;
 80056c8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	68d9      	ldr	r1, [r3, #12]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	785a      	ldrb	r2, [r3, #1]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	b298      	uxth	r0, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	4603      	mov	r3, r0
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fb86 	bl	8004df0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	1ff80000 	.word	0x1ff80000
 80056f4:	200004c4 	.word	0x200004c4

080056f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	b29b      	uxth	r3, r3
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800571a:	b480      	push	{r7}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	0c9b      	lsrs	r3, r3, #18
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <USB_HC_Halt+0x3a>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d16c      	bne.n	800582e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	440a      	add	r2, r1
 800576a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005772:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d143      	bne.n	8005808 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	440a      	add	r2, r1
 8005796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800579e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057de:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3301      	adds	r3, #1
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ec:	d81d      	bhi.n	800582a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005804:	d0ec      	beq.n	80057e0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005806:	e080      	b.n	800590a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	440a      	add	r2, r1
 800581e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005826:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005828:	e06f      	b.n	800590a <USB_HC_Halt+0x1f0>
          break;
 800582a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800582c:	e06d      	b.n	800590a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	440a      	add	r2, r1
 8005844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800584c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d143      	bne.n	80058e6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	440a      	add	r2, r1
 8005874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800587c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4413      	add	r3, r2
 8005886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	440a      	add	r2, r1
 8005894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800589c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058bc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	3301      	adds	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ca:	d81d      	bhi.n	8005908 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e2:	d0ec      	beq.n	80058be <USB_HC_Halt+0x1a4>
 80058e4:	e011      	b.n	800590a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e000      	b.n	800590a <USB_HC_Halt+0x1f0>
          break;
 8005908:	bf00      	nop
    }
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800592c:	2301      	movs	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	04da      	lsls	r2, r3, #19
 8005934:	4b15      	ldr	r3, [pc, #84]	; (800598c <USB_DoPing+0x74>)
 8005936:	4013      	ands	r3, r2
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005948:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005960:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005968:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	461a      	mov	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	1ff80000 	.word	0x1ff80000

08005990 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff f9a1 	bl	8004ce8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80059a6:	2110      	movs	r1, #16
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff f9d9 	bl	8004d60 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff f9fc 	bl	8004dac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	e01f      	b.n	80059fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3301      	adds	r3, #1
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b0f      	cmp	r3, #15
 80059fe:	d9dc      	bls.n	80059ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005a00:	2300      	movs	r3, #0
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	e034      	b.n	8005a70 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a2c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3301      	adds	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a4c:	d80c      	bhi.n	8005a68 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a64:	d0ec      	beq.n	8005a40 <USB_StopHost+0xb0>
 8005a66:	e000      	b.n	8005a6a <USB_StopHost+0xda>
        break;
 8005a68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d9c7      	bls.n	8005a06 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a8a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff f91a 	bl	8004cc6 <USB_EnableGlobalInt>

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b089      	sub	sp, #36	; 0x24
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ab2:	7919      	ldrb	r1, [r3, #4]
 8005ab4:	2350      	movs	r3, #80	; 0x50
 8005ab6:	2206      	movs	r2, #6
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fd3f 	bl	800753c <USBH_FindInterface>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	73bb      	strb	r3, [r7, #14]

  if(interface == 0xFFU) /* Not Valid Interface */
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2bff      	cmp	r3, #255	; 0xff
 8005ac6:	d102      	bne.n	8005ace <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	e10b      	b.n	8005ce6 <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fd16 	bl	8007504 <USBH_SelectInterface>

    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005ade:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ae2:	f009 f9a5 	bl	800ee30 <pvPortMalloc>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	60bb      	str	r3, [r7, #8]

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005afa:	4619      	mov	r1, r3
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	231a      	movs	r3, #26
 8005b00:	fb03 f301 	mul.w	r3, r3, r1
 8005b04:	4413      	add	r3, r2
 8005b06:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	da1c      	bge.n	8005b4c <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b18:	4619      	mov	r1, r3
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	231a      	movs	r3, #26
 8005b1e:	fb03 f301 	mul.w	r3, r3, r1
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005b28:	781a      	ldrb	r2, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b34:	4619      	mov	r1, r3
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	231a      	movs	r3, #26
 8005b3a:	fb03 f301 	mul.w	r3, r3, r1
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005b44:	881a      	ldrh	r2, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	815a      	strh	r2, [r3, #10]
 8005b4a:	e01b      	b.n	8005b84 <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b52:	4619      	mov	r1, r3
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	231a      	movs	r3, #26
 8005b58:	fb03 f301 	mul.w	r3, r3, r1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b6e:	4619      	mov	r1, r3
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	231a      	movs	r3, #26
 8005b74:	fb03 f301 	mul.w	r3, r3, r1
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005b7e:	881a      	ldrh	r2, [r3, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	811a      	strh	r2, [r3, #8]
    }

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	231a      	movs	r3, #26
 8005b90:	fb03 f301 	mul.w	r3, r3, r1
 8005b94:	4413      	add	r3, r2
 8005b96:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da1c      	bge.n	8005bdc <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005ba8:	4619      	mov	r1, r3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	231a      	movs	r3, #26
 8005bae:	fb03 f301 	mul.w	r3, r3, r1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	231a      	movs	r3, #26
 8005bca:	fb03 f301 	mul.w	r3, r3, r1
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	815a      	strh	r2, [r3, #10]
 8005bda:	e01b      	b.n	8005c14 <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005be2:	4619      	mov	r1, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	231a      	movs	r3, #26
 8005be8:	fb03 f301 	mul.w	r3, r3, r1
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005bf2:	781a      	ldrb	r2, [r3, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005bfe:	4619      	mov	r1, r3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	231a      	movs	r3, #26
 8005c04:	fb03 f301 	mul.w	r3, r3, r1
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005c0e:	881a      	ldrh	r2, [r3, #0]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	811a      	strh	r2, [r3, #8]
    }

    MSC_Handle->current_lun = 0U;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0U;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	799b      	ldrb	r3, [r3, #6]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f002 ff62 	bl	8008b06 <USBH_AllocPipe>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	79db      	ldrb	r3, [r3, #7]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f002 ff58 	bl	8008b06 <USBH_AllocPipe>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fdee 	bl	8006840 <USBH_MSC_BOT_Init>

    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3390      	adds	r3, #144	; 0x90
 8005c68:	2268      	movs	r2, #104	; 0x68
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f00c ff74 	bl	8012b5a <memset>

    /* Open the new channels */
    USBH_OpenPipe  (phost,
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	7959      	ldrb	r1, [r3, #5]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	7998      	ldrb	r0, [r3, #6]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	8912      	ldrh	r2, [r2, #8]
 8005c8a:	9202      	str	r2, [sp, #8]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	9201      	str	r2, [sp, #4]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	4623      	mov	r3, r4
 8005c94:	4602      	mov	r2, r0
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f002 ff06 	bl	8008aa8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);

    USBH_OpenPipe  (phost,
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	7919      	ldrb	r1, [r3, #4]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	79d8      	ldrb	r0, [r3, #7]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	8952      	ldrh	r2, [r2, #10]
 8005cb4:	9202      	str	r2, [sp, #8]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	9201      	str	r2, [sp, #4]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f002 fef1 	bl	8008aa8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);

    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	791b      	ldrb	r3, [r3, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f00a fc82 	bl	80105d8 <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	795b      	ldrb	r3, [r3, #5]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f00a fc7b 	bl	80105d8 <USBH_LL_SetToggle>
    status = USBH_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd90      	pop	{r4, r7, pc}

08005cf0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	795b      	ldrb	r3, [r3, #5]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00e      	beq.n	8005d28 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	795b      	ldrb	r3, [r3, #5]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f002 fee8 	bl	8008ae6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	795b      	ldrb	r3, [r3, #5]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f002 ff10 	bl	8008b42 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	715a      	strb	r2, [r3, #5]
  }

  if ( MSC_Handle->InPipe)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	791b      	ldrb	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	791b      	ldrb	r3, [r3, #4]
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fed5 	bl	8008ae6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	791b      	ldrb	r3, [r3, #4]
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f002 fefd 	bl	8008b42 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	711a      	strb	r2, [r3, #4]
  }

  if(phost->pActiveClass->pData)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f009 f904 	bl	800ef70 <vPortFree>
    phost->pActiveClass->pData = 0U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d6e:	2200      	movs	r2, #0
 8005d70:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	7b9b      	ldrb	r3, [r3, #14]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d004      	beq.n	8005da4 <USBH_MSC_ClassRequest+0x28>
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d03e      	beq.n	8005e1c <USBH_MSC_ClassRequest+0xa0>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d000      	beq.n	8005da4 <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
    }
    break;

  default:
    break;
 8005da2:	e04a      	b.n	8005e3a <USBH_MSC_ClassRequest+0xbe>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fd2b 	bl	8006804 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d104      	bne.n	8005dc2 <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0U;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d135      	bne.n	8005e34 <USBH_MSC_ClassRequest+0xb8>
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d804      	bhi.n	8005dda <USBH_MSC_ClassRequest+0x5e>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e000      	b.n	8005ddc <USBH_MSC_ClassRequest+0x60>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	6013      	str	r3, [r2, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8005de0:	2300      	movs	r3, #0
 8005de2:	73bb      	strb	r3, [r7, #14]
 8005de4:	e014      	b.n	8005e10 <USBH_MSC_ClassRequest+0x94>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	2134      	movs	r1, #52	; 0x34
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	4413      	add	r3, r2
 8005df2:	3392      	adds	r3, #146	; 0x92
 8005df4:	2202      	movs	r2, #2
 8005df6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0U;
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	2134      	movs	r1, #52	; 0x34
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	4413      	add	r3, r2
 8005e04:	33c1      	adds	r3, #193	; 0xc1
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	73bb      	strb	r3, [r7, #14]
 8005e10:	7bba      	ldrb	r2, [r7, #14]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d3e5      	bcc.n	8005de6 <USBH_MSC_ClassRequest+0x6a>
    break;
 8005e1a:	e00b      	b.n	8005e34 <USBH_MSC_ClassRequest+0xb8>
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 f92c 	bl	800807c <USBH_ClrFeature>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <USBH_MSC_ClassRequest+0xbc>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	7bda      	ldrb	r2, [r3, #15]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	739a      	strb	r2, [r3, #14]
    break;
 8005e32:	e001      	b.n	8005e38 <USBH_MSC_ClassRequest+0xbc>
    break;
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <USBH_MSC_ClassRequest+0xbe>
    break;
 8005e38:	bf00      	nop
  }

  return status;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	7b1b      	ldrb	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <USBH_MSC_Process+0x2e>
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	f000 828d 	beq.w	800638a <USBH_MSC_Process+0x546>
  case MSC_IDLE:
    error = USBH_OK;
    break;

  default:
    break;
 8005e70:	e28e      	b.n	8006390 <USBH_MSC_Process+0x54c>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e78:	461a      	mov	r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	f080 8267 	bcs.w	8006352 <USBH_MSC_Process+0x50e>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	2334      	movs	r3, #52	; 0x34
 8005e90:	fb03 f301 	mul.w	r3, r3, r1
 8005e94:	4413      	add	r3, r2
 8005e96:	3391      	adds	r3, #145	; 0x91
 8005e98:	2201      	movs	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	2334      	movs	r3, #52	; 0x34
 8005ea8:	fb03 f301 	mul.w	r3, r3, r1
 8005eac:	4413      	add	r3, r2
 8005eae:	3390      	adds	r3, #144	; 0x90
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	f200 8235 	bhi.w	8006322 <USBH_MSC_Process+0x4de>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <USBH_MSC_Process+0x7c>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08006323 	.word	0x08006323
 8005ec8:	08005fad 	.word	0x08005fad
 8005ecc:	08006131 	.word	0x08006131
 8005ed0:	08005f0b 	.word	0x08005f0b
 8005ed4:	080061fd 	.word	0x080061fd
 8005ed8:	08006323 	.word	0x08006323
 8005edc:	08006323 	.word	0x08006323
 8005ee0:	08006311 	.word	0x08006311
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eea:	4619      	mov	r1, r3
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	2334      	movs	r3, #52	; 0x34
 8005ef0:	fb03 f301 	mul.w	r3, r3, r1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3390      	adds	r3, #144	; 0x90
 8005ef8:	2204      	movs	r2, #4
 8005efa:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        break;
 8005f08:	e214      	b.n	8006334 <USBH_MSC_Process+0x4f0>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f10:	b2d9      	uxtb	r1, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2334      	movs	r3, #52	; 0x34
 8005f1c:	fb03 f302 	mul.w	r3, r3, r2
 8005f20:	3398      	adds	r3, #152	; 0x98
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	3307      	adds	r3, #7
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 f836 	bl	8006f9c <USBH_MSC_SCSI_Inquiry>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
        if (scsi_status == USBH_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <USBH_MSC_Process+0x10e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f40:	4619      	mov	r1, r3
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	2334      	movs	r3, #52	; 0x34
 8005f46:	fb03 f301 	mul.w	r3, r3, r1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3390      	adds	r3, #144	; 0x90
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
        if (scsi_status == USBH_FAIL)
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d10c      	bne.n	8005f72 <USBH_MSC_Process+0x12e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f5e:	4619      	mov	r1, r3
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	2334      	movs	r3, #52	; 0x34
 8005f64:	fb03 f301 	mul.w	r3, r3, r1
 8005f68:	4413      	add	r3, r2
 8005f6a:	3390      	adds	r3, #144	; 0x90
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	701a      	strb	r2, [r3, #0]
        break;
 8005f70:	e1d9      	b.n	8006326 <USBH_MSC_Process+0x4e2>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	f040 81d6 	bne.w	8006326 <USBH_MSC_Process+0x4e2>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f80:	4619      	mov	r1, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	2334      	movs	r3, #52	; 0x34
 8005f86:	fb03 f301 	mul.w	r3, r3, r1
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3390      	adds	r3, #144	; 0x90
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f98:	4619      	mov	r1, r3
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	2334      	movs	r3, #52	; 0x34
 8005f9e:	fb03 f301 	mul.w	r3, r3, r1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3391      	adds	r3, #145	; 0x91
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	701a      	strb	r2, [r3, #0]
        break;
 8005faa:	e1bc      	b.n	8006326 <USBH_MSC_Process+0x4e2>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ff32 	bl	8006e20 <USBH_MSC_SCSI_TestUnitReady>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73bb      	strb	r3, [r7, #14]
        if (ready_status == USBH_OK)
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d149      	bne.n	800605a <USBH_MSC_Process+0x216>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fcc:	4619      	mov	r1, r3
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	2334      	movs	r3, #52	; 0x34
 8005fd2:	fb03 f301 	mul.w	r3, r3, r1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3392      	adds	r3, #146	; 0x92
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00c      	beq.n	8005ffa <USBH_MSC_Process+0x1b6>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	2334      	movs	r3, #52	; 0x34
 8005fec:	fb03 f301 	mul.w	r3, r3, r1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	33c1      	adds	r3, #193	; 0xc1
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e00b      	b.n	8006012 <USBH_MSC_Process+0x1ce>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006000:	4619      	mov	r1, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	2334      	movs	r3, #52	; 0x34
 8006006:	fb03 f301 	mul.w	r3, r3, r1
 800600a:	4413      	add	r3, r2
 800600c:	33c1      	adds	r3, #193	; 0xc1
 800600e:	2200      	movs	r2, #0
 8006010:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006018:	4619      	mov	r1, r3
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	2334      	movs	r3, #52	; 0x34
 800601e:	fb03 f301 	mul.w	r3, r3, r1
 8006022:	4413      	add	r3, r2
 8006024:	3390      	adds	r3, #144	; 0x90
 8006026:	2203      	movs	r2, #3
 8006028:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006030:	4619      	mov	r1, r3
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	2334      	movs	r3, #52	; 0x34
 8006036:	fb03 f301 	mul.w	r3, r3, r1
 800603a:	4413      	add	r3, r2
 800603c:	3391      	adds	r3, #145	; 0x91
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006048:	4619      	mov	r1, r3
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	2334      	movs	r3, #52	; 0x34
 800604e:	fb03 f301 	mul.w	r3, r3, r1
 8006052:	4413      	add	r3, r2
 8006054:	3392      	adds	r3, #146	; 0x92
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
        if (ready_status == USBH_FAIL)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d14a      	bne.n	80060f6 <USBH_MSC_Process+0x2b2>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006066:	4619      	mov	r1, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	2334      	movs	r3, #52	; 0x34
 800606c:	fb03 f301 	mul.w	r3, r3, r1
 8006070:	4413      	add	r3, r2
 8006072:	3392      	adds	r3, #146	; 0x92
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d00c      	beq.n	8006094 <USBH_MSC_Process+0x250>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006080:	4619      	mov	r1, r3
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	2334      	movs	r3, #52	; 0x34
 8006086:	fb03 f301 	mul.w	r3, r3, r1
 800608a:	4413      	add	r3, r2
 800608c:	33c1      	adds	r3, #193	; 0xc1
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	e00b      	b.n	80060ac <USBH_MSC_Process+0x268>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800609a:	4619      	mov	r1, r3
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	2334      	movs	r3, #52	; 0x34
 80060a0:	fb03 f301 	mul.w	r3, r3, r1
 80060a4:	4413      	add	r3, r2
 80060a6:	33c1      	adds	r3, #193	; 0xc1
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060b2:	4619      	mov	r1, r3
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	2334      	movs	r3, #52	; 0x34
 80060b8:	fb03 f301 	mul.w	r3, r3, r1
 80060bc:	4413      	add	r3, r2
 80060be:	3390      	adds	r3, #144	; 0x90
 80060c0:	2205      	movs	r2, #5
 80060c2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ca:	4619      	mov	r1, r3
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	2334      	movs	r3, #52	; 0x34
 80060d0:	fb03 f301 	mul.w	r3, r3, r1
 80060d4:	4413      	add	r3, r2
 80060d6:	3391      	adds	r3, #145	; 0x91
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060e2:	4619      	mov	r1, r3
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	2334      	movs	r3, #52	; 0x34
 80060e8:	fb03 f301 	mul.w	r3, r3, r1
 80060ec:	4413      	add	r3, r2
 80060ee:	3392      	adds	r3, #146	; 0x92
 80060f0:	2202      	movs	r2, #2
 80060f2:	701a      	strb	r2, [r3, #0]
        break;
 80060f4:	e119      	b.n	800632a <USBH_MSC_Process+0x4e6>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	f040 8116 	bne.w	800632a <USBH_MSC_Process+0x4e6>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006104:	4619      	mov	r1, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	2334      	movs	r3, #52	; 0x34
 800610a:	fb03 f301 	mul.w	r3, r3, r1
 800610e:	4413      	add	r3, r2
 8006110:	3390      	adds	r3, #144	; 0x90
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800611c:	4619      	mov	r1, r3
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	2334      	movs	r3, #52	; 0x34
 8006122:	fb03 f301 	mul.w	r3, r3, r1
 8006126:	4413      	add	r3, r2
 8006128:	3391      	adds	r3, #145	; 0x91
 800612a:	2202      	movs	r2, #2
 800612c:	701a      	strb	r2, [r3, #0]
        break;
 800612e:	e0fc      	b.n	800632a <USBH_MSC_Process+0x4e6>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006136:	b2d9      	uxtb	r1, r3
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800613e:	461a      	mov	r2, r3
 8006140:	2334      	movs	r3, #52	; 0x34
 8006142:	fb03 f302 	mul.w	r3, r3, r2
 8006146:	3390      	adds	r3, #144	; 0x90
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	3304      	adds	r3, #4
 800614e:	461a      	mov	r2, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fea8 	bl	8006ea6 <USBH_MSC_SCSI_ReadCapacity>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d120      	bne.n	80061a2 <USBH_MSC_Process+0x35e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006166:	4619      	mov	r1, r3
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	2334      	movs	r3, #52	; 0x34
 800616c:	fb03 f301 	mul.w	r3, r3, r1
 8006170:	4413      	add	r3, r2
 8006172:	3390      	adds	r3, #144	; 0x90
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800617e:	4619      	mov	r1, r3
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	2334      	movs	r3, #52	; 0x34
 8006184:	fb03 f301 	mul.w	r3, r3, r1
 8006188:	4413      	add	r3, r2
 800618a:	3391      	adds	r3, #145	; 0x91
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006196:	3301      	adds	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 80061a0:	e0c5      	b.n	800632e <USBH_MSC_Process+0x4ea>
        else if(scsi_status == USBH_FAIL)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d10c      	bne.n	80061c2 <USBH_MSC_Process+0x37e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ae:	4619      	mov	r1, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	2334      	movs	r3, #52	; 0x34
 80061b4:	fb03 f301 	mul.w	r3, r3, r1
 80061b8:	4413      	add	r3, r2
 80061ba:	3390      	adds	r3, #144	; 0x90
 80061bc:	2205      	movs	r2, #5
 80061be:	701a      	strb	r2, [r3, #0]
        break;
 80061c0:	e0b5      	b.n	800632e <USBH_MSC_Process+0x4ea>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	f040 80b2 	bne.w	800632e <USBH_MSC_Process+0x4ea>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061d0:	4619      	mov	r1, r3
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	2334      	movs	r3, #52	; 0x34
 80061d6:	fb03 f301 	mul.w	r3, r3, r1
 80061da:	4413      	add	r3, r2
 80061dc:	3390      	adds	r3, #144	; 0x90
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061e8:	4619      	mov	r1, r3
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	2334      	movs	r3, #52	; 0x34
 80061ee:	fb03 f301 	mul.w	r3, r3, r1
 80061f2:	4413      	add	r3, r2
 80061f4:	3391      	adds	r3, #145	; 0x91
 80061f6:	2202      	movs	r2, #2
 80061f8:	701a      	strb	r2, [r3, #0]
        break;
 80061fa:	e098      	b.n	800632e <USBH_MSC_Process+0x4ea>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006202:	b2d9      	uxtb	r1, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800620a:	461a      	mov	r2, r3
 800620c:	2334      	movs	r3, #52	; 0x34
 800620e:	fb03 f302 	mul.w	r3, r3, r2
 8006212:	3398      	adds	r3, #152	; 0x98
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	3304      	adds	r3, #4
 800621a:	461a      	mov	r2, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 ff62 	bl	80070e6 <USBH_MSC_SCSI_RequestSense>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d145      	bne.n	80062b8 <USBH_MSC_Process+0x474>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006232:	4619      	mov	r1, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	2334      	movs	r3, #52	; 0x34
 8006238:	fb03 f301 	mul.w	r3, r3, r1
 800623c:	4413      	add	r3, r2
 800623e:	339c      	adds	r3, #156	; 0x9c
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b06      	cmp	r3, #6
 8006244:	d00c      	beq.n	8006260 <USBH_MSC_Process+0x41c>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800624c:	4619      	mov	r1, r3
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	2334      	movs	r3, #52	; 0x34
 8006252:	fb03 f301 	mul.w	r3, r3, r1
 8006256:	4413      	add	r3, r2
 8006258:	339c      	adds	r3, #156	; 0x9c
 800625a:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800625c:	2b02      	cmp	r3, #2
 800625e:	d117      	bne.n	8006290 <USBH_MSC_Process+0x44c>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f242 720f 	movw	r2, #9999	; 0x270f
 8006272:	4293      	cmp	r3, r2
 8006274:	d80c      	bhi.n	8006290 <USBH_MSC_Process+0x44c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800627c:	4619      	mov	r1, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	2334      	movs	r3, #52	; 0x34
 8006282:	fb03 f301 	mul.w	r3, r3, r1
 8006286:	4413      	add	r3, r2
 8006288:	3390      	adds	r3, #144	; 0x90
 800628a:	2202      	movs	r2, #2
 800628c:	701a      	strb	r2, [r3, #0]
              break;
 800628e:	e051      	b.n	8006334 <USBH_MSC_Process+0x4f0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006296:	4619      	mov	r1, r3
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	2334      	movs	r3, #52	; 0x34
 800629c:	fb03 f301 	mul.w	r3, r3, r1
 80062a0:	4413      	add	r3, r2
 80062a2:	3390      	adds	r3, #144	; 0x90
 80062a4:	2201      	movs	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062ae:	3301      	adds	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if(scsi_status == USBH_FAIL)
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d10c      	bne.n	80062d8 <USBH_MSC_Process+0x494>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062c4:	4619      	mov	r1, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	2334      	movs	r3, #52	; 0x34
 80062ca:	fb03 f301 	mul.w	r3, r3, r1
 80062ce:	4413      	add	r3, r2
 80062d0:	3390      	adds	r3, #144	; 0x90
 80062d2:	2208      	movs	r2, #8
 80062d4:	701a      	strb	r2, [r3, #0]
        break;
 80062d6:	e02c      	b.n	8006332 <USBH_MSC_Process+0x4ee>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d129      	bne.n	8006332 <USBH_MSC_Process+0x4ee>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062e4:	4619      	mov	r1, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	2334      	movs	r3, #52	; 0x34
 80062ea:	fb03 f301 	mul.w	r3, r3, r1
 80062ee:	4413      	add	r3, r2
 80062f0:	3390      	adds	r3, #144	; 0x90
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062fc:	4619      	mov	r1, r3
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	2334      	movs	r3, #52	; 0x34
 8006302:	fb03 f301 	mul.w	r3, r3, r1
 8006306:	4413      	add	r3, r2
 8006308:	3391      	adds	r3, #145	; 0x91
 800630a:	2202      	movs	r2, #2
 800630c:	701a      	strb	r2, [r3, #0]
        break;
 800630e:	e010      	b.n	8006332 <USBH_MSC_Process+0x4ee>
        MSC_Handle->current_lun++;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006316:	3301      	adds	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 8006320:	e008      	b.n	8006334 <USBH_MSC_Process+0x4f0>
        break;
 8006322:	bf00      	nop
 8006324:	e006      	b.n	8006334 <USBH_MSC_Process+0x4f0>
        break;
 8006326:	bf00      	nop
 8006328:	e004      	b.n	8006334 <USBH_MSC_Process+0x4f0>
        break;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <USBH_MSC_Process+0x4f0>
        break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <USBH_MSC_Process+0x4f0>
        break;
 8006332:	bf00      	nop
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2204      	movs	r2, #4
 8006338:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006348:	2300      	movs	r3, #0
 800634a:	2200      	movs	r2, #0
 800634c:	f005 fd98 	bl	800be80 <osMessageQueuePut>
    break;
 8006350:	e01e      	b.n	8006390 <USBH_MSC_Process+0x54c>
      MSC_Handle->current_lun = 0U;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
      MSC_Handle->state = MSC_IDLE;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2201      	movs	r2, #1
 800635e:	731a      	strb	r2, [r3, #12]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2204      	movs	r2, #4
 8006364:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006374:	2300      	movs	r3, #0
 8006376:	2200      	movs	r2, #0
 8006378:	f005 fd82 	bl	800be80 <osMessageQueuePut>
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006382:	2102      	movs	r1, #2
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
    break;
 8006388:	e002      	b.n	8006390 <USBH_MSC_Process+0x54c>
    error = USBH_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	75fb      	strb	r3, [r7, #23]
    break;
 800638e:	bf00      	nop
  }
  return error;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop

0800639c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b088      	sub	sp, #32
 80063b6:	af02      	add	r7, sp, #8
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80063c8:	2301      	movs	r3, #1
 80063ca:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	2134      	movs	r1, #52	; 0x34
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	4413      	add	r3, r2
 80063dc:	3390      	adds	r3, #144	; 0x90
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b06      	cmp	r3, #6
 80063e2:	d005      	beq.n	80063f0 <USBH_MSC_RdWrProcess+0x3e>
 80063e4:	2b07      	cmp	r3, #7
 80063e6:	d046      	beq.n	8006476 <USBH_MSC_RdWrProcess+0xc4>
 80063e8:	2b05      	cmp	r3, #5
 80063ea:	f000 8087 	beq.w	80064fc <USBH_MSC_RdWrProcess+0x14a>
#endif
#endif
    break;

  default:
    break;
 80063ee:	e0cb      	b.n	8006588 <USBH_MSC_RdWrProcess+0x1d6>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 80063f0:	78f9      	ldrb	r1, [r7, #3]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2300      	movs	r3, #0
 80063f8:	2200      	movs	r2, #0
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ff57 	bl	80072ae <USBH_MSC_SCSI_Read>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <USBH_MSC_RdWrProcess+0x70>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	2134      	movs	r1, #52	; 0x34
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	3390      	adds	r3, #144	; 0x90
 8006418:	2201      	movs	r2, #1
 800641a:	701a      	strb	r2, [r3, #0]
      error = USBH_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
 8006420:	e01a      	b.n	8006458 <USBH_MSC_RdWrProcess+0xa6>
    else if( scsi_status == USBH_FAIL)
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d109      	bne.n	800643c <USBH_MSC_RdWrProcess+0x8a>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	2134      	movs	r1, #52	; 0x34
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	4413      	add	r3, r2
 8006434:	3390      	adds	r3, #144	; 0x90
 8006436:	2205      	movs	r2, #5
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e00d      	b.n	8006458 <USBH_MSC_RdWrProcess+0xa6>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d10a      	bne.n	8006458 <USBH_MSC_RdWrProcess+0xa6>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	2134      	movs	r1, #52	; 0x34
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	4413      	add	r3, r2
 800644e:	3390      	adds	r3, #144	; 0x90
 8006450:	2208      	movs	r2, #8
 8006452:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8006454:	2302      	movs	r3, #2
 8006456:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2204      	movs	r2, #4
 800645c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800646c:	2300      	movs	r3, #0
 800646e:	2200      	movs	r2, #0
 8006470:	f005 fd06 	bl	800be80 <osMessageQueuePut>
    break;
 8006474:	e088      	b.n	8006588 <USBH_MSC_RdWrProcess+0x1d6>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 8006476:	78f9      	ldrb	r1, [r7, #3]
 8006478:	2300      	movs	r3, #0
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	2200      	movs	r2, #0
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fea9 	bl	80071d8 <USBH_MSC_SCSI_Write>
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <USBH_MSC_RdWrProcess+0xf6>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	2134      	movs	r1, #52	; 0x34
 8006496:	fb01 f303 	mul.w	r3, r1, r3
 800649a:	4413      	add	r3, r2
 800649c:	3390      	adds	r3, #144	; 0x90
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	75fb      	strb	r3, [r7, #23]
 80064a6:	e01a      	b.n	80064de <USBH_MSC_RdWrProcess+0x12c>
    else if( scsi_status == USBH_FAIL)
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d109      	bne.n	80064c2 <USBH_MSC_RdWrProcess+0x110>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	2134      	movs	r1, #52	; 0x34
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	4413      	add	r3, r2
 80064ba:	3390      	adds	r3, #144	; 0x90
 80064bc:	2205      	movs	r2, #5
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e00d      	b.n	80064de <USBH_MSC_RdWrProcess+0x12c>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d10a      	bne.n	80064de <USBH_MSC_RdWrProcess+0x12c>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	2134      	movs	r1, #52	; 0x34
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	3390      	adds	r3, #144	; 0x90
 80064d6:	2208      	movs	r2, #8
 80064d8:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80064da:	2302      	movs	r3, #2
 80064dc:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2204      	movs	r2, #4
 80064e2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80064f2:	2300      	movs	r3, #0
 80064f4:	2200      	movs	r2, #0
 80064f6:	f005 fcc3 	bl	800be80 <osMessageQueuePut>
    break;
 80064fa:	e045      	b.n	8006588 <USBH_MSC_RdWrProcess+0x1d6>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2234      	movs	r2, #52	; 0x34
 8006500:	fb02 f303 	mul.w	r3, r2, r3
 8006504:	3398      	adds	r3, #152	; 0x98
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4413      	add	r3, r2
 800650a:	1d1a      	adds	r2, r3, #4
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fde8 	bl	80070e6 <USBH_MSC_SCSI_RequestSense>
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d113      	bne.n	8006548 <USBH_MSC_RdWrProcess+0x196>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	2134      	movs	r1, #52	; 0x34
 8006526:	fb01 f303 	mul.w	r3, r1, r3
 800652a:	4413      	add	r3, r2
 800652c:	3390      	adds	r3, #144	; 0x90
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	2134      	movs	r1, #52	; 0x34
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	4413      	add	r3, r2
 800653e:	3391      	adds	r3, #145	; 0x91
 8006540:	2202      	movs	r2, #2
 8006542:	701a      	strb	r2, [r3, #0]
      error = USBH_FAIL;
 8006544:	2302      	movs	r3, #2
 8006546:	75fb      	strb	r3, [r7, #23]
    if(scsi_status == USBH_FAIL)
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d00d      	beq.n	800656a <USBH_MSC_RdWrProcess+0x1b8>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d10a      	bne.n	800656a <USBH_MSC_RdWrProcess+0x1b8>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	2134      	movs	r1, #52	; 0x34
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	4413      	add	r3, r2
 8006560:	3390      	adds	r3, #144	; 0x90
 8006562:	2208      	movs	r2, #8
 8006564:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8006566:	2302      	movs	r3, #2
 8006568:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2204      	movs	r2, #4
 800656e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800657e:	2300      	movs	r3, #0
 8006580:	2200      	movs	r2, #0
 8006582:	f005 fc7d 	bl	800be80 <osMessageQueuePut>
    break;
 8006586:	bf00      	nop

  }
  return error;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b0b      	cmp	r3, #11
 80065b0:	d10c      	bne.n	80065cc <USBH_MSC_UnitIsReady+0x3a>
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	2134      	movs	r1, #52	; 0x34
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	4413      	add	r3, r2
 80065be:	3391      	adds	r3, #145	; 0x91
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
 80065ca:	e001      	b.n	80065d0 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b086      	sub	sp, #24
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	460b      	mov	r3, r1
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	617b      	str	r3, [r7, #20]
  if(phost->gState == HOST_CLASS)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b0b      	cmp	r3, #11
 80065fe:	d10d      	bne.n	800661c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	2234      	movs	r2, #52	; 0x34
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	3390      	adds	r3, #144	; 0x90
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	2234      	movs	r2, #52	; 0x34
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f00c fa96 	bl	8012b44 <memcpy>
    return USBH_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b088      	sub	sp, #32
 800662a:	af02      	add	r7, sp, #8
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	460b      	mov	r3, r1
 8006634:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00e      	beq.n	800666a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006652:	2b0b      	cmp	r3, #11
 8006654:	d109      	bne.n	800666a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006656:	7afb      	ldrb	r3, [r7, #11]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	2134      	movs	r1, #52	; 0x34
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	3390      	adds	r3, #144	; 0x90
 8006664:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006666:	2b01      	cmp	r3, #1
 8006668:	d001      	beq.n	800666e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800666a:	2302      	movs	r3, #2
 800666c:	e040      	b.n	80066f0 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2206      	movs	r2, #6
 8006672:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	2134      	movs	r1, #52	; 0x34
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	4413      	add	r3, r2
 8006680:	3390      	adds	r3, #144	; 0x90
 8006682:	2206      	movs	r2, #6
 8006684:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	b29a      	uxth	r2, r3
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006690:	7af9      	ldrb	r1, [r7, #11]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fe07 	bl	80072ae <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80066a6:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80066a8:	e016      	b.n	80066d8 <USBH_MSC_Read+0xb2>
  {
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad2      	subs	r2, r2, r3
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	429a      	cmp	r2, r3
 80066c0:	d805      	bhi.n	80066ce <USBH_MSC_Read+0xa8>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d104      	bne.n	80066d8 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2201      	movs	r2, #1
 80066d2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80066d4:	2302      	movs	r3, #2
 80066d6:	e00b      	b.n	80066f0 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	4619      	mov	r1, r3
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fe68 	bl	80063b2 <USBH_MSC_RdWrProcess>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d0e0      	beq.n	80066aa <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2201      	movs	r2, #1
 80066ec:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	460b      	mov	r3, r1
 8006706:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006724:	2b0b      	cmp	r3, #11
 8006726:	d109      	bne.n	800673c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	2134      	movs	r1, #52	; 0x34
 800672e:	fb01 f303 	mul.w	r3, r1, r3
 8006732:	4413      	add	r3, r2
 8006734:	3390      	adds	r3, #144	; 0x90
 8006736:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006738:	2b01      	cmp	r3, #1
 800673a:	d001      	beq.n	8006740 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800673c:	2302      	movs	r3, #2
 800673e:	e040      	b.n	80067c2 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2207      	movs	r2, #7
 8006744:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	2134      	movs	r1, #52	; 0x34
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	3390      	adds	r3, #144	; 0x90
 8006754:	2207      	movs	r2, #7
 8006756:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	b29a      	uxth	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006762:	7af9      	ldrb	r1, [r7, #11]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fd33 	bl	80071d8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006778:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800677a:	e016      	b.n	80067aa <USBH_MSC_Write+0xb2>
  {
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	f242 7110 	movw	r1, #10000	; 0x2710
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	429a      	cmp	r2, r3
 8006792:	d805      	bhi.n	80067a0 <USBH_MSC_Write+0xa8>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2201      	movs	r2, #1
 80067a4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80067a6:	2302      	movs	r3, #2
 80067a8:	e00b      	b.n	80067c2 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	4619      	mov	r1, r3
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fdff 	bl	80063b2 <USBH_MSC_RdWrProcess>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d0e0      	beq.n	800677c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2201      	movs	r2, #1
 80067be:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2221      	movs	r2, #33	; 0x21
 80067d6:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	22ff      	movs	r2, #255	; 0xff
 80067dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80067f0:	2200      	movs	r2, #0
 80067f2:	2100      	movs	r1, #0
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fe21 	bl	800843c <USBH_CtlReq>
 80067fa:	4603      	mov	r3, r0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	22a1      	movs	r2, #161	; 0xa1
 8006812:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	22fe      	movs	r2, #254	; 0xfe
 8006818:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800682c:	2201      	movs	r2, #1
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fe03 	bl	800843c <USBH_CtlReq>
 8006836:	4603      	mov	r3, r0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a09      	ldr	r2, [pc, #36]	; (800687c <USBH_MSC_BOT_Init+0x3c>)
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a09      	ldr	r2, [pc, #36]	; (8006880 <USBH_MSC_BOT_Init+0x40>)
 800685c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	43425355 	.word	0x43425355
 8006880:	20304050 	.word	0x20304050

08006884 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006890:	2301      	movs	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006894:	2301      	movs	r3, #1
 8006896:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006898:	2301      	movs	r3, #1
 800689a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800689c:	2300      	movs	r3, #0
 800689e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068b4:	3b01      	subs	r3, #1
 80068b6:	2b0a      	cmp	r3, #10
 80068b8:	f200 822d 	bhi.w	8006d16 <USBH_MSC_BOT_Process+0x492>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <USBH_MSC_BOT_Process+0x40>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	0800691b 	.word	0x0800691b
 80068cc:	080069d9 	.word	0x080069d9
 80068d0:	080069f7 	.word	0x080069f7
 80068d4:	08006ab3 	.word	0x08006ab3
 80068d8:	08006ad7 	.word	0x08006ad7
 80068dc:	08006bc5 	.word	0x08006bc5
 80068e0:	08006be1 	.word	0x08006be1
 80068e4:	08006c6b 	.word	0x08006c6b
 80068e8:	08006c9b 	.word	0x08006c9b
 80068ec:	08006cfd 	.word	0x08006cfd
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	795a      	ldrb	r2, [r3, #5]
 800690a:	2301      	movs	r3, #1
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	221f      	movs	r2, #31
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f002 f885 	bl	8008a22 <USBH_BulkSendData>
                       BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

    break;
 8006918:	e20c      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>

  case BOT_SEND_CBW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	795b      	ldrb	r3, [r3, #5]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f009 fe2f 	bl	8010584 <USBH_LL_GetURBState>
 8006926:	4603      	mov	r3, r0
 8006928:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 800692a:	7d3b      	ldrb	r3, [r7, #20]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d126      	bne.n	800697e <USBH_MSC_BOT_Process+0xfa>
    {
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00f      	beq.n	8006958 <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800693e:	b25b      	sxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	da04      	bge.n	800694e <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2203      	movs	r2, #3
 8006948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800694c:	e008      	b.n	8006960 <USBH_MSC_BOT_Process+0xdc>
        }
        else
        {
          /* Data Direction is OUT */
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2205      	movs	r2, #5
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006956:	e003      	b.n	8006960 <USBH_MSC_BOT_Process+0xdc>
        }
      }

      else
      {/* If there is NO Data Transfer Stage */
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2207      	movs	r2, #7
 800695c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006974:	2300      	movs	r3, #0
 8006976:	2200      	movs	r2, #0
 8006978:	f005 fa82 	bl	800be80 <osMessageQueuePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800697c:	e1cd      	b.n	8006d1a <USBH_MSC_BOT_Process+0x496>
    else if(URB_Status == USBH_URB_NOTREADY)
 800697e:	7d3b      	ldrb	r3, [r7, #20]
 8006980:	2b02      	cmp	r3, #2
 8006982:	d112      	bne.n	80069aa <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80069a0:	2300      	movs	r3, #0
 80069a2:	2200      	movs	r2, #0
 80069a4:	f005 fa6c 	bl	800be80 <osMessageQueuePut>
    break;
 80069a8:	e1b7      	b.n	8006d1a <USBH_MSC_BOT_Process+0x496>
      if(URB_Status == USBH_URB_STALL)
 80069aa:	7d3b      	ldrb	r3, [r7, #20]
 80069ac:	2b05      	cmp	r3, #5
 80069ae:	f040 81b4 	bne.w	8006d1a <USBH_MSC_BOT_Process+0x496>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	220a      	movs	r2, #10
 80069b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	f005 fa55 	bl	800be80 <osMessageQueuePut>
    break;
 80069d6:	e1a0      	b.n	8006d1a <USBH_MSC_BOT_Process+0x496>

  case BOT_DATA_IN:
    /* Send first packet */
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	895a      	ldrh	r2, [r3, #10]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	791b      	ldrb	r3, [r3, #4]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f002 f840 	bl	8008a6c <USBH_BulkReceiveData>
                          MSC_Handle->InEpSize, MSC_Handle->InPipe);

    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2204      	movs	r2, #4
 80069f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    break;
 80069f4:	e19e      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>

  case BOT_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	791b      	ldrb	r3, [r3, #4]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f009 fdc1 	bl	8010584 <USBH_LL_GetURBState>
 8006a02:	4603      	mov	r3, r0
 8006a04:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 8006a06:	7d3b      	ldrb	r3, [r7, #20]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d13b      	bne.n	8006a84 <USBH_MSC_BOT_Process+0x200>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	8952      	ldrh	r2, [r2, #10]
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d910      	bls.n	8006a3a <USBH_MSC_BOT_Process+0x1b6>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	8952      	ldrh	r2, [r2, #10]
 8006a22:	441a      	add	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	8952      	ldrh	r2, [r2, #10]
 8006a32:	1a9a      	subs	r2, r3, r2
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a38:	e002      	b.n	8006a40 <USBH_MSC_BOT_Process+0x1bc>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <USBH_MSC_BOT_Process+0x1da>
      {
        /* Send next packet */
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	895a      	ldrh	r2, [r3, #10]
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	791b      	ldrb	r3, [r3, #4]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 f808 	bl	8008a6c <USBH_BulkReceiveData>
#endif
    }
    else
    {
    }
    break;
 8006a5c:	e15f      	b.n	8006d1e <USBH_MSC_BOT_Process+0x49a>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2207      	movs	r2, #7
 8006a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f005 f9ff 	bl	800be80 <osMessageQueuePut>
    break;
 8006a82:	e14c      	b.n	8006d1e <USBH_MSC_BOT_Process+0x49a>
    else if(URB_Status == USBH_URB_STALL)
 8006a84:	7d3b      	ldrb	r3, [r7, #20]
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	f040 8149 	bne.w	8006d1e <USBH_MSC_BOT_Process+0x49a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2209      	movs	r2, #9
 8006a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f005 f9e8 	bl	800be80 <osMessageQueuePut>
    break;
 8006ab0:	e135      	b.n	8006d1e <USBH_MSC_BOT_Process+0x49a>

  case BOT_DATA_OUT:

    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	891a      	ldrh	r2, [r3, #8]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	7958      	ldrb	r0, [r3, #5]
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 ffab 	bl	8008a22 <USBH_BulkSendData>
                       MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2206      	movs	r2, #6
 8006ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006ad4:	e12e      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>

  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	795b      	ldrb	r3, [r3, #5]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f009 fd51 	bl	8010584 <USBH_LL_GetURBState>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 8006ae6:	7d3b      	ldrb	r3, [r7, #20]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d13e      	bne.n	8006b6a <USBH_MSC_BOT_Process+0x2e6>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	8912      	ldrh	r2, [r2, #8]
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d910      	bls.n	8006b1a <USBH_MSC_BOT_Process+0x296>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	8912      	ldrh	r2, [r2, #8]
 8006b02:	441a      	add	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	8912      	ldrh	r2, [r2, #8]
 8006b12:	1a9a      	subs	r2, r3, r2
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b18:	e002      	b.n	8006b20 <USBH_MSC_BOT_Process+0x29c>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <USBH_MSC_BOT_Process+0x2c0>
      {
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	891a      	ldrh	r2, [r3, #8]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	7958      	ldrb	r0, [r3, #5]
 8006b36:	2301      	movs	r3, #1
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 ff70 	bl	8008a22 <USBH_BulkSendData>
 8006b42:	e003      	b.n	8006b4c <USBH_MSC_BOT_Process+0x2c8>
                           MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
      }
      else
      {
        /* If value was 0, and successful transfer, then change the state */
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2207      	movs	r2, #7
 8006b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006b60:	2300      	movs	r3, #0
 8006b62:	2200      	movs	r2, #0
 8006b64:	f005 f98c 	bl	800be80 <osMessageQueuePut>
#endif
    }
    else
    {
    }
    break;
 8006b68:	e0db      	b.n	8006d22 <USBH_MSC_BOT_Process+0x49e>
    else if(URB_Status == USBH_URB_NOTREADY)
 8006b6a:	7d3b      	ldrb	r3, [r7, #20]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d112      	bne.n	8006b96 <USBH_MSC_BOT_Process+0x312>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2205      	movs	r2, #5
 8006b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f005 f976 	bl	800be80 <osMessageQueuePut>
    break;
 8006b94:	e0c5      	b.n	8006d22 <USBH_MSC_BOT_Process+0x49e>
    else if(URB_Status == USBH_URB_STALL)
 8006b96:	7d3b      	ldrb	r3, [r7, #20]
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	f040 80c2 	bne.w	8006d22 <USBH_MSC_BOT_Process+0x49e>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f005 f95f 	bl	800be80 <osMessageQueuePut>
    break;
 8006bc2:	e0ae      	b.n	8006d22 <USBH_MSC_BOT_Process+0x49e>

  case BOT_RECEIVE_CSW:

    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	220d      	movs	r2, #13
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 ff4b 	bl	8008a6c <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH, MSC_Handle->InPipe);

    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2208      	movs	r2, #8
 8006bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006bde:	e0a9      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>

  case BOT_RECEIVE_CSW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	791b      	ldrb	r3, [r3, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f009 fccc 	bl	8010584 <USBH_LL_GetURBState>
 8006bec:	4603      	mov	r3, r0
 8006bee:	753b      	strb	r3, [r7, #20]

    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 8006bf0:	7d3b      	ldrb	r3, [r7, #20]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d123      	bne.n	8006c3e <USBH_MSC_BOT_Process+0x3ba>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f8c6 	bl	8006d98 <USBH_MSC_DecodeCSW>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	757b      	strb	r3, [r7, #21]

      if(CSW_Status == BOT_CSW_CMD_PASSED)
 8006c10:	7d7b      	ldrb	r3, [r7, #21]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <USBH_MSC_BOT_Process+0x398>
      {
        status = USBH_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
 8006c1a:	e001      	b.n	8006c20 <USBH_MSC_BOT_Process+0x39c>
      }
      else
      {
        status = USBH_FAIL;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006c34:	2300      	movs	r3, #0
 8006c36:	2200      	movs	r2, #0
 8006c38:	f005 f922 	bl	800be80 <osMessageQueuePut>
#endif
    }
    else
    {
    }
    break;
 8006c3c:	e073      	b.n	8006d26 <USBH_MSC_BOT_Process+0x4a2>
    else if(URB_Status == USBH_URB_STALL)
 8006c3e:	7d3b      	ldrb	r3, [r7, #20]
 8006c40:	2b05      	cmp	r3, #5
 8006c42:	d170      	bne.n	8006d26 <USBH_MSC_BOT_Process+0x4a2>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2209      	movs	r2, #9
 8006c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8006c60:	2300      	movs	r3, #0
 8006c62:	2200      	movs	r2, #0
 8006c64:	f005 f90c 	bl	800be80 <osMessageQueuePut>
    break;
 8006c68:	e05d      	b.n	8006d26 <USBH_MSC_BOT_Process+0x4a2>

  case BOT_ERROR_IN:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f865 	bl	8006d40 <USBH_MSC_BOT_Abort>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 8006c7a:	7dbb      	ldrb	r3, [r7, #22]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <USBH_MSC_BOT_Process+0x406>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2207      	movs	r2, #7
 8006c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    else
    {
    }
    break;
 8006c88:	e04f      	b.n	8006d2a <USBH_MSC_BOT_Process+0x4a6>
    else if (error == USBH_UNRECOVERED_ERROR)
 8006c8a:	7dbb      	ldrb	r3, [r7, #22]
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d14c      	bne.n	8006d2a <USBH_MSC_BOT_Process+0x4a6>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	220b      	movs	r2, #11
 8006c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006c98:	e047      	b.n	8006d2a <USBH_MSC_BOT_Process+0x4a6>

  case BOT_ERROR_OUT:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f84d 	bl	8006d40 <USBH_MSC_BOT_Abort>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11d      	bne.n	8006cec <USBH_MSC_BOT_Process+0x468>
    {

      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	795b      	ldrb	r3, [r3, #5]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f009 fcc1 	bl	801063e <USBH_LL_GetToggle>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	7959      	ldrb	r1, [r3, #5]
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	f1c3 0301 	rsb	r3, r3, #1
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f009 fc82 	bl	80105d8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	791b      	ldrb	r3, [r3, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f009 fc7b 	bl	80105d8 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2209      	movs	r2, #9
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (error == USBH_UNRECOVERED_ERROR)
      {
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
    }
    break;
 8006cea:	e020      	b.n	8006d2e <USBH_MSC_BOT_Process+0x4aa>
      if (error == USBH_UNRECOVERED_ERROR)
 8006cec:	7dbb      	ldrb	r3, [r7, #22]
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d11d      	bne.n	8006d2e <USBH_MSC_BOT_Process+0x4aa>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	220b      	movs	r2, #11
 8006cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006cfa:	e018      	b.n	8006d2e <USBH_MSC_BOT_Process+0x4aa>


  case BOT_UNRECOVERED_ERROR:
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fd64 	bl	80067ca <USBH_MSC_BOT_REQ_Reset>
 8006d02:	4603      	mov	r3, r0
 8006d04:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d112      	bne.n	8006d32 <USBH_MSC_BOT_Process+0x4ae>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 8006d14:	e00d      	b.n	8006d32 <USBH_MSC_BOT_Process+0x4ae>

  default:
    break;
 8006d16:	bf00      	nop
 8006d18:	e00c      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>
    break;
 8006d1a:	bf00      	nop
 8006d1c:	e00a      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>
    break;
 8006d1e:	bf00      	nop
 8006d20:	e008      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>
    break;
 8006d22:	bf00      	nop
 8006d24:	e006      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>
    break;
 8006d26:	bf00      	nop
 8006d28:	e004      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>
    break;
 8006d2a:	bf00      	nop
 8006d2c:	e002      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>
    break;
 8006d2e:	bf00      	nop
 8006d30:	e000      	b.n	8006d34 <USBH_MSC_BOT_Process+0x4b0>
    break;
 8006d32:	bf00      	nop
  }
  return status;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 8006d50:	2302      	movs	r3, #2
 8006d52:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006d5e:	78bb      	ldrb	r3, [r7, #2]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <USBH_MSC_BOT_Abort+0x2a>
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d009      	beq.n	8006d7c <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;

  default:
    break;
 8006d68:	e011      	b.n	8006d8e <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	79db      	ldrb	r3, [r3, #7]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f983 	bl	800807c <USBH_ClrFeature>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7a:	e008      	b.n	8006d8e <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	799b      	ldrb	r3, [r3, #6]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 f97a 	bl	800807c <USBH_ClrFeature>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8c:	bf00      	nop
  }
  return status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006daa:	2301      	movs	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	791b      	ldrb	r3, [r3, #4]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f009 fb53 	bl	8010460 <USBH_LL_GetLastXferSize>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b0d      	cmp	r3, #13
 8006dbe:	d002      	beq.n	8006dc6 <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/


      status = BOT_CSW_PHASE_ERROR;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e024      	b.n	8006e10 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */

      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dca:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <USBH_MSC_DecodeCSW+0x84>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d11d      	bne.n	8006e0c <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */

        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d119      	bne.n	8006e10 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0U)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device,
            Device intends to receive data from the host)

            */

            status = BOT_CSW_CMD_PASSED;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]
 8006dea:	e011      	b.n	8006e10 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1U)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d102      	bne.n	8006dfc <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 8006df6:	2301      	movs	r3, #1
 8006df8:	73fb      	strb	r3, [r7, #15]
 8006dfa:	e009      	b.n	8006e10 <USBH_MSC_DecodeCSW+0x78>
          }

          else if(MSC_Handle->hbot.csw.field.Status == 2U)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d104      	bne.n	8006e10 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device,
            Device intends to receive data from the host)
            */

            status = BOT_CSW_PHASE_ERROR;
 8006e06:	2302      	movs	r3, #2
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	e001      	b.n	8006e10 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */

        status = BOT_CSW_PHASE_ERROR;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/

  return status;
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	53425355 	.word	0x53425355

08006e20 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	60bb      	str	r3, [r7, #8]

  switch(MSC_Handle->hbot.cmd_state)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d002      	beq.n	8006e4a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d021      	beq.n	8006e8c <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 8006e48:	e028      	b.n	8006e9c <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	220a      	movs	r2, #10
 8006e5c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3363      	adds	r3, #99	; 0x63
 8006e64:	2210      	movs	r2, #16
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f00b fe76 	bl	8012b5a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY;
 8006e86:	2301      	movs	r3, #1
 8006e88:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8a:	e007      	b.n	8006e9c <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fcf7 	bl	8006884 <USBH_MSC_BOT_Process>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9a:	bf00      	nop
  }

  return error;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b086      	sub	sp, #24
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d002      	beq.n	8006ed2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d027      	beq.n	8006f20 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
    }
    break;

  default:
    break;
 8006ed0:	e05f      	b.n	8006f92 <USBH_MSC_SCSI_ReadCapacity+0xec>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2280      	movs	r2, #128	; 0x80
 8006edc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	220a      	movs	r2, #10
 8006ee4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3363      	adds	r3, #99	; 0x63
 8006eec:	2210      	movs	r2, #16
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f00b fe32 	bl	8012b5a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2225      	movs	r2, #37	; 0x25
 8006efa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f103 0210 	add.w	r2, r3, #16
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	75fb      	strb	r3, [r7, #23]
    break;
 8006f1e:	e038      	b.n	8006f92 <USBH_MSC_SCSI_ReadCapacity+0xec>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006f20:	7afb      	ldrb	r3, [r7, #11]
 8006f22:	4619      	mov	r1, r3
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff fcad 	bl	8006884 <USBH_MSC_BOT_Process>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d12d      	bne.n	8006f90 <USBH_MSC_SCSI_ReadCapacity+0xea>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f3a:	3303      	adds	r3, #3
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f46:	3302      	adds	r3, #2
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f54:	3301      	adds	r3, #1
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8006f5a:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	061b      	lsls	r3, r3, #24
 8006f66:	431a      	orrs	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f72:	3307      	adds	r3, #7
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f7e:	3306      	adds	r3, #6
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	809a      	strh	r2, [r3, #4]
    break;
 8006f90:	bf00      	nop
  }

  return error;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006faa:	2302      	movs	r3, #2
 8006fac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d002      	beq.n	8006fc8 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d03d      	beq.n	8007042 <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
    }
    break;

  default:
    break;
 8006fc6:	e089      	b.n	80070dc <USBH_MSC_SCSI_Inquiry+0x140>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2224      	movs	r2, #36	; 0x24
 8006fcc:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2280      	movs	r2, #128	; 0x80
 8006fd2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	220a      	movs	r2, #10
 8006fda:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	3363      	adds	r3, #99	; 0x63
 8006fe2:	220a      	movs	r2, #10
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f00b fdb7 	bl	8012b5a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2212      	movs	r2, #18
 8006ff0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	015b      	lsls	r3, r3, #5
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2224      	movs	r2, #36	; 0x24
 8007014:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f103 0210 	add.w	r2, r3, #16
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
    break;
 8007040:	e04c      	b.n	80070dc <USBH_MSC_SCSI_Inquiry+0x140>
    error = USBH_MSC_BOT_Process(phost, lun);
 8007042:	7afb      	ldrb	r3, [r7, #11]
 8007044:	4619      	mov	r1, r3
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fc1c 	bl	8006884 <USBH_MSC_BOT_Process>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d141      	bne.n	80070da <USBH_MSC_SCSI_Inquiry+0x13e>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007056:	2222      	movs	r2, #34	; 0x22
 8007058:	2100      	movs	r1, #0
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f00b fd7d 	bl	8012b5a <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	701a      	strb	r2, [r3, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007088:	3301      	adds	r3, #1
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	b25b      	sxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	da03      	bge.n	800709a <USBH_MSC_SCSI_Inquiry+0xfe>
        inquiry->RemovableMedia = 1U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	709a      	strb	r2, [r3, #2]
 8007098:	e002      	b.n	80070a0 <USBH_MSC_SCSI_Inquiry+0x104>
        inquiry->RemovableMedia = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	1cd8      	adds	r0, r3, #3
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070aa:	3308      	adds	r3, #8
 80070ac:	2208      	movs	r2, #8
 80070ae:	4619      	mov	r1, r3
 80070b0:	f00b fd48 	bl	8012b44 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f103 000c 	add.w	r0, r3, #12
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c0:	3310      	adds	r3, #16
 80070c2:	2210      	movs	r2, #16
 80070c4:	4619      	mov	r1, r3
 80070c6:	f00b fd3d 	bl	8012b44 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	331d      	adds	r3, #29
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80070d4:	3220      	adds	r2, #32
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	601a      	str	r2, [r3, #0]
    break;
 80070da:	bf00      	nop
  }

  return error;
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b086      	sub	sp, #24
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	460b      	mov	r3, r1
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80070f4:	2302      	movs	r3, #2
 80070f6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007108:	2b01      	cmp	r3, #1
 800710a:	d002      	beq.n	8007112 <USBH_MSC_SCSI_RequestSense+0x2c>
 800710c:	2b02      	cmp	r3, #2
 800710e:	d03d      	beq.n	800718c <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;

  default:
    break;
 8007110:	e05d      	b.n	80071ce <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	220e      	movs	r2, #14
 8007116:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2280      	movs	r2, #128	; 0x80
 800711c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	220a      	movs	r2, #10
 8007124:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3363      	adds	r3, #99	; 0x63
 800712c:	2210      	movs	r2, #16
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f00b fd12 	bl	8012b5a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2203      	movs	r2, #3
 800713a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	015b      	lsls	r3, r3, #5
 8007142:	b2da      	uxtb	r2, r3
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	220e      	movs	r2, #14
 800715e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f103 0210 	add.w	r2, r3, #16
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
    break;
 800718a:	e020      	b.n	80071ce <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	4619      	mov	r1, r3
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff fb77 	bl	8006884 <USBH_MSC_BOT_Process>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d115      	bne.n	80071cc <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a6:	3302      	adds	r3, #2
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ba:	7b1a      	ldrb	r2, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c6:	7b5a      	ldrb	r2, [r3, #13]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	709a      	strb	r2, [r3, #2]
    break;
 80071cc:	bf00      	nop
  }

  return error;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	460b      	mov	r3, r1
 80071e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80071e8:	2302      	movs	r3, #2
 80071ea:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d002      	beq.n	8007206 <USBH_MSC_SCSI_Write+0x2e>
 8007200:	2b02      	cmp	r3, #2
 8007202:	d047      	beq.n	8007294 <USBH_MSC_SCSI_Write+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 8007204:	e04e      	b.n	80072a4 <USBH_MSC_SCSI_Write+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800720c:	461a      	mov	r2, r3
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	fb03 f202 	mul.w	r2, r3, r2
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	220a      	movs	r2, #10
 8007224:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	3363      	adds	r3, #99	; 0x63
 800722c:	2210      	movs	r2, #16
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f00b fc92 	bl	8012b5a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	222a      	movs	r2, #42	; 0x2a
 800723a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 800723e:	79fa      	ldrb	r2, [r7, #7]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8007246:	79ba      	ldrb	r2, [r7, #6]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 800724e:	797a      	ldrb	r2, [r7, #5]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007260:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800726a:	f107 0320 	add.w	r3, r7, #32
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2202      	movs	r2, #2
 8007282:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800728e:	2301      	movs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
    break;
 8007292:	e007      	b.n	80072a4 <USBH_MSC_SCSI_Write+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff faf3 	bl	8006884 <USBH_MSC_BOT_Process>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
    break;
 80072a2:	bf00      	nop
  }

  return error;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b086      	sub	sp, #24
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	460b      	mov	r3, r1
 80072bc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80072be:	2302      	movs	r3, #2
 80072c0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d002      	beq.n	80072dc <USBH_MSC_SCSI_Read+0x2e>
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d047      	beq.n	800736a <USBH_MSC_SCSI_Read+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 80072da:	e04e      	b.n	800737a <USBH_MSC_SCSI_Read+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80072e2:	461a      	mov	r2, r3
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	fb03 f202 	mul.w	r2, r3, r2
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2280      	movs	r2, #128	; 0x80
 80072f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	220a      	movs	r2, #10
 80072fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	3363      	adds	r3, #99	; 0x63
 8007302:	2210      	movs	r2, #16
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f00b fc27 	bl	8012b5a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2228      	movs	r2, #40	; 0x28
 8007310:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8007314:	79fa      	ldrb	r2, [r7, #7]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 800731c:	79ba      	ldrb	r2, [r7, #6]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8007324:	797a      	ldrb	r2, [r7, #5]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	781a      	ldrb	r2, [r3, #0]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007336:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007340:	f107 0320 	add.w	r3, r7, #32
 8007344:	781a      	ldrb	r2, [r3, #0]
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
    break;
 8007368:	e007      	b.n	800737a <USBH_MSC_SCSI_Read+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	4619      	mov	r1, r3
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff fa88 	bl	8006884 <USBH_MSC_BOT_Process>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]
    break;
 8007378:	bf00      	nop
  }

  return error;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007398:	2302      	movs	r3, #2
 800739a:	e035      	b.n	8007408 <USBH_Init+0x84>
  }

  /* Set DRiver ID */
  phost->id = id;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	79fa      	ldrb	r2, [r7, #7]
 80073a0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f831 	bl	800741c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew (MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80073c8:	2200      	movs	r2, #0
 80073ca:	2104      	movs	r1, #4
 80073cc:	2010      	movs	r0, #16
 80073ce:	f004 fcd1 	bl	800bd74 <osMessageQueueNew>
 80073d2:	4602      	mov	r2, r0
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80073da:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <USBH_Init+0x8c>)
 80073dc:	4a0d      	ldr	r2, [pc, #52]	; (8007414 <USBH_Init+0x90>)
 80073de:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <USBH_Init+0x8c>)
 80073e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073e6:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80073e8:	4b09      	ldr	r3, [pc, #36]	; (8007410 <USBH_Init+0x8c>)
 80073ea:	2218      	movs	r2, #24
 80073ec:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80073ee:	4a08      	ldr	r2, [pc, #32]	; (8007410 <USBH_Init+0x8c>)
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	4809      	ldr	r0, [pc, #36]	; (8007418 <USBH_Init+0x94>)
 80073f4:	f004 fa80 	bl	800b8f8 <osThreadNew>
 80073f8:	4602      	mov	r2, r0
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f008 ff7b 	bl	80102fc <USBH_LL_Init>

  return USBH_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	2000b198 	.word	0x2000b198
 8007414:	08013628 	.word	0x08013628
 8007418:	08007df3 	.word	0x08007df3

0800741c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007428:	e008      	b.n	800743c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	32e0      	adds	r2, #224	; 0xe0
 8007430:	2100      	movs	r1, #0
 8007432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b0e      	cmp	r3, #14
 8007440:	d9f3      	bls.n	800742a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e009      	b.n	800745c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007462:	d3f1      	bcc.n	8007448 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2240      	movs	r2, #64	; 0x40
 8007488:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d017      	beq.n	80074f2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10f      	bne.n	80074ec <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d2:	1c59      	adds	r1, r3, #1
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	33dc      	adds	r3, #220	; 0xdc
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
 80074ea:	e004      	b.n	80074f6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074ec:	2302      	movs	r3, #2
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	e001      	b.n	80074f6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074f2:	2302      	movs	r3, #2
 80074f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	429a      	cmp	r2, r3
 800751e:	d204      	bcs.n	800752a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007528:	e001      	b.n	800752e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	4608      	mov	r0, r1
 8007546:	4611      	mov	r1, r2
 8007548:	461a      	mov	r2, r3
 800754a:	4603      	mov	r3, r0
 800754c:	70fb      	strb	r3, [r7, #3]
 800754e:	460b      	mov	r3, r1
 8007550:	70bb      	strb	r3, [r7, #2]
 8007552:	4613      	mov	r3, r2
 8007554:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800755a:	2300      	movs	r3, #0
 800755c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007564:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007566:	e025      	b.n	80075b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	221a      	movs	r2, #26
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	3308      	adds	r3, #8
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	3302      	adds	r3, #2
 8007578:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	795b      	ldrb	r3, [r3, #5]
 800757e:	78fa      	ldrb	r2, [r7, #3]
 8007580:	429a      	cmp	r2, r3
 8007582:	d002      	beq.n	800758a <USBH_FindInterface+0x4e>
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d111      	bne.n	80075ae <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800758e:	78ba      	ldrb	r2, [r7, #2]
 8007590:	429a      	cmp	r2, r3
 8007592:	d002      	beq.n	800759a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007594:	78bb      	ldrb	r3, [r7, #2]
 8007596:	2bff      	cmp	r3, #255	; 0xff
 8007598:	d109      	bne.n	80075ae <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800759e:	787a      	ldrb	r2, [r7, #1]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d002      	beq.n	80075aa <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075a4:	787b      	ldrb	r3, [r7, #1]
 80075a6:	2bff      	cmp	r3, #255	; 0xff
 80075a8:	d101      	bne.n	80075ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	e006      	b.n	80075bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	3301      	adds	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d9d6      	bls.n	8007568 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80075ba:	23ff      	movs	r3, #255	; 0xff
}
 80075bc:	4618      	mov	r0, r3
 80075be:	371c      	adds	r7, #28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f008 fecf 	bl	8010374 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80075d6:	2101      	movs	r1, #1
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f008 ffe6 	bl	80105aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075f0:	2302      	movs	r3, #2
 80075f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fb7e 	bl	8007cfa <USBH_IsPortEnabled>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10c      	bne.n	800761e <USBH_Process+0x36>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b03      	cmp	r3, #3
 8007616:	d002      	beq.n	800761e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2203      	movs	r2, #3
 800761c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b0b      	cmp	r3, #11
 8007626:	f200 81ab 	bhi.w	8007980 <USBH_Process+0x398>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <USBH_Process+0x48>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007661 	.word	0x08007661
 8007634:	0800769f 	.word	0x0800769f
 8007638:	080076b3 	.word	0x080076b3
 800763c:	0800795b 	.word	0x0800795b
 8007640:	08007981 	.word	0x08007981
 8007644:	0800775d 	.word	0x0800775d
 8007648:	080078f5 	.word	0x080078f5
 800764c:	0800778d 	.word	0x0800778d
 8007650:	080077c9 	.word	0x080077c9
 8007654:	08007803 	.word	0x08007803
 8007658:	0800784b 	.word	0x0800784b
 800765c:	08007943 	.word	0x08007943
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 818b 	beq.w	8007984 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007674:	20c8      	movs	r0, #200	; 0xc8
 8007676:	f009 f815 	bl	80106a4 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f008 fed5 	bl	801042a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007694:	2300      	movs	r3, #0
 8007696:	2200      	movs	r2, #0
 8007698:	f004 fbf2 	bl	800be80 <osMessageQueuePut>
#endif
#endif
    }
    break;
 800769c:	e172      	b.n	8007984 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	f040 816f 	bne.w	8007988 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	701a      	strb	r2, [r3, #0]
    }
    break;
 80076b0:	e16a      	b.n	8007988 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80076b2:	2064      	movs	r0, #100	; 0x64
 80076b4:	f008 fff6 	bl	80106a4 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f008 fe91 	bl	80103e0 <USBH_LL_GetSpeed>
 80076be:	4603      	mov	r3, r0
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2205      	movs	r2, #5
 80076cc:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80076ce:	2100      	movs	r1, #0
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fa18 	bl	8008b06 <USBH_AllocPipe>
 80076d6:	4603      	mov	r3, r0
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fa10 	bl	8008b06 <USBH_AllocPipe>
 80076e6:	4603      	mov	r3, r0
 80076e8:	461a      	mov	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7919      	ldrb	r1, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007702:	b292      	uxth	r2, r2
 8007704:	9202      	str	r2, [sp, #8]
 8007706:	2200      	movs	r2, #0
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4603      	mov	r3, r0
 800770e:	2280      	movs	r2, #128	; 0x80
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 f9c9 	bl	8008aa8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7959      	ldrb	r1, [r3, #5]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800772a:	b292      	uxth	r2, r2
 800772c:	9202      	str	r2, [sp, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	9201      	str	r2, [sp, #4]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	4603      	mov	r3, r0
 8007736:	2200      	movs	r2, #0
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f9b5 	bl	8008aa8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	f004 fb93 	bl	800be80 <osMessageQueuePut>
#endif
#endif
    break;
 800775a:	e120      	b.n	800799e <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f923 	bl	80079a8 <USBH_HandleEnum>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	f040 8111 	bne.w	800798c <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007778:	2b01      	cmp	r3, #1
 800777a:	d103      	bne.n	8007784 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2208      	movs	r2, #8
 8007780:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007782:	e103      	b.n	800798c <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2207      	movs	r2, #7
 8007788:	701a      	strb	r2, [r3, #0]
    break;
 800778a:	e0ff      	b.n	800798c <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80fc 	beq.w	8007990 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800779e:	2101      	movs	r1, #1
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2208      	movs	r2, #8
 80077a8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2205      	movs	r2, #5
 80077ae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80077be:	2300      	movs	r3, #0
 80077c0:	2200      	movs	r2, #0
 80077c2:	f004 fb5d 	bl	800be80 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80077c6:	e0e3      	b.n	8007990 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fc0b 	bl	8007fee <USBH_SetCfg>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2209      	movs	r2, #9
 80077e2:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80077f8:	2300      	movs	r3, #0
 80077fa:	2200      	movs	r2, #0
 80077fc:	f004 fb40 	bl	800be80 <osMessageQueuePut>
#endif
#endif
    break;
 8007800:	e0cd      	b.n	800799e <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007810:	2101      	movs	r1, #1
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc0e 	bl	8008034 <USBH_SetFeature>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	220a      	movs	r2, #10
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	e002      	b.n	800782c <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	220a      	movs	r2, #10
 800782a:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007840:	2300      	movs	r3, #0
 8007842:	2200      	movs	r2, #0
 8007844:	f004 fb1c 	bl	800be80 <osMessageQueuePut>
#endif
#endif
    break;
 8007848:	e0a9      	b.n	800799e <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d040      	beq.n	80078d6 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	e017      	b.n	8007892 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	33dc      	adds	r3, #220	; 0xdc
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	791a      	ldrb	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007876:	429a      	cmp	r2, r3
 8007878:	d108      	bne.n	800788c <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	33dc      	adds	r3, #220	; 0xdc
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	3301      	adds	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0e4      	beq.n	8007862 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d016      	beq.n	80078d0 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2206      	movs	r2, #6
 80078b8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078c0:	2103      	movs	r1, #3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
 80078c6:	e006      	b.n	80078d6 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	220d      	movs	r2, #13
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	220d      	movs	r2, #13
 80078d4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2205      	movs	r2, #5
 80078da:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80078ea:	2300      	movs	r3, #0
 80078ec:	2200      	movs	r2, #0
 80078ee:	f004 fac7 	bl	800be80 <osMessageQueuePut>
#endif
#endif
    break;
 80078f2:	e054      	b.n	800799e <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d13e      	bne.n	8007994 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	220b      	movs	r2, #11
 800791a:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800791c:	e03a      	b.n	8007994 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	220d      	movs	r2, #13
 8007922:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2205      	movs	r2, #5
 8007928:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007938:	2300      	movs	r3, #0
 800793a:	2200      	movs	r2, #0
 800793c:	f004 faa0 	bl	800be80 <osMessageQueuePut>
    break;
 8007940:	e028      	b.n	8007994 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007948:	2b00      	cmp	r3, #0
 800794a:	d025      	beq.n	8007998 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
    }
    break;
 8007958:	e01e      	b.n	8007998 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fd5e 	bl	800741c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007966:	2b00      	cmp	r3, #0
 8007968:	d018      	beq.n	800799c <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800797e:	e00d      	b.n	800799c <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8007980:	bf00      	nop
 8007982:	e00c      	b.n	800799e <USBH_Process+0x3b6>
    break;
 8007984:	bf00      	nop
 8007986:	e00a      	b.n	800799e <USBH_Process+0x3b6>
    break;
 8007988:	bf00      	nop
 800798a:	e008      	b.n	800799e <USBH_Process+0x3b6>
    break;
 800798c:	bf00      	nop
 800798e:	e006      	b.n	800799e <USBH_Process+0x3b6>
    break;
 8007990:	bf00      	nop
 8007992:	e004      	b.n	800799e <USBH_Process+0x3b6>
    break;
 8007994:	bf00      	nop
 8007996:	e002      	b.n	800799e <USBH_Process+0x3b6>
    break;
 8007998:	bf00      	nop
 800799a:	e000      	b.n	800799e <USBH_Process+0x3b6>
    break;
 800799c:	bf00      	nop
  }
 return USBH_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	2b07      	cmp	r3, #7
 80079ba:	f200 8132 	bhi.w	8007c22 <USBH_HandleEnum+0x27a>
 80079be:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <USBH_HandleEnum+0x1c>)
 80079c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c4:	080079e5 	.word	0x080079e5
 80079c8:	08007a57 	.word	0x08007a57
 80079cc:	08007a6f 	.word	0x08007a6f
 80079d0:	08007ae5 	.word	0x08007ae5
 80079d4:	08007afd 	.word	0x08007afd
 80079d8:	08007b1b 	.word	0x08007b1b
 80079dc:	08007b87 	.word	0x08007b87
 80079e0:	08007bd7 	.word	0x08007bd7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80079e4:	2108      	movs	r1, #8
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa31 	bl	8007e4e <USBH_Get_DevDesc>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f040 8119 	bne.w	8007c26 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7919      	ldrb	r1, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007a18:	b292      	uxth	r2, r2
 8007a1a:	9202      	str	r2, [sp, #8]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	9201      	str	r2, [sp, #4]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	4603      	mov	r3, r0
 8007a24:	2280      	movs	r2, #128	; 0x80
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 f83e 	bl	8008aa8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7959      	ldrb	r1, [r3, #5]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007a40:	b292      	uxth	r2, r2
 8007a42:	9202      	str	r2, [sp, #8]
 8007a44:	2200      	movs	r2, #0
 8007a46:	9201      	str	r2, [sp, #4]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f82a 	bl	8008aa8 <USBH_OpenPipe>

    }
    break;
 8007a54:	e0e7      	b.n	8007c26 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007a56:	2112      	movs	r1, #18
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f9f8 	bl	8007e4e <USBH_Get_DevDesc>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 80e2 	bne.w	8007c2a <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007a6c:	e0dd      	b.n	8007c2a <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007a6e:	2101      	movs	r1, #1
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fa98 	bl	8007fa6 <USBH_SetAddress>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 80d8 	bne.w	8007c2e <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8007a7e:	2002      	movs	r0, #2
 8007a80:	f008 fe10 	bl	80106a4 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7919      	ldrb	r1, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007aa6:	b292      	uxth	r2, r2
 8007aa8:	9202      	str	r2, [sp, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	9201      	str	r2, [sp, #4]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fff7 	bl	8008aa8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7959      	ldrb	r1, [r3, #5]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	9202      	str	r2, [sp, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2200      	movs	r2, #0
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 ffe3 	bl	8008aa8 <USBH_OpenPipe>
    }
    break;
 8007ae2:	e0a4      	b.n	8007c2e <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007ae4:	2109      	movs	r1, #9
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9d9 	bl	8007e9e <USBH_Get_CfgDesc>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f040 809f 	bne.w	8007c32 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2204      	movs	r2, #4
 8007af8:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007afa:	e09a      	b.n	8007c32 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f9ca 	bl	8007e9e <USBH_Get_CfgDesc>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f040 8092 	bne.w	8007c36 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2205      	movs	r2, #5
 8007b16:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007b18:	e08d      	b.n	8007c36 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01e      	beq.n	8007b62 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007b30:	23ff      	movs	r3, #255	; 0xff
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9d7 	bl	8007ee6 <USBH_Get_StringDesc>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d17d      	bne.n	8007c3a <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2206      	movs	r2, #6
 8007b42:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2205      	movs	r2, #5
 8007b48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f004 f990 	bl	800be80 <osMessageQueuePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007b60:	e06b      	b.n	8007c3a <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2206      	movs	r2, #6
 8007b66:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2205      	movs	r2, #5
 8007b6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f004 f97e 	bl	800be80 <osMessageQueuePut>
    break;
 8007b84:	e059      	b.n	8007c3a <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d010      	beq.n	8007bb2 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007b9c:	23ff      	movs	r3, #255	; 0xff
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9a1 	bl	8007ee6 <USBH_Get_StringDesc>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d149      	bne.n	8007c3e <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2207      	movs	r2, #7
 8007bae:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007bb0:	e045      	b.n	8007c3e <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2205      	movs	r2, #5
 8007bbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f004 f956 	bl	800be80 <osMessageQueuePut>
    break;
 8007bd4:	e033      	b.n	8007c3e <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00f      	beq.n	8007c00 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007bec:	23ff      	movs	r3, #255	; 0xff
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f979 	bl	8007ee6 <USBH_Get_StringDesc>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d123      	bne.n	8007c42 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007bfe:	e020      	b.n	8007c42 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2205      	movs	r2, #5
 8007c08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f004 f930 	bl	800be80 <osMessageQueuePut>
    break;
 8007c20:	e00f      	b.n	8007c42 <USBH_HandleEnum+0x29a>

  default:
    break;
 8007c22:	bf00      	nop
 8007c24:	e00e      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c26:	bf00      	nop
 8007c28:	e00c      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c2a:	bf00      	nop
 8007c2c:	e00a      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c2e:	bf00      	nop
 8007c30:	e008      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c32:	bf00      	nop
 8007c34:	e006      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c36:	bf00      	nop
 8007c38:	e004      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c3a:	bf00      	nop
 8007c3c:	e002      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c3e:	bf00      	nop
 8007c40:	e000      	b.n	8007c44 <USBH_HandleEnum+0x29c>
    break;
 8007c42:	bf00      	nop
  }
  return Status;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop

08007c50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f804 	bl	8007c92 <USBH_HandleSof>
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b0b      	cmp	r3, #11
 8007ca2:	d10a      	bne.n	8007cba <USBH_HandleSof+0x28>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
  }
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007cd2:	bf00      	nop
}
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007cee:	bf00      	nop
}
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10f      	bne.n	8007d46 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d3e:	2104      	movs	r1, #4
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
 8007d44:	e007      	b.n	8007d56 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d102      	bne.n	8007d56 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f004 f887 	bl	800be80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f008 fb10 	bl	80103aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	791b      	ldrb	r3, [r3, #4]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fed6 	bl	8008b42 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	795b      	ldrb	r3, [r3, #5]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fed0 	bl	8008b42 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007dba:	2105      	movs	r1, #5
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f008 fad7 	bl	8010374 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2203      	movs	r2, #3
 8007dca:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007de0:	2300      	movs	r3, #0
 8007de2:	2200      	movs	r2, #0
 8007de4:	f004 f84c 	bl	800be80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for(;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f004 f8ac 	bl	800bf68 <osMessageQueueGet>
 8007e10:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f0      	bne.n	8007dfa <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fbe5 	bl	80075e8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e1e:	e7ec      	b.n	8007dfa <USBH_Process_OS+0x8>

08007e20 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f004 f81e 	bl	800be80 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af02      	add	r7, sp, #8
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4613      	mov	r3, r2
 8007e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f864 	bl	8007f3c <USBH_GetDescriptor>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	b292      	uxth	r2, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f000 f918 	bl	80080c4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af02      	add	r7, sp, #8
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	331c      	adds	r3, #28
 8007eae:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007eb0:	887b      	ldrh	r3, [r7, #2]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f83d 	bl	8007f3c <USBH_GetDescriptor>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	72fb      	strb	r3, [r7, #11]
 8007ec6:	7afb      	ldrb	r3, [r7, #11]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d107      	bne.n	8007edc <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007ed2:	887a      	ldrh	r2, [r7, #2]
 8007ed4:	68f9      	ldr	r1, [r7, #12]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f964 	bl	80081a4 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007edc:	7afb      	ldrb	r3, [r7, #11]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b088      	sub	sp, #32
 8007eea:	af02      	add	r7, sp, #8
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	72fb      	strb	r3, [r7, #11]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f02:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007f0a:	893b      	ldrh	r3, [r7, #8]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	2100      	movs	r1, #0
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f812 	bl	8007f3c <USBH_GetDescriptor>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75fb      	strb	r3, [r7, #23]
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d107      	bne.n	8007f32 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f28:	893a      	ldrh	r2, [r7, #8]
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 fa37 	bl	80083a0 <USBH_ParseStringDesc>
  }
  return status;
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	72fb      	strb	r3, [r7, #11]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	789b      	ldrb	r3, [r3, #2]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d11c      	bne.n	8007f90 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2206      	movs	r2, #6
 8007f66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	893a      	ldrh	r2, [r7, #8]
 8007f6c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f6e:	893b      	ldrh	r3, [r7, #8]
 8007f70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f78:	d104      	bne.n	8007f84 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f240 4209 	movw	r2, #1033	; 0x409
 8007f80:	829a      	strh	r2, [r3, #20]
 8007f82:	e002      	b.n	8007f8a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8b3a      	ldrh	r2, [r7, #24]
 8007f8e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007f90:	8b3b      	ldrh	r3, [r7, #24]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 fa50 	bl	800843c <USBH_CtlReq>
 8007f9c:	4603      	mov	r3, r0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	789b      	ldrb	r3, [r3, #2]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d10f      	bne.n	8007fda <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2205      	movs	r2, #5
 8007fc4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa2c 	bl	800843c <USBH_CtlReq>
 8007fe4:	4603      	mov	r3, r0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	789b      	ldrb	r3, [r3, #2]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d10e      	bne.n	8008020 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2209      	movs	r2, #9
 800800c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	887a      	ldrh	r2, [r7, #2]
 8008012:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fa09 	bl	800843c <USBH_CtlReq>
 800802a:	4603      	mov	r3, r0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	789b      	ldrb	r3, [r3, #2]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d10f      	bne.n	8008068 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2203      	movs	r2, #3
 8008052:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008068:	2200      	movs	r2, #0
 800806a:	2100      	movs	r1, #0
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f9e5 	bl	800843c <USBH_CtlReq>
 8008072:	4603      	mov	r3, r0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	789b      	ldrb	r3, [r3, #2]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10f      	bne.n	80080b0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80080b0:	2200      	movs	r2, #0
 80080b2:	2100      	movs	r1, #0
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9c1 	bl	800843c <USBH_CtlReq>
 80080ba:	4603      	mov	r3, r0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	785a      	ldrb	r2, [r3, #1]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	3302      	adds	r3, #2
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	3303      	adds	r3, #3
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	791a      	ldrb	r2, [r3, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	795a      	ldrb	r2, [r3, #5]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	799a      	ldrb	r2, [r3, #6]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	79da      	ldrb	r2, [r3, #7]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	2b08      	cmp	r3, #8
 8008122:	d939      	bls.n	8008198 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3308      	adds	r3, #8
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29a      	uxth	r2, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3309      	adds	r3, #9
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	021b      	lsls	r3, r3, #8
 8008136:	b29b      	uxth	r3, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	330a      	adds	r3, #10
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	330b      	adds	r3, #11
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	b29b      	uxth	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	330c      	adds	r3, #12
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b29a      	uxth	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	330d      	adds	r3, #13
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	021b      	lsls	r3, r3, #8
 800816e:	b29b      	uxth	r3, r3
 8008170:	4313      	orrs	r3, r2
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	7b9a      	ldrb	r2, [r3, #14]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	7bda      	ldrb	r2, [r3, #15]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	7c1a      	ldrb	r2, [r3, #16]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	7c5a      	ldrb	r2, [r3, #17]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	745a      	strb	r2, [r3, #17]
  }
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	; 0x28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	4613      	mov	r3, r2
 80081b0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	781a      	ldrb	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	785a      	ldrb	r2, [r3, #1]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3302      	adds	r3, #2
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	3303      	adds	r3, #3
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	791a      	ldrb	r2, [r3, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	795a      	ldrb	r2, [r3, #5]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	799a      	ldrb	r2, [r3, #6]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	79da      	ldrb	r2, [r3, #7]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	7a1a      	ldrb	r2, [r3, #8]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	2b09      	cmp	r3, #9
 800821e:	d95f      	bls.n	80082e0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008220:	2309      	movs	r3, #9
 8008222:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008228:	e051      	b.n	80082ce <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800822a:	f107 0316 	add.w	r3, r7, #22
 800822e:	4619      	mov	r1, r3
 8008230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008232:	f000 f8e8 	bl	8008406 <USBH_GetNextDesc>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d146      	bne.n	80082ce <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008244:	221a      	movs	r2, #26
 8008246:	fb02 f303 	mul.w	r3, r2, r3
 800824a:	3308      	adds	r3, #8
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	3302      	adds	r3, #2
 8008252:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8008254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008256:	69f8      	ldr	r0, [r7, #28]
 8008258:	f000 f846 	bl	80082e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008262:	2300      	movs	r3, #0
 8008264:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008266:	e022      	b.n	80082ae <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8008268:	f107 0316 	add.w	r3, r7, #22
 800826c:	4619      	mov	r1, r3
 800826e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008270:	f000 f8c9 	bl	8008406 <USBH_GetNextDesc>
 8008274:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b05      	cmp	r3, #5
 800827c:	d117      	bne.n	80082ae <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800827e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008282:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008286:	3201      	adds	r2, #1
 8008288:	00d2      	lsls	r2, r2, #3
 800828a:	211a      	movs	r1, #26
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	4413      	add	r3, r2
 8008292:	3308      	adds	r3, #8
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	3304      	adds	r3, #4
 800829a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800829c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800829e:	69b8      	ldr	r0, [r7, #24]
 80082a0:	f000 f851 	bl	8008346 <USBH_ParseEPDesc>
            ep_ix++;
 80082a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80082a8:	3301      	adds	r3, #1
 80082aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d204      	bcs.n	80082c4 <USBH_ParseCfgDesc+0x120>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	885a      	ldrh	r2, [r3, #2]
 80082be:	8afb      	ldrh	r3, [r7, #22]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d8d1      	bhi.n	8008268 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80082c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082c8:	3301      	adds	r3, #1
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d804      	bhi.n	80082e0 <USBH_ParseCfgDesc+0x13c>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	885a      	ldrh	r2, [r3, #2]
 80082da:	8afb      	ldrh	r3, [r7, #22]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d8a4      	bhi.n	800822a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80082e0:	bf00      	nop
 80082e2:	3728      	adds	r7, #40	; 0x28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	785a      	ldrb	r2, [r3, #1]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	789a      	ldrb	r2, [r3, #2]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	78da      	ldrb	r2, [r3, #3]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	791a      	ldrb	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	795a      	ldrb	r2, [r3, #5]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	799a      	ldrb	r2, [r3, #6]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	79da      	ldrb	r2, [r3, #7]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	7a1a      	ldrb	r2, [r3, #8]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	721a      	strb	r2, [r3, #8]
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	785a      	ldrb	r2, [r3, #1]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	789a      	ldrb	r2, [r3, #2]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	78da      	ldrb	r2, [r3, #3]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	3304      	adds	r3, #4
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	b29a      	uxth	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	3305      	adds	r3, #5
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	b29b      	uxth	r3, r3
 8008384:	4313      	orrs	r3, r2
 8008386:	b29a      	uxth	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	799a      	ldrb	r2, [r3, #6]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	719a      	strb	r2, [r3, #6]
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d120      	bne.n	80083fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	1e9a      	subs	r2, r3, #2
 80083be:	88fb      	ldrh	r3, [r7, #6]
 80083c0:	4293      	cmp	r3, r2
 80083c2:	bf28      	it	cs
 80083c4:	4613      	movcs	r3, r2
 80083c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3302      	adds	r3, #2
 80083cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083ce:	2300      	movs	r3, #0
 80083d0:	82fb      	strh	r3, [r7, #22]
 80083d2:	e00b      	b.n	80083ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083d4:	8afb      	ldrh	r3, [r7, #22]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80083e6:	8afb      	ldrh	r3, [r7, #22]
 80083e8:	3302      	adds	r3, #2
 80083ea:	82fb      	strh	r3, [r7, #22]
 80083ec:	8afa      	ldrh	r2, [r7, #22]
 80083ee:	8abb      	ldrh	r3, [r7, #20]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d3ef      	bcc.n	80083d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]
  }
}
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	881a      	ldrh	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	4413      	add	r3, r2
 800841c:	b29a      	uxth	r2, r3
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4413      	add	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800842e:	68fb      	ldr	r3, [r7, #12]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800844a:	2301      	movs	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	789b      	ldrb	r3, [r3, #2]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d002      	beq.n	800845c <USBH_CtlReq+0x20>
 8008456:	2b02      	cmp	r3, #2
 8008458:	d01d      	beq.n	8008496 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800845a:	e042      	b.n	80084e2 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	88fa      	ldrh	r2, [r7, #6]
 8008466:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2202      	movs	r2, #2
 8008472:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008474:	2301      	movs	r3, #1
 8008476:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2203      	movs	r2, #3
 800847c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800848c:	2300      	movs	r3, #0
 800848e:	2200      	movs	r2, #0
 8008490:	f003 fcf6 	bl	800be80 <osMessageQueuePut>
    break;
 8008494:	e025      	b.n	80084e2 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f828 	bl	80084ec <USBH_HandleControl>
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d108      	bne.n	80084b8 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	75fb      	strb	r3, [r7, #23]
    break;
 80084b6:	e013      	b.n	80084e0 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d108      	bne.n	80084d0 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80084ca:	2303      	movs	r3, #3
 80084cc:	75fb      	strb	r3, [r7, #23]
    break;
 80084ce:	e007      	b.n	80084e0 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d104      	bne.n	80084e0 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80084dc:	2302      	movs	r3, #2
 80084de:	75fb      	strb	r3, [r7, #23]
    break;
 80084e0:	bf00      	nop
  }
  return status;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7e1b      	ldrb	r3, [r3, #24]
 8008500:	3b01      	subs	r3, #1
 8008502:	2b0a      	cmp	r3, #10
 8008504:	f200 821f 	bhi.w	8008946 <USBH_HandleControl+0x45a>
 8008508:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <USBH_HandleControl+0x24>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	0800853d 	.word	0x0800853d
 8008514:	08008557 	.word	0x08008557
 8008518:	080085f9 	.word	0x080085f9
 800851c:	0800861f 	.word	0x0800861f
 8008520:	080086ab 	.word	0x080086ab
 8008524:	080086d7 	.word	0x080086d7
 8008528:	08008799 	.word	0x08008799
 800852c:	080087bb 	.word	0x080087bb
 8008530:	0800884d 	.word	0x0800884d
 8008534:	08008875 	.word	0x08008875
 8008538:	08008907 	.word	0x08008907
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f103 0110 	add.w	r1, r3, #16
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	795b      	ldrb	r3, [r3, #5]
 8008546:	461a      	mov	r2, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fa0d 	bl	8008968 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	761a      	strb	r2, [r3, #24]
    break;
 8008554:	e202      	b.n	800895c <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	795b      	ldrb	r3, [r3, #5]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f008 f811 	bl	8010584 <USBH_LL_GetURBState>
 8008562:	4603      	mov	r3, r0
 8008564:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d12c      	bne.n	80085c6 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7c1b      	ldrb	r3, [r3, #16]
 8008570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008574:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	8adb      	ldrh	r3, [r3, #22]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800857e:	7b7b      	ldrb	r3, [r7, #13]
 8008580:	2b80      	cmp	r3, #128	; 0x80
 8008582:	d103      	bne.n	800858c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2203      	movs	r2, #3
 8008588:	761a      	strb	r2, [r3, #24]
 800858a:	e00d      	b.n	80085a8 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2205      	movs	r2, #5
 8008590:	761a      	strb	r2, [r3, #24]
 8008592:	e009      	b.n	80085a8 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8008594:	7b7b      	ldrb	r3, [r7, #13]
 8008596:	2b80      	cmp	r3, #128	; 0x80
 8008598:	d103      	bne.n	80085a2 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2209      	movs	r2, #9
 800859e:	761a      	strb	r2, [r3, #24]
 80085a0:	e002      	b.n	80085a8 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2207      	movs	r2, #7
 80085a6:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2203      	movs	r2, #3
 80085ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80085bc:	2300      	movs	r3, #0
 80085be:	2200      	movs	r2, #0
 80085c0:	f003 fc5e 	bl	800be80 <osMessageQueuePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80085c4:	e1c1      	b.n	800894a <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d003      	beq.n	80085d4 <USBH_HandleControl+0xe8>
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	f040 81bb 	bne.w	800894a <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220b      	movs	r2, #11
 80085d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2203      	movs	r2, #3
 80085de:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80085ee:	2300      	movs	r3, #0
 80085f0:	2200      	movs	r2, #0
 80085f2:	f003 fc45 	bl	800be80 <osMessageQueuePut>
    break;
 80085f6:	e1a8      	b.n	800894a <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6899      	ldr	r1, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	899a      	ldrh	r2, [r3, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	791b      	ldrb	r3, [r3, #4]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f9e8 	bl	80089e6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2204      	movs	r2, #4
 800861a:	761a      	strb	r2, [r3, #24]
    break;
 800861c:	e19e      	b.n	800895c <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	791b      	ldrb	r3, [r3, #4]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f007 ffad 	bl	8010584 <USBH_LL_GetURBState>
 800862a:	4603      	mov	r3, r0
 800862c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d110      	bne.n	8008656 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2209      	movs	r2, #9
 8008638:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2203      	movs	r2, #3
 800863e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800864e:	2300      	movs	r3, #0
 8008650:	2200      	movs	r2, #0
 8008652:	f003 fc15 	bl	800be80 <osMessageQueuePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b05      	cmp	r3, #5
 800865a:	d110      	bne.n	800867e <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800865c:	2303      	movs	r3, #3
 800865e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2203      	movs	r2, #3
 8008664:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8008674:	2300      	movs	r3, #0
 8008676:	2200      	movs	r2, #0
 8008678:	f003 fc02 	bl	800be80 <osMessageQueuePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800867c:	e167      	b.n	800894e <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b04      	cmp	r3, #4
 8008682:	f040 8164 	bne.w	800894e <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	220b      	movs	r2, #11
 800868a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2203      	movs	r2, #3
 8008690:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80086a0:	2300      	movs	r3, #0
 80086a2:	2200      	movs	r2, #0
 80086a4:	f003 fbec 	bl	800be80 <osMessageQueuePut>
    break;
 80086a8:	e151      	b.n	800894e <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6899      	ldr	r1, [r3, #8]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	899a      	ldrh	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	7958      	ldrb	r0, [r3, #5]
 80086b6:	2301      	movs	r3, #1
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	4603      	mov	r3, r0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f96d 	bl	800899c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2206      	movs	r2, #6
 80086d2:	761a      	strb	r2, [r3, #24]
    break;
 80086d4:	e142      	b.n	800895c <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	795b      	ldrb	r3, [r3, #5]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f007 ff51 	bl	8010584 <USBH_LL_GetURBState>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d111      	bne.n	8008710 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2207      	movs	r2, #7
 80086f0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2203      	movs	r2, #3
 80086f6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8008706:	2300      	movs	r3, #0
 8008708:	2200      	movs	r2, #0
 800870a:	f003 fbb9 	bl	800be80 <osMessageQueuePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800870e:	e120      	b.n	8008952 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b05      	cmp	r3, #5
 8008714:	d113      	bne.n	800873e <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	220c      	movs	r2, #12
 800871a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800871c:	2303      	movs	r3, #3
 800871e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2203      	movs	r2, #3
 8008724:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8008734:	2300      	movs	r3, #0
 8008736:	2200      	movs	r2, #0
 8008738:	f003 fba2 	bl	800be80 <osMessageQueuePut>
    break;
 800873c:	e109      	b.n	8008952 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d111      	bne.n	8008768 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2205      	movs	r2, #5
 8008748:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2203      	movs	r2, #3
 800874e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800875e:	2300      	movs	r3, #0
 8008760:	2200      	movs	r2, #0
 8008762:	f003 fb8d 	bl	800be80 <osMessageQueuePut>
    break;
 8008766:	e0f4      	b.n	8008952 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b04      	cmp	r3, #4
 800876c:	f040 80f1 	bne.w	8008952 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	220b      	movs	r2, #11
 8008774:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8008776:	2302      	movs	r3, #2
 8008778:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2203      	movs	r2, #3
 800877e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800878e:	2300      	movs	r3, #0
 8008790:	2200      	movs	r2, #0
 8008792:	f003 fb75 	bl	800be80 <osMessageQueuePut>
    break;
 8008796:	e0dc      	b.n	8008952 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	791b      	ldrb	r3, [r3, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	2100      	movs	r1, #0
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f920 	bl	80089e6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2208      	movs	r2, #8
 80087b6:	761a      	strb	r2, [r3, #24]

    break;
 80087b8:	e0d0      	b.n	800895c <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f007 fedf 	bl	8010584 <USBH_LL_GetURBState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d113      	bne.n	80087f8 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	220d      	movs	r2, #13
 80087d4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2203      	movs	r2, #3
 80087de:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80087ee:	2300      	movs	r3, #0
 80087f0:	2200      	movs	r2, #0
 80087f2:	f003 fb45 	bl	800be80 <osMessageQueuePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80087f6:	e0ae      	b.n	8008956 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d111      	bne.n	8008822 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	220b      	movs	r2, #11
 8008802:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2203      	movs	r2, #3
 8008808:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8008818:	2300      	movs	r3, #0
 800881a:	2200      	movs	r2, #0
 800881c:	f003 fb30 	bl	800be80 <osMessageQueuePut>
    break;
 8008820:	e099      	b.n	8008956 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b05      	cmp	r3, #5
 8008826:	f040 8096 	bne.w	8008956 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800882a:	2303      	movs	r3, #3
 800882c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2203      	movs	r2, #3
 8008832:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 8008842:	2300      	movs	r3, #0
 8008844:	2200      	movs	r2, #0
 8008846:	f003 fb1b 	bl	800be80 <osMessageQueuePut>
    break;
 800884a:	e084      	b.n	8008956 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	795a      	ldrb	r2, [r3, #5]
 8008850:	2301      	movs	r3, #1
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f89e 	bl	800899c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	220a      	movs	r2, #10
 8008870:	761a      	strb	r2, [r3, #24]
    break;
 8008872:	e073      	b.n	800895c <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	795b      	ldrb	r3, [r3, #5]
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f007 fe82 	bl	8010584 <USBH_LL_GetURBState>
 8008880:	4603      	mov	r3, r0
 8008882:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d113      	bne.n	80088b2 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	220d      	movs	r2, #13
 8008892:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2203      	movs	r2, #3
 8008898:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80088a8:	2300      	movs	r3, #0
 80088aa:	2200      	movs	r2, #0
 80088ac:	f003 fae8 	bl	800be80 <osMessageQueuePut>
#endif
#endif
      }

    }
    break;
 80088b0:	e053      	b.n	800895a <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d111      	bne.n	80088dc <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2209      	movs	r2, #9
 80088bc:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2203      	movs	r2, #3
 80088c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	f003 fad3 	bl	800be80 <osMessageQueuePut>
    break;
 80088da:	e03e      	b.n	800895a <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b04      	cmp	r3, #4
 80088e0:	d13b      	bne.n	800895a <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	220b      	movs	r2, #11
 80088e6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2203      	movs	r2, #3
 80088ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80088fc:	2300      	movs	r3, #0
 80088fe:	2200      	movs	r2, #0
 8008900:	f003 fabe 	bl	800be80 <osMessageQueuePut>
    break;
 8008904:	e029      	b.n	800895a <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7e5b      	ldrb	r3, [r3, #25]
 800890a:	3301      	adds	r3, #1
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	765a      	strb	r2, [r3, #25]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	7e5b      	ldrb	r3, [r3, #25]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d809      	bhi.n	800892e <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f007 fd45 	bl	80103aa <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800892c:	e016      	b.n	800895c <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008934:	2106      	movs	r1, #6
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008940:	2302      	movs	r3, #2
 8008942:	73fb      	strb	r3, [r7, #15]
    break;
 8008944:	e00a      	b.n	800895c <USBH_HandleControl+0x470>

  default:
    break;
 8008946:	bf00      	nop
 8008948:	e008      	b.n	800895c <USBH_HandleControl+0x470>
    break;
 800894a:	bf00      	nop
 800894c:	e006      	b.n	800895c <USBH_HandleControl+0x470>
    break;
 800894e:	bf00      	nop
 8008950:	e004      	b.n	800895c <USBH_HandleControl+0x470>
    break;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <USBH_HandleControl+0x470>
    break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <USBH_HandleControl+0x470>
    break;
 800895a:	bf00      	nop
  }
  return status;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop

08008968 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af04      	add	r7, sp, #16
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008976:	79f9      	ldrb	r1, [r7, #7]
 8008978:	2300      	movs	r3, #0
 800897a:	9303      	str	r3, [sp, #12]
 800897c:	2308      	movs	r3, #8
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	2300      	movs	r3, #0
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	2300      	movs	r3, #0
 800898a:	2200      	movs	r2, #0
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f007 fdc8 	bl	8010522 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af04      	add	r7, sp, #16
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4611      	mov	r1, r2
 80089a8:	461a      	mov	r2, r3
 80089aa:	460b      	mov	r3, r1
 80089ac:	80fb      	strh	r3, [r7, #6]
 80089ae:	4613      	mov	r3, r2
 80089b0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80089c0:	7979      	ldrb	r1, [r7, #5]
 80089c2:	7e3b      	ldrb	r3, [r7, #24]
 80089c4:	9303      	str	r3, [sp, #12]
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	9302      	str	r3, [sp, #8]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	2301      	movs	r3, #1
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	2200      	movs	r2, #0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f007 fda3 	bl	8010522 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b088      	sub	sp, #32
 80089ea:	af04      	add	r7, sp, #16
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	4611      	mov	r1, r2
 80089f2:	461a      	mov	r2, r3
 80089f4:	460b      	mov	r3, r1
 80089f6:	80fb      	strh	r3, [r7, #6]
 80089f8:	4613      	mov	r3, r2
 80089fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80089fc:	7979      	ldrb	r1, [r7, #5]
 80089fe:	2300      	movs	r3, #0
 8008a00:	9303      	str	r3, [sp, #12]
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	9302      	str	r3, [sp, #8]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2201      	movs	r2, #1
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f007 fd85 	bl	8010522 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a18:	2300      	movs	r3, #0

}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b088      	sub	sp, #32
 8008a26:	af04      	add	r7, sp, #16
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	460b      	mov	r3, r1
 8008a32:	80fb      	strh	r3, [r7, #6]
 8008a34:	4613      	mov	r3, r2
 8008a36:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a46:	7979      	ldrb	r1, [r7, #5]
 8008a48:	7e3b      	ldrb	r3, [r7, #24]
 8008a4a:	9303      	str	r3, [sp, #12]
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	9302      	str	r3, [sp, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	2301      	movs	r3, #1
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	2302      	movs	r3, #2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f007 fd60 	bl	8010522 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af04      	add	r7, sp, #16
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4611      	mov	r1, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	80fb      	strh	r3, [r7, #6]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a82:	7979      	ldrb	r1, [r7, #5]
 8008a84:	2300      	movs	r3, #0
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	88fb      	ldrh	r3, [r7, #6]
 8008a8a:	9302      	str	r3, [sp, #8]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	2301      	movs	r3, #1
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2302      	movs	r3, #2
 8008a96:	2201      	movs	r2, #1
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f007 fd42 	bl	8010522 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af04      	add	r7, sp, #16
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	70fb      	strb	r3, [r7, #3]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70bb      	strb	r3, [r7, #2]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008ac2:	7878      	ldrb	r0, [r7, #1]
 8008ac4:	78ba      	ldrb	r2, [r7, #2]
 8008ac6:	78f9      	ldrb	r1, [r7, #3]
 8008ac8:	8b3b      	ldrh	r3, [r7, #24]
 8008aca:	9302      	str	r3, [sp, #8]
 8008acc:	7d3b      	ldrb	r3, [r7, #20]
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	7c3b      	ldrb	r3, [r7, #16]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f007 fcd5 	bl	8010486 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008adc:	2300      	movs	r3, #0

}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f007 fcf4 	bl	80104e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008afc:	2300      	movs	r3, #0

}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f831 	bl	8008b7a <USBH_GetFreePipe>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b1c:	89fb      	ldrh	r3, [r7, #14]
 8008b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d007      	beq.n	8008b36 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	89fa      	ldrh	r2, [r7, #14]
 8008b2a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	32e0      	adds	r2, #224	; 0xe0
 8008b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008b36:	89fb      	ldrh	r3, [r7, #14]
 8008b38:	b2db      	uxtb	r3, r3
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	2b0a      	cmp	r3, #10
 8008b52:	d80b      	bhi.n	8008b6c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008b54:	78fa      	ldrb	r2, [r7, #3]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	32e0      	adds	r2, #224	; 0xe0
 8008b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	32e0      	adds	r2, #224	; 0xe0
 8008b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008b86:	2300      	movs	r3, #0
 8008b88:	73fb      	strb	r3, [r7, #15]
 8008b8a:	e00e      	b.n	8008baa <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b8c:	7bfa      	ldrb	r2, [r7, #15]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	32e0      	adds	r2, #224	; 0xe0
 8008b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	e007      	b.n	8008bb4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2b0a      	cmp	r3, #10
 8008bae:	d9ed      	bls.n	8008b8c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	4a08      	ldr	r2, [pc, #32]	; (8008bf0 <disk_status+0x30>)
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	79fa      	ldrb	r2, [r7, #7]
 8008bd8:	4905      	ldr	r1, [pc, #20]	; (8008bf0 <disk_status+0x30>)
 8008bda:	440a      	add	r2, r1
 8008bdc:	7a12      	ldrb	r2, [r2, #8]
 8008bde:	4610      	mov	r0, r2
 8008be0:	4798      	blx	r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	200004f0 	.word	0x200004f0

08008bf4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <disk_initialize+0x48>)
 8008c06:	5cd3      	ldrb	r3, [r2, r3]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d111      	bne.n	8008c30 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	4a0b      	ldr	r2, [pc, #44]	; (8008c3c <disk_initialize+0x48>)
 8008c10:	2101      	movs	r1, #1
 8008c12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <disk_initialize+0x48>)
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	79fa      	ldrb	r2, [r7, #7]
 8008c22:	4906      	ldr	r1, [pc, #24]	; (8008c3c <disk_initialize+0x48>)
 8008c24:	440a      	add	r2, r1
 8008c26:	7a12      	ldrb	r2, [r2, #8]
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200004f0 	.word	0x200004f0

08008c40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c40:	b590      	push	{r4, r7, lr}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	4a0a      	ldr	r2, [pc, #40]	; (8008c7c <disk_read+0x3c>)
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	689c      	ldr	r4, [r3, #8]
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	4a07      	ldr	r2, [pc, #28]	; (8008c7c <disk_read+0x3c>)
 8008c60:	4413      	add	r3, r2
 8008c62:	7a18      	ldrb	r0, [r3, #8]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	68b9      	ldr	r1, [r7, #8]
 8008c6a:	47a0      	blx	r4
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd90      	pop	{r4, r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200004f0 	.word	0x200004f0

08008c80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <disk_write+0x3c>)
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	68dc      	ldr	r4, [r3, #12]
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	4a07      	ldr	r2, [pc, #28]	; (8008cbc <disk_write+0x3c>)
 8008ca0:	4413      	add	r3, r2
 8008ca2:	7a18      	ldrb	r0, [r3, #8]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	47a0      	blx	r4
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]
  return res;
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd90      	pop	{r4, r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	200004f0 	.word	0x200004f0

08008cc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	603a      	str	r2, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	4a09      	ldr	r2, [pc, #36]	; (8008cf8 <disk_ioctl+0x38>)
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	79fa      	ldrb	r2, [r7, #7]
 8008cde:	4906      	ldr	r1, [pc, #24]	; (8008cf8 <disk_ioctl+0x38>)
 8008ce0:	440a      	add	r2, r1
 8008ce2:	7a10      	ldrb	r0, [r2, #8]
 8008ce4:	79b9      	ldrb	r1, [r7, #6]
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4798      	blx	r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
  return res;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	200004f0 	.word	0x200004f0

08008cfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3301      	adds	r3, #1
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d0c:	89fb      	ldrh	r3, [r7, #14]
 8008d0e:	021b      	lsls	r3, r3, #8
 8008d10:	b21a      	sxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	b21b      	sxth	r3, r3
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	b21b      	sxth	r3, r3
 8008d1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3303      	adds	r3, #3
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	3202      	adds	r2, #2
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	3201      	adds	r2, #1
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	7812      	ldrb	r2, [r2, #0]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d64:	68fb      	ldr	r3, [r7, #12]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	887a      	ldrh	r2, [r7, #2]
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	887b      	ldrh	r3, [r7, #2]
 8008d8c:	0a1b      	lsrs	r3, r3, #8
 8008d8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	887a      	ldrh	r2, [r7, #2]
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	0a1b      	lsrs	r3, r3, #8
 8008dc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	607a      	str	r2, [r7, #4]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	b2d2      	uxtb	r2, r2
 8008dce:	701a      	strb	r2, [r3, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	0a1b      	lsrs	r3, r3, #8
 8008dd4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	0a1b      	lsrs	r3, r3, #8
 8008de6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00d      	beq.n	8008e36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	1c53      	adds	r3, r2, #1
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	1c59      	adds	r1, r3, #1
 8008e24:	6179      	str	r1, [r7, #20]
 8008e26:	7812      	ldrb	r2, [r2, #0]
 8008e28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	607b      	str	r3, [r7, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1f1      	bne.n	8008e1a <mem_cpy+0x1a>
	}
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e42:	b480      	push	{r7}
 8008e44:	b087      	sub	sp, #28
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	617a      	str	r2, [r7, #20]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	607b      	str	r3, [r7, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1f3      	bne.n	8008e52 <mem_set+0x10>
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008e76:	b480      	push	{r7}
 8008e78:	b089      	sub	sp, #36	; 0x24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	61fb      	str	r3, [r7, #28]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	61fa      	str	r2, [r7, #28]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	4619      	mov	r1, r3
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	61ba      	str	r2, [r7, #24]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	1acb      	subs	r3, r1, r3
 8008ea2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	607b      	str	r3, [r7, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <mem_cmp+0x40>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0eb      	beq.n	8008e8e <mem_cmp+0x18>

	return r;
 8008eb6:	697b      	ldr	r3, [r7, #20]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3724      	adds	r7, #36	; 0x24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ece:	e002      	b.n	8008ed6 <chk_chr+0x12>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <chk_chr+0x26>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d1f2      	bne.n	8008ed0 <chk_chr+0xc>
	return *str;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	781b      	ldrb	r3, [r3, #0]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d009      	beq.n	8008f1c <lock_fs+0x22>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f002 fc69 	bl	800b7e4 <ff_req_grant>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <lock_fs+0x22>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e000      	b.n	8008f1e <lock_fs+0x24>
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00d      	beq.n	8008f54 <unlock_fs+0x2e>
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	2b0c      	cmp	r3, #12
 8008f3c:	d00a      	beq.n	8008f54 <unlock_fs+0x2e>
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	2b0b      	cmp	r3, #11
 8008f42:	d007      	beq.n	8008f54 <unlock_fs+0x2e>
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	d004      	beq.n	8008f54 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f002 fc5d 	bl	800b80e <ff_rel_grant>
	}
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e029      	b.n	8008fc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f70:	4a27      	ldr	r2, [pc, #156]	; (8009010 <chk_lock+0xb4>)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	011b      	lsls	r3, r3, #4
 8008f76:	4413      	add	r3, r2
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d01d      	beq.n	8008fba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f7e:	4a24      	ldr	r2, [pc, #144]	; (8009010 <chk_lock+0xb4>)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	4413      	add	r3, r2
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d116      	bne.n	8008fbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008f90:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <chk_lock+0xb4>)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	4413      	add	r3, r2
 8008f98:	3304      	adds	r3, #4
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d10c      	bne.n	8008fbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fa4:	4a1a      	ldr	r2, [pc, #104]	; (8009010 <chk_lock+0xb4>)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	4413      	add	r3, r2
 8008fac:	3308      	adds	r3, #8
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d102      	bne.n	8008fbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fb8:	e007      	b.n	8008fca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d9d2      	bls.n	8008f70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d109      	bne.n	8008fe4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <chk_lock+0x80>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d101      	bne.n	8008fe0 <chk_lock+0x84>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e010      	b.n	8009002 <chk_lock+0xa6>
 8008fe0:	2312      	movs	r3, #18
 8008fe2:	e00e      	b.n	8009002 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d108      	bne.n	8008ffc <chk_lock+0xa0>
 8008fea:	4a09      	ldr	r2, [pc, #36]	; (8009010 <chk_lock+0xb4>)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	011b      	lsls	r3, r3, #4
 8008ff0:	4413      	add	r3, r2
 8008ff2:	330c      	adds	r3, #12
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ffa:	d101      	bne.n	8009000 <chk_lock+0xa4>
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	e000      	b.n	8009002 <chk_lock+0xa6>
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	200004d0 	.word	0x200004d0

08009014 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800901a:	2300      	movs	r3, #0
 800901c:	607b      	str	r3, [r7, #4]
 800901e:	e002      	b.n	8009026 <enq_lock+0x12>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3301      	adds	r3, #1
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d806      	bhi.n	800903a <enq_lock+0x26>
 800902c:	4a09      	ldr	r2, [pc, #36]	; (8009054 <enq_lock+0x40>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	4413      	add	r3, r2
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1f2      	bne.n	8009020 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b02      	cmp	r3, #2
 800903e:	bf14      	ite	ne
 8009040:	2301      	movne	r3, #1
 8009042:	2300      	moveq	r3, #0
 8009044:	b2db      	uxtb	r3, r3
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	200004d0 	.word	0x200004d0

08009058 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	e01f      	b.n	80090a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009068:	4a41      	ldr	r2, [pc, #260]	; (8009170 <inc_lock+0x118>)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	4413      	add	r3, r2
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d113      	bne.n	80090a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800907a:	4a3d      	ldr	r2, [pc, #244]	; (8009170 <inc_lock+0x118>)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	4413      	add	r3, r2
 8009082:	3304      	adds	r3, #4
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800908a:	429a      	cmp	r2, r3
 800908c:	d109      	bne.n	80090a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800908e:	4a38      	ldr	r2, [pc, #224]	; (8009170 <inc_lock+0x118>)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	4413      	add	r3, r2
 8009096:	3308      	adds	r3, #8
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800909e:	429a      	cmp	r2, r3
 80090a0:	d006      	beq.n	80090b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3301      	adds	r3, #1
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d9dc      	bls.n	8009068 <inc_lock+0x10>
 80090ae:	e000      	b.n	80090b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d132      	bne.n	800911e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e002      	b.n	80090c4 <inc_lock+0x6c>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3301      	adds	r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d806      	bhi.n	80090d8 <inc_lock+0x80>
 80090ca:	4a29      	ldr	r2, [pc, #164]	; (8009170 <inc_lock+0x118>)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	4413      	add	r3, r2
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1f2      	bne.n	80090be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d101      	bne.n	80090e2 <inc_lock+0x8a>
 80090de:	2300      	movs	r3, #0
 80090e0:	e040      	b.n	8009164 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	4922      	ldr	r1, [pc, #136]	; (8009170 <inc_lock+0x118>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	011b      	lsls	r3, r3, #4
 80090ec:	440b      	add	r3, r1
 80090ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	491e      	ldr	r1, [pc, #120]	; (8009170 <inc_lock+0x118>)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	011b      	lsls	r3, r3, #4
 80090fa:	440b      	add	r3, r1
 80090fc:	3304      	adds	r3, #4
 80090fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	695a      	ldr	r2, [r3, #20]
 8009104:	491a      	ldr	r1, [pc, #104]	; (8009170 <inc_lock+0x118>)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	440b      	add	r3, r1
 800910c:	3308      	adds	r3, #8
 800910e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009110:	4a17      	ldr	r2, [pc, #92]	; (8009170 <inc_lock+0x118>)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	011b      	lsls	r3, r3, #4
 8009116:	4413      	add	r3, r2
 8009118:	330c      	adds	r3, #12
 800911a:	2200      	movs	r2, #0
 800911c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <inc_lock+0xe0>
 8009124:	4a12      	ldr	r2, [pc, #72]	; (8009170 <inc_lock+0x118>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	4413      	add	r3, r2
 800912c:	330c      	adds	r3, #12
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <inc_lock+0xe0>
 8009134:	2300      	movs	r3, #0
 8009136:	e015      	b.n	8009164 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d108      	bne.n	8009150 <inc_lock+0xf8>
 800913e:	4a0c      	ldr	r2, [pc, #48]	; (8009170 <inc_lock+0x118>)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	4413      	add	r3, r2
 8009146:	330c      	adds	r3, #12
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	3301      	adds	r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	e001      	b.n	8009154 <inc_lock+0xfc>
 8009150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009154:	4906      	ldr	r1, [pc, #24]	; (8009170 <inc_lock+0x118>)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	440b      	add	r3, r1
 800915c:	330c      	adds	r3, #12
 800915e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3301      	adds	r3, #1
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	200004d0 	.word	0x200004d0

08009174 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3b01      	subs	r3, #1
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d825      	bhi.n	80091d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009188:	4a17      	ldr	r2, [pc, #92]	; (80091e8 <dec_lock+0x74>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	4413      	add	r3, r2
 8009190:	330c      	adds	r3, #12
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009196:	89fb      	ldrh	r3, [r7, #14]
 8009198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919c:	d101      	bne.n	80091a2 <dec_lock+0x2e>
 800919e:	2300      	movs	r3, #0
 80091a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80091a2:	89fb      	ldrh	r3, [r7, #14]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <dec_lock+0x3a>
 80091a8:	89fb      	ldrh	r3, [r7, #14]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091ae:	4a0e      	ldr	r2, [pc, #56]	; (80091e8 <dec_lock+0x74>)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	4413      	add	r3, r2
 80091b6:	330c      	adds	r3, #12
 80091b8:	89fa      	ldrh	r2, [r7, #14]
 80091ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80091bc:	89fb      	ldrh	r3, [r7, #14]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <dec_lock+0x5a>
 80091c2:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <dec_lock+0x74>)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	011b      	lsls	r3, r3, #4
 80091c8:	4413      	add	r3, r2
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	737b      	strb	r3, [r7, #13]
 80091d2:	e001      	b.n	80091d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80091d4:	2302      	movs	r3, #2
 80091d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80091d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	200004d0 	.word	0x200004d0

080091ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e010      	b.n	800921c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091fa:	4a0d      	ldr	r2, [pc, #52]	; (8009230 <clear_lock+0x44>)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	4413      	add	r3, r2
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d105      	bne.n	8009216 <clear_lock+0x2a>
 800920a:	4a09      	ldr	r2, [pc, #36]	; (8009230 <clear_lock+0x44>)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	011b      	lsls	r3, r3, #4
 8009210:	4413      	add	r3, r2
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3301      	adds	r3, #1
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d9eb      	bls.n	80091fa <clear_lock+0xe>
	}
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	200004d0 	.word	0x200004d0

08009234 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	78db      	ldrb	r3, [r3, #3]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d034      	beq.n	80092b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	7858      	ldrb	r0, [r3, #1]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009258:	2301      	movs	r3, #1
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	f7ff fd10 	bl	8008c80 <disk_write>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009266:	2301      	movs	r3, #1
 8009268:	73fb      	strb	r3, [r7, #15]
 800926a:	e022      	b.n	80092b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	1ad2      	subs	r2, r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	429a      	cmp	r2, r3
 8009280:	d217      	bcs.n	80092b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	789b      	ldrb	r3, [r3, #2]
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	e010      	b.n	80092ac <sync_window+0x78>
					wsect += fs->fsize;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	4413      	add	r3, r2
 8009292:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7858      	ldrb	r0, [r3, #1]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800929e:	2301      	movs	r3, #1
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	f7ff fced 	bl	8008c80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d8eb      	bhi.n	800928a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d01b      	beq.n	800930c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff ffad 	bl	8009234 <sync_window>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d113      	bne.n	800930c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7858      	ldrb	r0, [r3, #1]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092ee:	2301      	movs	r3, #1
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	f7ff fca5 	bl	8008c40 <disk_read>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80092fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009300:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009302:	2301      	movs	r3, #1
 8009304:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800930c:	7bfb      	ldrb	r3, [r7, #15]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff ff87 	bl	8009234 <sync_window>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d158      	bne.n	80093e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b03      	cmp	r3, #3
 8009336:	d148      	bne.n	80093ca <sync_fs+0xb2>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	791b      	ldrb	r3, [r3, #4]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d144      	bne.n	80093ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3334      	adds	r3, #52	; 0x34
 8009344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff fd79 	bl	8008e42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3334      	adds	r3, #52	; 0x34
 8009354:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009358:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800935c:	4618      	mov	r0, r3
 800935e:	f7ff fd08 	bl	8008d72 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3334      	adds	r3, #52	; 0x34
 8009366:	4921      	ldr	r1, [pc, #132]	; (80093ec <sync_fs+0xd4>)
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fd1d 	bl	8008da8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3334      	adds	r3, #52	; 0x34
 8009372:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009376:	491e      	ldr	r1, [pc, #120]	; (80093f0 <sync_fs+0xd8>)
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fd15 	bl	8008da8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3334      	adds	r3, #52	; 0x34
 8009382:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	4619      	mov	r1, r3
 800938c:	4610      	mov	r0, r2
 800938e:	f7ff fd0b 	bl	8008da8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3334      	adds	r3, #52	; 0x34
 8009396:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	4619      	mov	r1, r3
 80093a0:	4610      	mov	r0, r2
 80093a2:	f7ff fd01 	bl	8008da8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7858      	ldrb	r0, [r3, #1]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093be:	2301      	movs	r3, #1
 80093c0:	f7ff fc5e 	bl	8008c80 <disk_write>
			fs->fsi_flag = 0;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2200      	movs	r2, #0
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff fc74 	bl	8008cc0 <disk_ioctl>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <sync_fs+0xca>
 80093de:	2301      	movs	r3, #1
 80093e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	41615252 	.word	0x41615252
 80093f0:	61417272 	.word	0x61417272

080093f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	3b02      	subs	r3, #2
 8009402:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	3b02      	subs	r3, #2
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d301      	bcc.n	8009414 <clust2sect+0x20>
 8009410:	2300      	movs	r3, #0
 8009412:	e008      	b.n	8009426 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	895b      	ldrh	r3, [r3, #10]
 8009418:	461a      	mov	r2, r3
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	fb03 f202 	mul.w	r2, r3, r2
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	4413      	add	r3, r2
}
 8009426:	4618      	mov	r0, r3
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d904      	bls.n	8009452 <get_fat+0x20>
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d302      	bcc.n	8009458 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009452:	2301      	movs	r3, #1
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	e08c      	b.n	8009572 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800945c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d045      	beq.n	80094f2 <get_fat+0xc0>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d05d      	beq.n	8009526 <get_fat+0xf4>
 800946a:	2b01      	cmp	r3, #1
 800946c:	d177      	bne.n	800955e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	085b      	lsrs	r3, r3, #1
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	0a5b      	lsrs	r3, r3, #9
 8009484:	4413      	add	r3, r2
 8009486:	4619      	mov	r1, r3
 8009488:	6938      	ldr	r0, [r7, #16]
 800948a:	f7ff ff17 	bl	80092bc <move_window>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d167      	bne.n	8009564 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	60fa      	str	r2, [r7, #12]
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4413      	add	r3, r2
 80094a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094a6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	0a5b      	lsrs	r3, r3, #9
 80094b0:	4413      	add	r3, r2
 80094b2:	4619      	mov	r1, r3
 80094b4:	6938      	ldr	r0, [r7, #16]
 80094b6:	f7ff ff01 	bl	80092bc <move_window>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d153      	bne.n	8009568 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4413      	add	r3, r2
 80094ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094ce:	021b      	lsls	r3, r3, #8
 80094d0:	461a      	mov	r2, r3
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <get_fat+0xb6>
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	091b      	lsrs	r3, r3, #4
 80094e6:	e002      	b.n	80094ee <get_fat+0xbc>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ee:	617b      	str	r3, [r7, #20]
			break;
 80094f0:	e03f      	b.n	8009572 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	0a1b      	lsrs	r3, r3, #8
 80094fa:	4413      	add	r3, r2
 80094fc:	4619      	mov	r1, r3
 80094fe:	6938      	ldr	r0, [r7, #16]
 8009500:	f7ff fedc 	bl	80092bc <move_window>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d130      	bne.n	800956c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009518:	4413      	add	r3, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff fbee 	bl	8008cfc <ld_word>
 8009520:	4603      	mov	r3, r0
 8009522:	617b      	str	r3, [r7, #20]
			break;
 8009524:	e025      	b.n	8009572 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	09db      	lsrs	r3, r3, #7
 800952e:	4413      	add	r3, r2
 8009530:	4619      	mov	r1, r3
 8009532:	6938      	ldr	r0, [r7, #16]
 8009534:	f7ff fec2 	bl	80092bc <move_window>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d118      	bne.n	8009570 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800954c:	4413      	add	r3, r2
 800954e:	4618      	mov	r0, r3
 8009550:	f7ff fbec 	bl	8008d2c <ld_dword>
 8009554:	4603      	mov	r3, r0
 8009556:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800955a:	617b      	str	r3, [r7, #20]
			break;
 800955c:	e009      	b.n	8009572 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800955e:	2301      	movs	r3, #1
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	e006      	b.n	8009572 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009564:	bf00      	nop
 8009566:	e004      	b.n	8009572 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009568:	bf00      	nop
 800956a:	e002      	b.n	8009572 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800956c:	bf00      	nop
 800956e:	e000      	b.n	8009572 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009570:	bf00      	nop
		}
	}

	return val;
 8009572:	697b      	ldr	r3, [r7, #20]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800957c:	b590      	push	{r4, r7, lr}
 800957e:	b089      	sub	sp, #36	; 0x24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009588:	2302      	movs	r3, #2
 800958a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b01      	cmp	r3, #1
 8009590:	f240 80d6 	bls.w	8009740 <put_fat+0x1c4>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	429a      	cmp	r2, r3
 800959c:	f080 80d0 	bcs.w	8009740 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d073      	beq.n	8009690 <put_fat+0x114>
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	f000 8091 	beq.w	80096d0 <put_fat+0x154>
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	f040 80c6 	bne.w	8009740 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	61bb      	str	r3, [r7, #24]
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	085b      	lsrs	r3, r3, #1
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	4413      	add	r3, r2
 80095c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	0a5b      	lsrs	r3, r3, #9
 80095ca:	4413      	add	r3, r2
 80095cc:	4619      	mov	r1, r3
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f7ff fe74 	bl	80092bc <move_window>
 80095d4:	4603      	mov	r3, r0
 80095d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095d8:	7ffb      	ldrb	r3, [r7, #31]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 80a9 	bne.w	8009732 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	1c59      	adds	r1, r3, #1
 80095ea:	61b9      	str	r1, [r7, #24]
 80095ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f0:	4413      	add	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00d      	beq.n	800961a <put_fat+0x9e>
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b25b      	sxtb	r3, r3
 8009604:	f003 030f 	and.w	r3, r3, #15
 8009608:	b25a      	sxtb	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	b25b      	sxtb	r3, r3
 8009612:	4313      	orrs	r3, r2
 8009614:	b25b      	sxtb	r3, r3
 8009616:	b2db      	uxtb	r3, r3
 8009618:	e001      	b.n	800961e <put_fat+0xa2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	0a5b      	lsrs	r3, r3, #9
 8009630:	4413      	add	r3, r2
 8009632:	4619      	mov	r1, r3
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f7ff fe41 	bl	80092bc <move_window>
 800963a:	4603      	mov	r3, r0
 800963c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800963e:	7ffb      	ldrb	r3, [r7, #31]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d178      	bne.n	8009736 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009650:	4413      	add	r3, r2
 8009652:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <put_fat+0xea>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	b2db      	uxtb	r3, r3
 8009664:	e00e      	b.n	8009684 <put_fat+0x108>
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	b25b      	sxtb	r3, r3
 800966c:	f023 030f 	bic.w	r3, r3, #15
 8009670:	b25a      	sxtb	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	0a1b      	lsrs	r3, r3, #8
 8009676:	b25b      	sxtb	r3, r3
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	b25b      	sxtb	r3, r3
 800967e:	4313      	orrs	r3, r2
 8009680:	b25b      	sxtb	r3, r3
 8009682:	b2db      	uxtb	r3, r3
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	70da      	strb	r2, [r3, #3]
			break;
 800968e:	e057      	b.n	8009740 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	4413      	add	r3, r2
 800969a:	4619      	mov	r1, r3
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff fe0d 	bl	80092bc <move_window>
 80096a2:	4603      	mov	r3, r0
 80096a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096a6:	7ffb      	ldrb	r3, [r7, #31]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d146      	bne.n	800973a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80096ba:	4413      	add	r3, r2
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	b292      	uxth	r2, r2
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fb55 	bl	8008d72 <st_word>
			fs->wflag = 1;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2201      	movs	r2, #1
 80096cc:	70da      	strb	r2, [r3, #3]
			break;
 80096ce:	e037      	b.n	8009740 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	09db      	lsrs	r3, r3, #7
 80096d8:	4413      	add	r3, r2
 80096da:	4619      	mov	r1, r3
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fded 	bl	80092bc <move_window>
 80096e2:	4603      	mov	r3, r0
 80096e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096e6:	7ffb      	ldrb	r3, [r7, #31]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d128      	bne.n	800973e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009700:	4413      	add	r3, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff fb12 	bl	8008d2c <ld_dword>
 8009708:	4603      	mov	r3, r0
 800970a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800970e:	4323      	orrs	r3, r4
 8009710:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009720:	4413      	add	r3, r2
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff fb3f 	bl	8008da8 <st_dword>
			fs->wflag = 1;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	70da      	strb	r2, [r3, #3]
			break;
 8009730:	e006      	b.n	8009740 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800973e:	bf00      	nop
		}
	}
	return res;
 8009740:	7ffb      	ldrb	r3, [r7, #31]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3724      	adds	r7, #36	; 0x24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd90      	pop	{r4, r7, pc}

0800974a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b088      	sub	sp, #32
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d904      	bls.n	8009770 <remove_chain+0x26>
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	429a      	cmp	r2, r3
 800976e:	d301      	bcc.n	8009774 <remove_chain+0x2a>
 8009770:	2302      	movs	r3, #2
 8009772:	e04b      	b.n	800980c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00c      	beq.n	8009794 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800977a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	69b8      	ldr	r0, [r7, #24]
 8009782:	f7ff fefb 	bl	800957c <put_fat>
 8009786:	4603      	mov	r3, r0
 8009788:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800978a:	7ffb      	ldrb	r3, [r7, #31]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <remove_chain+0x4a>
 8009790:	7ffb      	ldrb	r3, [r7, #31]
 8009792:	e03b      	b.n	800980c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f7ff fe4b 	bl	8009432 <get_fat>
 800979c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d031      	beq.n	8009808 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <remove_chain+0x64>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e02e      	b.n	800980c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097b4:	d101      	bne.n	80097ba <remove_chain+0x70>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e028      	b.n	800980c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80097ba:	2200      	movs	r2, #0
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	69b8      	ldr	r0, [r7, #24]
 80097c0:	f7ff fedc 	bl	800957c <put_fat>
 80097c4:	4603      	mov	r3, r0
 80097c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80097c8:	7ffb      	ldrb	r3, [r7, #31]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <remove_chain+0x88>
 80097ce:	7ffb      	ldrb	r3, [r7, #31]
 80097d0:	e01c      	b.n	800980c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	695a      	ldr	r2, [r3, #20]
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	3b02      	subs	r3, #2
 80097dc:	429a      	cmp	r2, r3
 80097de:	d20b      	bcs.n	80097f8 <remove_chain+0xae>
			fs->free_clst++;
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	791b      	ldrb	r3, [r3, #4]
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	429a      	cmp	r2, r3
 8009804:	d3c6      	bcc.n	8009794 <remove_chain+0x4a>
 8009806:	e000      	b.n	800980a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009808:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10d      	bne.n	8009846 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d004      	beq.n	8009840 <create_chain+0x2c>
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	429a      	cmp	r2, r3
 800983e:	d31b      	bcc.n	8009878 <create_chain+0x64>
 8009840:	2301      	movs	r3, #1
 8009842:	61bb      	str	r3, [r7, #24]
 8009844:	e018      	b.n	8009878 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff fdf2 	bl	8009432 <get_fat>
 800984e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d801      	bhi.n	800985a <create_chain+0x46>
 8009856:	2301      	movs	r3, #1
 8009858:	e070      	b.n	800993c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009860:	d101      	bne.n	8009866 <create_chain+0x52>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	e06a      	b.n	800993c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	429a      	cmp	r2, r3
 800986e:	d201      	bcs.n	8009874 <create_chain+0x60>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	e063      	b.n	800993c <create_chain+0x128>
		scl = clst;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	3301      	adds	r3, #1
 8009880:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	429a      	cmp	r2, r3
 800988a:	d307      	bcc.n	800989c <create_chain+0x88>
				ncl = 2;
 800988c:	2302      	movs	r3, #2
 800988e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	429a      	cmp	r2, r3
 8009896:	d901      	bls.n	800989c <create_chain+0x88>
 8009898:	2300      	movs	r3, #0
 800989a:	e04f      	b.n	800993c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800989c:	69f9      	ldr	r1, [r7, #28]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff fdc7 	bl	8009432 <get_fat>
 80098a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d003      	beq.n	80098ba <create_chain+0xa6>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b8:	d101      	bne.n	80098be <create_chain+0xaa>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	e03e      	b.n	800993c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d1da      	bne.n	800987c <create_chain+0x68>
 80098c6:	2300      	movs	r3, #0
 80098c8:	e038      	b.n	800993c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80098ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	6938      	ldr	r0, [r7, #16]
 80098d4:	f7ff fe52 	bl	800957c <put_fat>
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <create_chain+0xe2>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6938      	ldr	r0, [r7, #16]
 80098ee:	f7ff fe45 	bl	800957c <put_fat>
 80098f2:	4603      	mov	r3, r0
 80098f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d116      	bne.n	800992a <create_chain+0x116>
		fs->last_clst = ncl;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	695a      	ldr	r2, [r3, #20]
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	3b02      	subs	r3, #2
 800990c:	429a      	cmp	r2, r3
 800990e:	d804      	bhi.n	800991a <create_chain+0x106>
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	1e5a      	subs	r2, r3, #1
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	791b      	ldrb	r3, [r3, #4]
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	711a      	strb	r2, [r3, #4]
 8009928:	e007      	b.n	800993a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d102      	bne.n	8009936 <create_chain+0x122>
 8009930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009934:	e000      	b.n	8009938 <create_chain+0x124>
 8009936:	2301      	movs	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800993a:	69fb      	ldr	r3, [r7, #28]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3720      	adds	r7, #32
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	3304      	adds	r3, #4
 800995a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	0a5b      	lsrs	r3, r3, #9
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	8952      	ldrh	r2, [r2, #10]
 8009964:	fbb3 f3f2 	udiv	r3, r3, r2
 8009968:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1d1a      	adds	r2, r3, #4
 800996e:	613a      	str	r2, [r7, #16]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <clmt_clust+0x3a>
 800997a:	2300      	movs	r3, #0
 800997c:	e010      	b.n	80099a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	d307      	bcc.n	8009996 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3304      	adds	r3, #4
 8009992:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009994:	e7e9      	b.n	800996a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009996:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4413      	add	r3, r2
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	371c      	adds	r7, #28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099c2:	d204      	bcs.n	80099ce <dir_sdi+0x22>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	f003 031f 	and.w	r3, r3, #31
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80099ce:	2302      	movs	r3, #2
 80099d0:	e063      	b.n	8009a9a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d106      	bne.n	80099f2 <dir_sdi+0x46>
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d902      	bls.n	80099f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10c      	bne.n	8009a12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	095b      	lsrs	r3, r3, #5
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	8912      	ldrh	r2, [r2, #8]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d301      	bcc.n	8009a08 <dir_sdi+0x5c>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e048      	b.n	8009a9a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	61da      	str	r2, [r3, #28]
 8009a10:	e029      	b.n	8009a66 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	895b      	ldrh	r3, [r3, #10]
 8009a16:	025b      	lsls	r3, r3, #9
 8009a18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a1a:	e019      	b.n	8009a50 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6979      	ldr	r1, [r7, #20]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff fd06 	bl	8009432 <get_fat>
 8009a26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a2e:	d101      	bne.n	8009a34 <dir_sdi+0x88>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e032      	b.n	8009a9a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d904      	bls.n	8009a44 <dir_sdi+0x98>
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d301      	bcc.n	8009a48 <dir_sdi+0x9c>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e028      	b.n	8009a9a <dir_sdi+0xee>
			ofs -= csz;
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d2e1      	bcs.n	8009a1c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009a58:	6979      	ldr	r1, [r7, #20]
 8009a5a:	6938      	ldr	r0, [r7, #16]
 8009a5c:	f7ff fcca 	bl	80093f4 <clust2sect>
 8009a60:	4602      	mov	r2, r0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	69db      	ldr	r3, [r3, #28]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <dir_sdi+0xcc>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e010      	b.n	8009a9a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69da      	ldr	r2, [r3, #28]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	0a5b      	lsrs	r3, r3, #9
 8009a80:	441a      	add	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a92:	441a      	add	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b086      	sub	sp, #24
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	3320      	adds	r3, #32
 8009ab8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <dir_next+0x28>
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ac8:	d301      	bcc.n	8009ace <dir_next+0x2c>
 8009aca:	2304      	movs	r3, #4
 8009acc:	e0aa      	b.n	8009c24 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f040 8098 	bne.w	8009c0a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10b      	bne.n	8009b04 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	095b      	lsrs	r3, r3, #5
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	8912      	ldrh	r2, [r2, #8]
 8009af4:	4293      	cmp	r3, r2
 8009af6:	f0c0 8088 	bcc.w	8009c0a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	61da      	str	r2, [r3, #28]
 8009b00:	2304      	movs	r3, #4
 8009b02:	e08f      	b.n	8009c24 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	0a5b      	lsrs	r3, r3, #9
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	8952      	ldrh	r2, [r2, #10]
 8009b0c:	3a01      	subs	r2, #1
 8009b0e:	4013      	ands	r3, r2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d17a      	bne.n	8009c0a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f7ff fc88 	bl	8009432 <get_fat>
 8009b22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d801      	bhi.n	8009b2e <dir_next+0x8c>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e07a      	b.n	8009c24 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b34:	d101      	bne.n	8009b3a <dir_next+0x98>
 8009b36:	2301      	movs	r3, #1
 8009b38:	e074      	b.n	8009c24 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d358      	bcc.n	8009bf6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d104      	bne.n	8009b54 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	61da      	str	r2, [r3, #28]
 8009b50:	2304      	movs	r3, #4
 8009b52:	e067      	b.n	8009c24 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f7ff fe59 	bl	8009814 <create_chain>
 8009b62:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <dir_next+0xcc>
 8009b6a:	2307      	movs	r3, #7
 8009b6c:	e05a      	b.n	8009c24 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d101      	bne.n	8009b78 <dir_next+0xd6>
 8009b74:	2302      	movs	r3, #2
 8009b76:	e055      	b.n	8009c24 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b7e:	d101      	bne.n	8009b84 <dir_next+0xe2>
 8009b80:	2301      	movs	r3, #1
 8009b82:	e04f      	b.n	8009c24 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff fb55 	bl	8009234 <sync_window>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <dir_next+0xf2>
 8009b90:	2301      	movs	r3, #1
 8009b92:	e047      	b.n	8009c24 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3334      	adds	r3, #52	; 0x34
 8009b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff f94f 	bl	8008e42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	6979      	ldr	r1, [r7, #20]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7ff fc22 	bl	80093f4 <clust2sect>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8009bb6:	e012      	b.n	8009bde <dir_next+0x13c>
						fs->wflag = 1;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff fb38 	bl	8009234 <sync_window>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <dir_next+0x12c>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e02a      	b.n	8009c24 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	613b      	str	r3, [r7, #16]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	895b      	ldrh	r3, [r3, #10]
 8009be2:	461a      	mov	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d3e6      	bcc.n	8009bb8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	1ad2      	subs	r2, r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009bfc:	6979      	ldr	r1, [r7, #20]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff fbf8 	bl	80093f4 <clust2sect>
 8009c04:	4602      	mov	r2, r0
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1c:	441a      	add	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff feb4 	bl	80099ac <dir_sdi>
 8009c44:	4603      	mov	r3, r0
 8009c46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d12b      	bne.n	8009ca6 <dir_alloc+0x7a>
		n = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	4619      	mov	r1, r3
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff fb2f 	bl	80092bc <move_window>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d11d      	bne.n	8009ca4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2be5      	cmp	r3, #229	; 0xe5
 8009c70:	d004      	beq.n	8009c7c <dir_alloc+0x50>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d107      	bne.n	8009c8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d102      	bne.n	8009c90 <dir_alloc+0x64>
 8009c8a:	e00c      	b.n	8009ca6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009c90:	2101      	movs	r1, #1
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff ff05 	bl	8009aa2 <dir_next>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0d7      	beq.n	8009c52 <dir_alloc+0x26>
 8009ca2:	e000      	b.n	8009ca6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ca4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d101      	bne.n	8009cb0 <dir_alloc+0x84>
 8009cac:	2307      	movs	r3, #7
 8009cae:	75fb      	strb	r3, [r7, #23]
	return res;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	331a      	adds	r3, #26
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff f817 	bl	8008cfc <ld_word>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d109      	bne.n	8009cee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	3314      	adds	r3, #20
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff f80c 	bl	8008cfc <ld_word>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	041b      	lsls	r3, r3, #16
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009cee:	68fb      	ldr	r3, [r7, #12]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	331a      	adds	r3, #26
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	b292      	uxth	r2, r2
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff f82f 	bl	8008d72 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d109      	bne.n	8009d30 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f103 0214 	add.w	r2, r3, #20
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	0c1b      	lsrs	r3, r3, #16
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	f7ff f821 	bl	8008d72 <st_word>
	}
}
 8009d30:	bf00      	nop
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009d42:	2304      	movs	r3, #4
 8009d44:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009d4c:	e03c      	b.n	8009dc8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6938      	ldr	r0, [r7, #16]
 8009d56:	f7ff fab1 	bl	80092bc <move_window>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d136      	bne.n	8009dd2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009d72:	2304      	movs	r3, #4
 8009d74:	75fb      	strb	r3, [r7, #23]
 8009d76:	e031      	b.n	8009ddc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	330b      	adds	r3, #11
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d84:	73bb      	strb	r3, [r7, #14]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	7bba      	ldrb	r2, [r7, #14]
 8009d8a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	2be5      	cmp	r3, #229	; 0xe5
 8009d90:	d011      	beq.n	8009db6 <dir_read+0x7e>
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b2e      	cmp	r3, #46	; 0x2e
 8009d96:	d00e      	beq.n	8009db6 <dir_read+0x7e>
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d00b      	beq.n	8009db6 <dir_read+0x7e>
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	f023 0320 	bic.w	r3, r3, #32
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	bf0c      	ite	eq
 8009da8:	2301      	moveq	r3, #1
 8009daa:	2300      	movne	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d00f      	beq.n	8009dd6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009db6:	2100      	movs	r1, #0
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fe72 	bl	8009aa2 <dir_next>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d108      	bne.n	8009dda <dir_read+0xa2>
	while (dp->sect) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1be      	bne.n	8009d4e <dir_read+0x16>
 8009dd0:	e004      	b.n	8009ddc <dir_read+0xa4>
		if (res != FR_OK) break;
 8009dd2:	bf00      	nop
 8009dd4:	e002      	b.n	8009ddc <dir_read+0xa4>
				break;
 8009dd6:	bf00      	nop
 8009dd8:	e000      	b.n	8009ddc <dir_read+0xa4>
		if (res != FR_OK) break;
 8009dda:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <dir_read+0xb0>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	61da      	str	r2, [r3, #28]
	return res;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b086      	sub	sp, #24
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e00:	2100      	movs	r1, #0
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fdd2 	bl	80099ac <dir_sdi>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <dir_find+0x24>
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	e03e      	b.n	8009e94 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6938      	ldr	r0, [r7, #16]
 8009e1e:	f7ff fa4d 	bl	80092bc <move_window>
 8009e22:	4603      	mov	r3, r0
 8009e24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d12f      	bne.n	8009e8c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d102      	bne.n	8009e40 <dir_find+0x4e>
 8009e3a:	2304      	movs	r3, #4
 8009e3c:	75fb      	strb	r3, [r7, #23]
 8009e3e:	e028      	b.n	8009e92 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	330b      	adds	r3, #11
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	330b      	adds	r3, #11
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <dir_find+0x86>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a18      	ldr	r0, [r3, #32]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3324      	adds	r3, #36	; 0x24
 8009e6a:	220b      	movs	r2, #11
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f7ff f802 	bl	8008e76 <mem_cmp>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e78:	2100      	movs	r1, #0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff fe11 	bl	8009aa2 <dir_next>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0c5      	beq.n	8009e16 <dir_find+0x24>
 8009e8a:	e002      	b.n	8009e92 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009e8c:	bf00      	nop
 8009e8e:	e000      	b.n	8009e92 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e90:	bf00      	nop

	return res;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009eaa:	2101      	movs	r1, #1
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff febd 	bl	8009c2c <dir_alloc>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d11c      	bne.n	8009ef6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	68b8      	ldr	r0, [r7, #8]
 8009ec4:	f7ff f9fa 	bl	80092bc <move_window>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d111      	bne.n	8009ef6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe ffb1 	bl	8008e42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a18      	ldr	r0, [r3, #32]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3324      	adds	r3, #36	; 0x24
 8009ee8:	220b      	movs	r2, #11
 8009eea:	4619      	mov	r1, r3
 8009eec:	f7fe ff88 	bl	8008e00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	4619      	mov	r1, r3
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff f9d1 	bl	80092bc <move_window>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009f1e:	7afb      	ldrb	r3, [r7, #11]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d106      	bne.n	8009f32 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	22e5      	movs	r2, #229	; 0xe5
 8009f2a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8009f32:	7afb      	ldrb	r3, [r7, #11]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3324      	adds	r3, #36	; 0x24
 8009f50:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009f52:	220b      	movs	r2, #11
 8009f54:	2120      	movs	r1, #32
 8009f56:	68b8      	ldr	r0, [r7, #8]
 8009f58:	f7fe ff73 	bl	8008e42 <mem_set>
	si = i = 0; ni = 8;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	613b      	str	r3, [r7, #16]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	2308      	movs	r3, #8
 8009f66:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	1c5a      	adds	r2, r3, #1
 8009f6c:	617a      	str	r2, [r7, #20]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f76:	7ffb      	ldrb	r3, [r7, #31]
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	d94e      	bls.n	800a01a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009f7c:	7ffb      	ldrb	r3, [r7, #31]
 8009f7e:	2b2f      	cmp	r3, #47	; 0x2f
 8009f80:	d006      	beq.n	8009f90 <create_name+0x54>
 8009f82:	7ffb      	ldrb	r3, [r7, #31]
 8009f84:	2b5c      	cmp	r3, #92	; 0x5c
 8009f86:	d110      	bne.n	8009faa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f88:	e002      	b.n	8009f90 <create_name+0x54>
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	4413      	add	r3, r2
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b2f      	cmp	r3, #47	; 0x2f
 8009f9a:	d0f6      	beq.n	8009f8a <create_name+0x4e>
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b5c      	cmp	r3, #92	; 0x5c
 8009fa6:	d0f0      	beq.n	8009f8a <create_name+0x4e>
			break;
 8009fa8:	e038      	b.n	800a01c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009faa:	7ffb      	ldrb	r3, [r7, #31]
 8009fac:	2b2e      	cmp	r3, #46	; 0x2e
 8009fae:	d003      	beq.n	8009fb8 <create_name+0x7c>
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d30c      	bcc.n	8009fd2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	2b0b      	cmp	r3, #11
 8009fbc:	d002      	beq.n	8009fc4 <create_name+0x88>
 8009fbe:	7ffb      	ldrb	r3, [r7, #31]
 8009fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc2:	d001      	beq.n	8009fc8 <create_name+0x8c>
 8009fc4:	2306      	movs	r3, #6
 8009fc6:	e044      	b.n	800a052 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009fc8:	2308      	movs	r3, #8
 8009fca:	613b      	str	r3, [r7, #16]
 8009fcc:	230b      	movs	r3, #11
 8009fce:	61bb      	str	r3, [r7, #24]
			continue;
 8009fd0:	e022      	b.n	800a018 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009fd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	da04      	bge.n	8009fe4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009fda:	7ffb      	ldrb	r3, [r7, #31]
 8009fdc:	3b80      	subs	r3, #128	; 0x80
 8009fde:	4a1f      	ldr	r2, [pc, #124]	; (800a05c <create_name+0x120>)
 8009fe0:	5cd3      	ldrb	r3, [r2, r3]
 8009fe2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009fe4:	7ffb      	ldrb	r3, [r7, #31]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	481d      	ldr	r0, [pc, #116]	; (800a060 <create_name+0x124>)
 8009fea:	f7fe ff6b 	bl	8008ec4 <chk_chr>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <create_name+0xbc>
 8009ff4:	2306      	movs	r3, #6
 8009ff6:	e02c      	b.n	800a052 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009ff8:	7ffb      	ldrb	r3, [r7, #31]
 8009ffa:	2b60      	cmp	r3, #96	; 0x60
 8009ffc:	d905      	bls.n	800a00a <create_name+0xce>
 8009ffe:	7ffb      	ldrb	r3, [r7, #31]
 800a000:	2b7a      	cmp	r3, #122	; 0x7a
 800a002:	d802      	bhi.n	800a00a <create_name+0xce>
 800a004:	7ffb      	ldrb	r3, [r7, #31]
 800a006:	3b20      	subs	r3, #32
 800a008:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	613a      	str	r2, [r7, #16]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	4413      	add	r3, r2
 800a014:	7ffa      	ldrb	r2, [r7, #31]
 800a016:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a018:	e7a6      	b.n	8009f68 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a01a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	441a      	add	r2, r3
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <create_name+0xf4>
 800a02c:	2306      	movs	r3, #6
 800a02e:	e010      	b.n	800a052 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2be5      	cmp	r3, #229	; 0xe5
 800a036:	d102      	bne.n	800a03e <create_name+0x102>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2205      	movs	r2, #5
 800a03c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a03e:	7ffb      	ldrb	r3, [r7, #31]
 800a040:	2b20      	cmp	r3, #32
 800a042:	d801      	bhi.n	800a048 <create_name+0x10c>
 800a044:	2204      	movs	r2, #4
 800a046:	e000      	b.n	800a04a <create_name+0x10e>
 800a048:	2200      	movs	r2, #0
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	330b      	adds	r3, #11
 800a04e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a050:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a052:	4618      	mov	r0, r3
 800a054:	3720      	adds	r7, #32
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	080136f8 	.word	0x080136f8
 800a060:	08013634 	.word	0x08013634

0800a064 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a078:	e002      	b.n	800a080 <follow_path+0x1c>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	3301      	adds	r3, #1
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b2f      	cmp	r3, #47	; 0x2f
 800a086:	d0f8      	beq.n	800a07a <follow_path+0x16>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b5c      	cmp	r3, #92	; 0x5c
 800a08e:	d0f4      	beq.n	800a07a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	2200      	movs	r2, #0
 800a094:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b1f      	cmp	r3, #31
 800a09c:	d80a      	bhi.n	800a0b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2280      	movs	r2, #128	; 0x80
 800a0a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff fc7f 	bl	80099ac <dir_sdi>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	75fb      	strb	r3, [r7, #23]
 800a0b2:	e043      	b.n	800a13c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff ff3f 	bl	8009f3c <create_name>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d134      	bne.n	800a132 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fe92 	bl	8009df2 <dir_find>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00a      	beq.n	800a0f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d127      	bne.n	800a136 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a0e6:	7afb      	ldrb	r3, [r7, #11]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d122      	bne.n	800a136 <follow_path+0xd2>
 800a0f0:	2305      	movs	r3, #5
 800a0f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0f4:	e01f      	b.n	800a136 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0f6:	7afb      	ldrb	r3, [r7, #11]
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d11c      	bne.n	800a13a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	799b      	ldrb	r3, [r3, #6]
 800a104:	f003 0310 	and.w	r3, r3, #16
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a10c:	2305      	movs	r3, #5
 800a10e:	75fb      	strb	r3, [r7, #23]
 800a110:	e014      	b.n	800a13c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a120:	4413      	add	r3, r2
 800a122:	4619      	mov	r1, r3
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff fdc8 	bl	8009cba <ld_clust>
 800a12a:	4602      	mov	r2, r0
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a130:	e7c0      	b.n	800a0b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800a132:	bf00      	nop
 800a134:	e002      	b.n	800a13c <follow_path+0xd8>
				break;
 800a136:	bf00      	nop
 800a138:	e000      	b.n	800a13c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a13a:	bf00      	nop
			}
		}
	}

	return res;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a146:	b480      	push	{r7}
 800a148:	b087      	sub	sp, #28
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a152:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d031      	beq.n	800a1c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	e002      	b.n	800a16a <get_ldnumber+0x24>
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	3301      	adds	r3, #1
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b20      	cmp	r3, #32
 800a170:	d903      	bls.n	800a17a <get_ldnumber+0x34>
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b3a      	cmp	r3, #58	; 0x3a
 800a178:	d1f4      	bne.n	800a164 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b3a      	cmp	r3, #58	; 0x3a
 800a180:	d11c      	bne.n	800a1bc <get_ldnumber+0x76>
			tp = *path;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	60fa      	str	r2, [r7, #12]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	3b30      	subs	r3, #48	; 0x30
 800a192:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b09      	cmp	r3, #9
 800a198:	d80e      	bhi.n	800a1b8 <get_ldnumber+0x72>
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d10a      	bne.n	800a1b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d107      	bne.n	800a1b8 <get_ldnumber+0x72>
					vol = (int)i;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	e002      	b.n	800a1c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a1bc:	2300      	movs	r3, #0
 800a1be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a1c0:	693b      	ldr	r3, [r7, #16]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	70da      	strb	r2, [r3, #3]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff f866 	bl	80092bc <move_window>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <check_fs+0x2a>
 800a1f6:	2304      	movs	r3, #4
 800a1f8:	e038      	b.n	800a26c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3334      	adds	r3, #52	; 0x34
 800a1fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fd7a 	bl	8008cfc <ld_word>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a210:	429a      	cmp	r2, r3
 800a212:	d001      	beq.n	800a218 <check_fs+0x48>
 800a214:	2303      	movs	r3, #3
 800a216:	e029      	b.n	800a26c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a21e:	2be9      	cmp	r3, #233	; 0xe9
 800a220:	d009      	beq.n	800a236 <check_fs+0x66>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a228:	2beb      	cmp	r3, #235	; 0xeb
 800a22a:	d11e      	bne.n	800a26a <check_fs+0x9a>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a232:	2b90      	cmp	r3, #144	; 0x90
 800a234:	d119      	bne.n	800a26a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3334      	adds	r3, #52	; 0x34
 800a23a:	3336      	adds	r3, #54	; 0x36
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fd75 	bl	8008d2c <ld_dword>
 800a242:	4603      	mov	r3, r0
 800a244:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a248:	4a0a      	ldr	r2, [pc, #40]	; (800a274 <check_fs+0xa4>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d101      	bne.n	800a252 <check_fs+0x82>
 800a24e:	2300      	movs	r3, #0
 800a250:	e00c      	b.n	800a26c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3334      	adds	r3, #52	; 0x34
 800a256:	3352      	adds	r3, #82	; 0x52
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fe fd67 	bl	8008d2c <ld_dword>
 800a25e:	4602      	mov	r2, r0
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <check_fs+0xa8>)
 800a262:	429a      	cmp	r2, r3
 800a264:	d101      	bne.n	800a26a <check_fs+0x9a>
 800a266:	2300      	movs	r3, #0
 800a268:	e000      	b.n	800a26c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a26a:	2302      	movs	r3, #2
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	00544146 	.word	0x00544146
 800a278:	33544146 	.word	0x33544146

0800a27c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b096      	sub	sp, #88	; 0x58
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7ff ff58 	bl	800a146 <get_ldnumber>
 800a296:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	da01      	bge.n	800a2a2 <find_volume+0x26>
 800a29e:	230b      	movs	r3, #11
 800a2a0:	e236      	b.n	800a710 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a2a2:	4aac      	ldr	r2, [pc, #688]	; (800a554 <find_volume+0x2d8>)
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <find_volume+0x3a>
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	e22c      	b.n	800a710 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800a2b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2b8:	f7fe fe1f 	bl	8008efa <lock_fs>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <find_volume+0x4a>
 800a2c2:	230f      	movs	r3, #15
 800a2c4:	e224      	b.n	800a710 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	f023 0301 	bic.w	r3, r3, #1
 800a2d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d01a      	beq.n	800a312 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe fc6d 	bl	8008bc0 <disk_status>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a2ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10c      	bne.n	800a312 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d007      	beq.n	800a30e <find_volume+0x92>
 800a2fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a302:	f003 0304 	and.w	r3, r3, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a30a:	230a      	movs	r3, #10
 800a30c:	e200      	b.n	800a710 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800a30e:	2300      	movs	r3, #0
 800a310:	e1fe      	b.n	800a710 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	2200      	movs	r2, #0
 800a316:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe fc65 	bl	8008bf4 <disk_initialize>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d001      	beq.n	800a340 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a33c:	2303      	movs	r3, #3
 800a33e:	e1e7      	b.n	800a710 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a340:	79fb      	ldrb	r3, [r7, #7]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d007      	beq.n	800a356 <find_volume+0xda>
 800a346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a352:	230a      	movs	r3, #10
 800a354:	e1dc      	b.n	800a710 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a35a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a35c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a35e:	f7ff ff37 	bl	800a1d0 <check_fs>
 800a362:	4603      	mov	r3, r0
 800a364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d14b      	bne.n	800a408 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a370:	2300      	movs	r3, #0
 800a372:	643b      	str	r3, [r7, #64]	; 0x40
 800a374:	e01f      	b.n	800a3b6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a384:	4413      	add	r3, r2
 800a386:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	3304      	adds	r3, #4
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <find_volume+0x124>
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	3308      	adds	r3, #8
 800a396:	4618      	mov	r0, r3
 800a398:	f7fe fcc8 	bl	8008d2c <ld_dword>
 800a39c:	4602      	mov	r2, r0
 800a39e:	e000      	b.n	800a3a2 <find_volume+0x126>
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a3aa:	440b      	add	r3, r1
 800a3ac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d9dc      	bls.n	800a376 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a3bc:	2300      	movs	r3, #0
 800a3be:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <find_volume+0x150>
 800a3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a3da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d005      	beq.n	800a3ee <find_volume+0x172>
 800a3e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3e6:	f7ff fef3 	bl	800a1d0 <check_fs>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	e000      	b.n	800a3f0 <find_volume+0x174>
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a3f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d905      	bls.n	800a408 <find_volume+0x18c>
 800a3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3fe:	3301      	adds	r3, #1
 800a400:	643b      	str	r3, [r7, #64]	; 0x40
 800a402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a404:	2b03      	cmp	r3, #3
 800a406:	d9e1      	bls.n	800a3cc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d101      	bne.n	800a414 <find_volume+0x198>
 800a410:	2301      	movs	r3, #1
 800a412:	e17d      	b.n	800a710 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a414:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d901      	bls.n	800a420 <find_volume+0x1a4>
 800a41c:	230d      	movs	r3, #13
 800a41e:	e177      	b.n	800a710 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	3334      	adds	r3, #52	; 0x34
 800a424:	330b      	adds	r3, #11
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fc68 	bl	8008cfc <ld_word>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a432:	d001      	beq.n	800a438 <find_volume+0x1bc>
 800a434:	230d      	movs	r3, #13
 800a436:	e16b      	b.n	800a710 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	3334      	adds	r3, #52	; 0x34
 800a43c:	3316      	adds	r3, #22
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fc5c 	bl	8008cfc <ld_word>
 800a444:	4603      	mov	r3, r0
 800a446:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <find_volume+0x1e0>
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	3334      	adds	r3, #52	; 0x34
 800a452:	3324      	adds	r3, #36	; 0x24
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fc69 	bl	8008d2c <ld_dword>
 800a45a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a460:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	789b      	ldrb	r3, [r3, #2]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d005      	beq.n	800a480 <find_volume+0x204>
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	789b      	ldrb	r3, [r3, #2]
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d001      	beq.n	800a480 <find_volume+0x204>
 800a47c:	230d      	movs	r3, #13
 800a47e:	e147      	b.n	800a710 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	789b      	ldrb	r3, [r3, #2]
 800a484:	461a      	mov	r2, r3
 800a486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a488:	fb02 f303 	mul.w	r3, r2, r3
 800a48c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a494:	b29a      	uxth	r2, r3
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	895b      	ldrh	r3, [r3, #10]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d008      	beq.n	800a4b4 <find_volume+0x238>
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	895b      	ldrh	r3, [r3, #10]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	895b      	ldrh	r3, [r3, #10]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <find_volume+0x23c>
 800a4b4:	230d      	movs	r3, #13
 800a4b6:	e12b      	b.n	800a710 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	3334      	adds	r3, #52	; 0x34
 800a4bc:	3311      	adds	r3, #17
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fc1c 	bl	8008cfc <ld_word>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	891b      	ldrh	r3, [r3, #8]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <find_volume+0x262>
 800a4da:	230d      	movs	r3, #13
 800a4dc:	e118      	b.n	800a710 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	3334      	adds	r3, #52	; 0x34
 800a4e2:	3313      	adds	r3, #19
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe fc09 	bl	8008cfc <ld_word>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <find_volume+0x286>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	3334      	adds	r3, #52	; 0x34
 800a4f8:	3320      	adds	r3, #32
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fc16 	bl	8008d2c <ld_dword>
 800a500:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	3334      	adds	r3, #52	; 0x34
 800a506:	330e      	adds	r3, #14
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe fbf7 	bl	8008cfc <ld_word>
 800a50e:	4603      	mov	r3, r0
 800a510:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <find_volume+0x2a0>
 800a518:	230d      	movs	r3, #13
 800a51a:	e0f9      	b.n	800a710 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a51c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a520:	4413      	add	r3, r2
 800a522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a524:	8912      	ldrh	r2, [r2, #8]
 800a526:	0912      	lsrs	r2, r2, #4
 800a528:	b292      	uxth	r2, r2
 800a52a:	4413      	add	r3, r2
 800a52c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a52e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	429a      	cmp	r2, r3
 800a534:	d201      	bcs.n	800a53a <find_volume+0x2be>
 800a536:	230d      	movs	r3, #13
 800a538:	e0ea      	b.n	800a710 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a53a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a542:	8952      	ldrh	r2, [r2, #10]
 800a544:	fbb3 f3f2 	udiv	r3, r3, r2
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d103      	bne.n	800a558 <find_volume+0x2dc>
 800a550:	230d      	movs	r3, #13
 800a552:	e0dd      	b.n	800a710 <find_volume+0x494>
 800a554:	200004c8 	.word	0x200004c8
		fmt = FS_FAT32;
 800a558:	2303      	movs	r3, #3
 800a55a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a564:	4293      	cmp	r3, r2
 800a566:	d802      	bhi.n	800a56e <find_volume+0x2f2>
 800a568:	2302      	movs	r3, #2
 800a56a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a574:	4293      	cmp	r3, r2
 800a576:	d802      	bhi.n	800a57e <find_volume+0x302>
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	1c9a      	adds	r2, r3, #2
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a58a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a58c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a590:	441a      	add	r2, r3
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	441a      	add	r2, r3
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a5a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d11e      	bne.n	800a5e6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	3334      	adds	r3, #52	; 0x34
 800a5ac:	332a      	adds	r3, #42	; 0x2a
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fba4 	bl	8008cfc <ld_word>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <find_volume+0x342>
 800a5ba:	230d      	movs	r3, #13
 800a5bc:	e0a8      	b.n	800a710 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	891b      	ldrh	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <find_volume+0x34e>
 800a5c6:	230d      	movs	r3, #13
 800a5c8:	e0a2      	b.n	800a710 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	3334      	adds	r3, #52	; 0x34
 800a5ce:	332c      	adds	r3, #44	; 0x2c
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fe fbab 	bl	8008d2c <ld_dword>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a5e4:	e01f      	b.n	800a626 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	891b      	ldrh	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <find_volume+0x376>
 800a5ee:	230d      	movs	r3, #13
 800a5f0:	e08e      	b.n	800a710 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f8:	441a      	add	r2, r3
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a5fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a602:	2b02      	cmp	r3, #2
 800a604:	d103      	bne.n	800a60e <find_volume+0x392>
 800a606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	e00a      	b.n	800a624 <find_volume+0x3a8>
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	4613      	mov	r3, r2
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4413      	add	r3, r2
 800a618:	085a      	lsrs	r2, r3, #1
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	69da      	ldr	r2, [r3, #28]
 800a62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a62c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a630:	0a5b      	lsrs	r3, r3, #9
 800a632:	429a      	cmp	r2, r3
 800a634:	d201      	bcs.n	800a63a <find_volume+0x3be>
 800a636:	230d      	movs	r3, #13
 800a638:	e06a      	b.n	800a710 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a640:	615a      	str	r2, [r3, #20]
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	695a      	ldr	r2, [r3, #20]
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	2280      	movs	r2, #128	; 0x80
 800a64e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a654:	2b03      	cmp	r3, #3
 800a656:	d149      	bne.n	800a6ec <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	3334      	adds	r3, #52	; 0x34
 800a65c:	3330      	adds	r3, #48	; 0x30
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fe fb4c 	bl	8008cfc <ld_word>
 800a664:	4603      	mov	r3, r0
 800a666:	2b01      	cmp	r3, #1
 800a668:	d140      	bne.n	800a6ec <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66c:	3301      	adds	r3, #1
 800a66e:	4619      	mov	r1, r3
 800a670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a672:	f7fe fe23 	bl	80092bc <move_window>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d137      	bne.n	800a6ec <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	2200      	movs	r2, #0
 800a680:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a684:	3334      	adds	r3, #52	; 0x34
 800a686:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fe fb36 	bl	8008cfc <ld_word>
 800a690:	4603      	mov	r3, r0
 800a692:	461a      	mov	r2, r3
 800a694:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a698:	429a      	cmp	r2, r3
 800a69a:	d127      	bne.n	800a6ec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	3334      	adds	r3, #52	; 0x34
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe fb43 	bl	8008d2c <ld_dword>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <find_volume+0x49c>)
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d11e      	bne.n	800a6ec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	3334      	adds	r3, #52	; 0x34
 800a6b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe fb38 	bl	8008d2c <ld_dword>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	4b17      	ldr	r3, [pc, #92]	; (800a71c <find_volume+0x4a0>)
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d113      	bne.n	800a6ec <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	3334      	adds	r3, #52	; 0x34
 800a6c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe fb2d 	bl	8008d2c <ld_dword>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	3334      	adds	r3, #52	; 0x34
 800a6dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fb23 	bl	8008d2c <ld_dword>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ea:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a6f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a6f4:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <find_volume+0x4a4>)
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	4b08      	ldr	r3, [pc, #32]	; (800a720 <find_volume+0x4a4>)
 800a6fe:	801a      	strh	r2, [r3, #0]
 800a700:	4b07      	ldr	r3, [pc, #28]	; (800a720 <find_volume+0x4a4>)
 800a702:	881a      	ldrh	r2, [r3, #0]
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a70a:	f7fe fd6f 	bl	80091ec <clear_lock>
#endif
	return FR_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3758      	adds	r7, #88	; 0x58
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	41615252 	.word	0x41615252
 800a71c:	61417272 	.word	0x61417272
 800a720:	200004cc 	.word	0x200004cc

0800a724 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a72e:	2309      	movs	r3, #9
 800a730:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d02e      	beq.n	800a796 <validate+0x72>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02a      	beq.n	800a796 <validate+0x72>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d025      	beq.n	800a796 <validate+0x72>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	889a      	ldrh	r2, [r3, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	88db      	ldrh	r3, [r3, #6]
 800a754:	429a      	cmp	r2, r3
 800a756:	d11e      	bne.n	800a796 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe fbcc 	bl	8008efa <lock_fs>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d014      	beq.n	800a792 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fa26 	bl	8008bc0 <disk_status>
 800a774:	4603      	mov	r3, r0
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <validate+0x60>
				res = FR_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73fb      	strb	r3, [r7, #15]
 800a782:	e008      	b.n	800a796 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fbcb 	bl	8008f26 <unlock_fs>
 800a790:	e001      	b.n	800a796 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a792:	230f      	movs	r3, #15
 800a794:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <validate+0x7e>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	e000      	b.n	800a7a4 <validate+0x80>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	6013      	str	r3, [r2, #0]
	return res;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a7c6:	f107 0310 	add.w	r3, r7, #16
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff fcbb 	bl	800a146 <get_ldnumber>
 800a7d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	da01      	bge.n	800a7dc <f_mount+0x28>
 800a7d8:	230b      	movs	r3, #11
 800a7da:	e048      	b.n	800a86e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a7dc:	4a26      	ldr	r2, [pc, #152]	; (800a878 <f_mount+0xc4>)
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00f      	beq.n	800a80c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a7ec:	69b8      	ldr	r0, [r7, #24]
 800a7ee:	f7fe fcfd 	bl	80091ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 ffe8 	bl	800b7cc <ff_del_syncobj>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <f_mount+0x52>
 800a802:	2302      	movs	r3, #2
 800a804:	e033      	b.n	800a86e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	2200      	movs	r2, #0
 800a80a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00f      	beq.n	800a832 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	330c      	adds	r3, #12
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f000 ffac 	bl	800b780 <ff_cre_syncobj>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <f_mount+0x7e>
 800a82e:	2302      	movs	r3, #2
 800a830:	e01d      	b.n	800a86e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4910      	ldr	r1, [pc, #64]	; (800a878 <f_mount+0xc4>)
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <f_mount+0x94>
 800a842:	79fb      	ldrb	r3, [r7, #7]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d001      	beq.n	800a84c <f_mount+0x98>
 800a848:	2300      	movs	r3, #0
 800a84a:	e010      	b.n	800a86e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a84c:	f107 010c 	add.w	r1, r7, #12
 800a850:	f107 0308 	add.w	r3, r7, #8
 800a854:	2200      	movs	r2, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f7ff fd10 	bl	800a27c <find_volume>
 800a85c:	4603      	mov	r3, r0
 800a85e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	7dfa      	ldrb	r2, [r7, #23]
 800a864:	4611      	mov	r1, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fb5d 	bl	8008f26 <unlock_fs>
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3720      	adds	r7, #32
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200004c8 	.word	0x200004c8

0800a87c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b098      	sub	sp, #96	; 0x60
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	4613      	mov	r3, r2
 800a888:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <f_open+0x18>
 800a890:	2309      	movs	r3, #9
 800a892:	e1b4      	b.n	800abfe <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a89a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a89c:	79fa      	ldrb	r2, [r7, #7]
 800a89e:	f107 0110 	add.w	r1, r7, #16
 800a8a2:	f107 0308 	add.w	r3, r7, #8
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff fce8 	bl	800a27c <find_volume>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a8b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 8191 	bne.w	800abde <f_open+0x362>
		dj.obj.fs = fs;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	f107 0314 	add.w	r3, r7, #20
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff fbcb 	bl	800a064 <follow_path>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11a      	bne.n	800a912 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a8dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8e0:	b25b      	sxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	da03      	bge.n	800a8ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800a8e6:	2306      	movs	r3, #6
 800a8e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8ec:	e011      	b.n	800a912 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	f023 0301 	bic.w	r3, r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bf14      	ite	ne
 800a8f8:	2301      	movne	r3, #1
 800a8fa:	2300      	moveq	r3, #0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	461a      	mov	r2, r3
 800a900:	f107 0314 	add.w	r3, r7, #20
 800a904:	4611      	mov	r1, r2
 800a906:	4618      	mov	r0, r3
 800a908:	f7fe fb28 	bl	8008f5c <chk_lock>
 800a90c:	4603      	mov	r3, r0
 800a90e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	f003 031c 	and.w	r3, r3, #28
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d07f      	beq.n	800aa1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a91c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a920:	2b00      	cmp	r3, #0
 800a922:	d017      	beq.n	800a954 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a928:	2b04      	cmp	r3, #4
 800a92a:	d10e      	bne.n	800a94a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a92c:	f7fe fb72 	bl	8009014 <enq_lock>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <f_open+0xc8>
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff faae 	bl	8009e9c <dir_register>
 800a940:	4603      	mov	r3, r0
 800a942:	e000      	b.n	800a946 <f_open+0xca>
 800a944:	2312      	movs	r3, #18
 800a946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	f043 0308 	orr.w	r3, r3, #8
 800a950:	71fb      	strb	r3, [r7, #7]
 800a952:	e010      	b.n	800a976 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a954:	7ebb      	ldrb	r3, [r7, #26]
 800a956:	f003 0311 	and.w	r3, r3, #17
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <f_open+0xea>
					res = FR_DENIED;
 800a95e:	2307      	movs	r3, #7
 800a960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a964:	e007      	b.n	800a976 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <f_open+0xfa>
 800a970:	2308      	movs	r3, #8
 800a972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d168      	bne.n	800aa50 <f_open+0x1d4>
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	f003 0308 	and.w	r3, r3, #8
 800a984:	2b00      	cmp	r3, #0
 800a986:	d063      	beq.n	800aa50 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a988:	f004 fc7c 	bl	800f284 <get_fattime>
 800a98c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a990:	330e      	adds	r3, #14
 800a992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a994:	4618      	mov	r0, r3
 800a996:	f7fe fa07 	bl	8008da8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99c:	3316      	adds	r3, #22
 800a99e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe fa01 	bl	8008da8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a8:	330b      	adds	r3, #11
 800a9aa:	2220      	movs	r2, #32
 800a9ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff f980 	bl	8009cba <ld_clust>
 800a9ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff f998 	bl	8009cf8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ca:	331c      	adds	r3, #28
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe f9ea 	bl	8008da8 <st_dword>
					fs->wflag = 1;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d037      	beq.n	800aa50 <f_open+0x1d4>
						dw = fs->winsect;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a9e6:	f107 0314 	add.w	r3, r7, #20
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe feab 	bl	800974a <remove_chain>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a9fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d126      	bne.n	800aa50 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe fc58 	bl	80092bc <move_window>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa16:	3a01      	subs	r2, #1
 800aa18:	611a      	str	r2, [r3, #16]
 800aa1a:	e019      	b.n	800aa50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d115      	bne.n	800aa50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa24:	7ebb      	ldrb	r3, [r7, #26]
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aa2e:	2304      	movs	r3, #4
 800aa30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa34:	e00c      	b.n	800aa50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	f003 0302 	and.w	r3, r3, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d007      	beq.n	800aa50 <f_open+0x1d4>
 800aa40:	7ebb      	ldrb	r3, [r7, #26]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <f_open+0x1d4>
						res = FR_DENIED;
 800aa4a:	2307      	movs	r3, #7
 800aa4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d128      	bne.n	800aaaa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	f003 0308 	and.w	r3, r3, #8
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d003      	beq.n	800aa6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa62:	79fb      	ldrb	r3, [r7, #7]
 800aa64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aa72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa78:	79fb      	ldrb	r3, [r7, #7]
 800aa7a:	f023 0301 	bic.w	r3, r3, #1
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	bf14      	ite	ne
 800aa82:	2301      	movne	r3, #1
 800aa84:	2300      	moveq	r3, #0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	461a      	mov	r2, r3
 800aa8a:	f107 0314 	add.w	r3, r7, #20
 800aa8e:	4611      	mov	r1, r2
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fae1 	bl	8009058 <inc_lock>
 800aa96:	4602      	mov	r2, r0
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <f_open+0x22e>
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aaaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f040 8095 	bne.w	800abde <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aab8:	4611      	mov	r1, r2
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7ff f8fd 	bl	8009cba <ld_clust>
 800aac0:	4602      	mov	r2, r0
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	331c      	adds	r3, #28
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe f92e 	bl	8008d2c <ld_dword>
 800aad0:	4602      	mov	r2, r0
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	88da      	ldrh	r2, [r3, #6]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	79fa      	ldrb	r2, [r7, #7]
 800aaee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3330      	adds	r3, #48	; 0x30
 800ab06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe f998 	bl	8008e42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ab12:	79fb      	ldrb	r3, [r7, #7]
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d060      	beq.n	800abde <f_open+0x362>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d05c      	beq.n	800abde <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	895b      	ldrh	r3, [r3, #10]
 800ab30:	025b      	lsls	r3, r3, #9
 800ab32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab40:	e016      	b.n	800ab70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fc73 	bl	8009432 <get_fat>
 800ab4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ab4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d802      	bhi.n	800ab5a <f_open+0x2de>
 800ab54:	2302      	movs	r3, #2
 800ab56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab60:	d102      	bne.n	800ab68 <f_open+0x2ec>
 800ab62:	2301      	movs	r3, #1
 800ab64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d103      	bne.n	800ab80 <f_open+0x304>
 800ab78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d8e0      	bhi.n	800ab42 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d127      	bne.n	800abde <f_open+0x362>
 800ab8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d022      	beq.n	800abde <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe fc29 	bl	80093f4 <clust2sect>
 800aba2:	6478      	str	r0, [r7, #68]	; 0x44
 800aba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d103      	bne.n	800abb2 <f_open+0x336>
						res = FR_INT_ERR;
 800abaa:	2302      	movs	r3, #2
 800abac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abb0:	e015      	b.n	800abde <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abb4:	0a5a      	lsrs	r2, r3, #9
 800abb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abb8:	441a      	add	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	7858      	ldrb	r0, [r3, #1]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6a1a      	ldr	r2, [r3, #32]
 800abcc:	2301      	movs	r3, #1
 800abce:	f7fe f837 	bl	8008c40 <disk_read>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <f_open+0x362>
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800abde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <f_open+0x370>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800abf2:	4611      	mov	r1, r2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe f996 	bl	8008f26 <unlock_fs>
 800abfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3760      	adds	r7, #96	; 0x60
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b08c      	sub	sp, #48	; 0x30
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f107 0210 	add.w	r2, r7, #16
 800ac24:	4611      	mov	r1, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fd7c 	bl	800a724 <validate>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d107      	bne.n	800ac4a <f_write+0x44>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	7d5b      	ldrb	r3, [r3, #21]
 800ac3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d009      	beq.n	800ac5e <f_write+0x58>
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ac50:	4611      	mov	r1, r2
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe f967 	bl	8008f26 <unlock_fs>
 800ac58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac5c:	e173      	b.n	800af46 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	7d1b      	ldrb	r3, [r3, #20]
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <f_write+0x72>
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2107      	movs	r1, #7
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe f959 	bl	8008f26 <unlock_fs>
 800ac74:	2307      	movs	r3, #7
 800ac76:	e166      	b.n	800af46 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	699a      	ldr	r2, [r3, #24]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	441a      	add	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	f080 814b 	bcs.w	800af20 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	43db      	mvns	r3, r3
 800ac90:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac92:	e145      	b.n	800af20 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	699b      	ldr	r3, [r3, #24]
 800ac98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f040 8101 	bne.w	800aea4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	0a5b      	lsrs	r3, r3, #9
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	8952      	ldrh	r2, [r2, #10]
 800acac:	3a01      	subs	r2, #1
 800acae:	4013      	ands	r3, r2
 800acb0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d14d      	bne.n	800ad54 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10c      	bne.n	800acda <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d11a      	bne.n	800ad02 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2100      	movs	r1, #0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fd9f 	bl	8009814 <create_chain>
 800acd6:	62b8      	str	r0, [r7, #40]	; 0x28
 800acd8:	e013      	b.n	800ad02 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d007      	beq.n	800acf2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	4619      	mov	r1, r3
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7fe fe2b 	bl	8009944 <clmt_clust>
 800acee:	62b8      	str	r0, [r7, #40]	; 0x28
 800acf0:	e007      	b.n	800ad02 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f7fe fd8a 	bl	8009814 <create_chain>
 800ad00:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8110 	beq.w	800af2a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d109      	bne.n	800ad24 <f_write+0x11e>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2202      	movs	r2, #2
 800ad14:	755a      	strb	r2, [r3, #21]
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	2102      	movs	r1, #2
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe f903 	bl	8008f26 <unlock_fs>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e110      	b.n	800af46 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad2a:	d109      	bne.n	800ad40 <f_write+0x13a>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	755a      	strb	r2, [r3, #21]
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2101      	movs	r1, #1
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe f8f5 	bl	8008f26 <unlock_fs>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e102      	b.n	800af46 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad44:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d102      	bne.n	800ad54 <f_write+0x14e>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad52:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	7d1b      	ldrb	r3, [r3, #20]
 800ad58:	b25b      	sxtb	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	da1d      	bge.n	800ad9a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	7858      	ldrb	r0, [r3, #1]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1a      	ldr	r2, [r3, #32]
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f7fd ff87 	bl	8008c80 <disk_write>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d009      	beq.n	800ad8c <f_write+0x186>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	755a      	strb	r2, [r3, #21]
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2101      	movs	r1, #1
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe f8cf 	bl	8008f26 <unlock_fs>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e0dc      	b.n	800af46 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	7d1b      	ldrb	r3, [r3, #20]
 800ad90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	4619      	mov	r1, r3
 800ada2:	4610      	mov	r0, r2
 800ada4:	f7fe fb26 	bl	80093f4 <clust2sect>
 800ada8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d109      	bne.n	800adc4 <f_write+0x1be>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2202      	movs	r2, #2
 800adb4:	755a      	strb	r2, [r3, #21]
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2102      	movs	r1, #2
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe f8b3 	bl	8008f26 <unlock_fs>
 800adc0:	2302      	movs	r3, #2
 800adc2:	e0c0      	b.n	800af46 <f_write+0x340>
			sect += csect;
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	4413      	add	r3, r2
 800adca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	0a5b      	lsrs	r3, r3, #9
 800add0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d041      	beq.n	800ae5c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	4413      	add	r3, r2
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	8952      	ldrh	r2, [r2, #10]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d905      	bls.n	800adf2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	895b      	ldrh	r3, [r3, #10]
 800adea:	461a      	mov	r2, r3
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	7858      	ldrb	r0, [r3, #1]
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	69f9      	ldr	r1, [r7, #28]
 800adfc:	f7fd ff40 	bl	8008c80 <disk_write>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d009      	beq.n	800ae1a <f_write+0x214>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	755a      	strb	r2, [r3, #21]
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2101      	movs	r1, #1
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe f888 	bl	8008f26 <unlock_fs>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e095      	b.n	800af46 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1a      	ldr	r2, [r3, #32]
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	6a3a      	ldr	r2, [r7, #32]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d915      	bls.n	800ae54 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6a1a      	ldr	r2, [r3, #32]
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	025b      	lsls	r3, r3, #9
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7fd ffdd 	bl	8008e00 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	7d1b      	ldrb	r3, [r3, #20]
 800ae4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	025b      	lsls	r3, r3, #9
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae5a:	e044      	b.n	800aee6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	697a      	ldr	r2, [r7, #20]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d01b      	beq.n	800ae9e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	699a      	ldr	r2, [r3, #24]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d215      	bcs.n	800ae9e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	7858      	ldrb	r0, [r3, #1]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	f7fd fede 	bl	8008c40 <disk_read>
 800ae84:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d009      	beq.n	800ae9e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	755a      	strb	r2, [r3, #21]
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	2101      	movs	r1, #1
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fe f846 	bl	8008f26 <unlock_fs>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e053      	b.n	800af46 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aeb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d901      	bls.n	800aebe <f_write+0x2b8>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aecc:	4413      	add	r3, r2
 800aece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed0:	69f9      	ldr	r1, [r7, #28]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fd ff94 	bl	8008e00 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	7d1b      	ldrb	r3, [r3, #20]
 800aedc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	4413      	add	r3, r2
 800aeec:	61fb      	str	r3, [r7, #28]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	699a      	ldr	r2, [r3, #24]
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	441a      	add	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	619a      	str	r2, [r3, #24]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	429a      	cmp	r2, r3
 800af04:	bf38      	it	cc
 800af06:	461a      	movcc	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	60da      	str	r2, [r3, #12]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	441a      	add	r2, r3
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f47f aeb6 	bne.w	800ac94 <f_write+0x8e>
 800af28:	e000      	b.n	800af2c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af2a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	7d1b      	ldrb	r3, [r3, #20]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	b2da      	uxtb	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2100      	movs	r1, #0
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fd fff1 	bl	8008f26 <unlock_fs>
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3730      	adds	r7, #48	; 0x30
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b086      	sub	sp, #24
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f107 0208 	add.w	r2, r7, #8
 800af5c:	4611      	mov	r1, r2
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fbe0 	bl	800a724 <validate>
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d16d      	bne.n	800b04a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7d1b      	ldrb	r3, [r3, #20]
 800af72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af76:	2b00      	cmp	r3, #0
 800af78:	d067      	beq.n	800b04a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	7d1b      	ldrb	r3, [r3, #20]
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	da1a      	bge.n	800afba <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	7858      	ldrb	r0, [r3, #1]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1a      	ldr	r2, [r3, #32]
 800af92:	2301      	movs	r3, #1
 800af94:	f7fd fe74 	bl	8008c80 <disk_write>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <f_sync+0x5e>
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2101      	movs	r1, #1
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fd ffbf 	bl	8008f26 <unlock_fs>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e055      	b.n	800b058 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7d1b      	ldrb	r3, [r3, #20]
 800afb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800afba:	f004 f963 	bl	800f284 <get_fattime>
 800afbe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f7fe f977 	bl	80092bc <move_window>
 800afce:	4603      	mov	r3, r0
 800afd0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d138      	bne.n	800b04a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afdc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	330b      	adds	r3, #11
 800afe2:	781a      	ldrb	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	330b      	adds	r3, #11
 800afe8:	f042 0220 	orr.w	r2, r2, #32
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	461a      	mov	r2, r3
 800affa:	68f9      	ldr	r1, [r7, #12]
 800affc:	f7fe fe7c 	bl	8009cf8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f103 021c 	add.w	r2, r3, #28
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f7fd fecb 	bl	8008da8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3316      	adds	r3, #22
 800b016:	6939      	ldr	r1, [r7, #16]
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fd fec5 	bl	8008da8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3312      	adds	r3, #18
 800b022:	2100      	movs	r1, #0
 800b024:	4618      	mov	r0, r3
 800b026:	f7fd fea4 	bl	8008d72 <st_word>
					fs->wflag = 1;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2201      	movs	r2, #1
 800b02e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe f970 	bl	8009318 <sync_fs>
 800b038:	4603      	mov	r3, r0
 800b03a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7d1b      	ldrb	r3, [r3, #20]
 800b040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b044:	b2da      	uxtb	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	7dfa      	ldrb	r2, [r7, #23]
 800b04e:	4611      	mov	r1, r2
 800b050:	4618      	mov	r0, r3
 800b052:	f7fd ff68 	bl	8008f26 <unlock_fs>
 800b056:	7dfb      	ldrb	r3, [r7, #23]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff ff70 	bl	800af4e <f_sync>
 800b06e:	4603      	mov	r3, r0
 800b070:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d11d      	bne.n	800b0b4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f107 0208 	add.w	r2, r7, #8
 800b07e:	4611      	mov	r1, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fb4f 	bl	800a724 <validate>
 800b086:	4603      	mov	r3, r0
 800b088:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d111      	bne.n	800b0b4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	4618      	mov	r0, r3
 800b096:	f7fe f86d 	bl	8009174 <dec_lock>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d102      	bne.n	800b0aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fd ff39 	bl	8008f26 <unlock_fs>
#endif
		}
	}
	return res;
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b090      	sub	sp, #64	; 0x40
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f107 0208 	add.w	r2, r7, #8
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff fb27 	bl	800a724 <validate>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b0dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d103      	bne.n	800b0ec <f_lseek+0x2e>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7d5b      	ldrb	r3, [r3, #21]
 800b0e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b0ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d009      	beq.n	800b108 <f_lseek+0x4a>
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fd ff12 	bl	8008f26 <unlock_fs>
 800b102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b106:	e229      	b.n	800b55c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 80ea 	beq.w	800b2e6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b118:	d164      	bne.n	800b1e4 <f_lseek+0x126>
			tbl = fp->cltbl;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	1d1a      	adds	r2, r3, #4
 800b124:	627a      	str	r2, [r7, #36]	; 0x24
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	2302      	movs	r3, #2
 800b12c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	2b00      	cmp	r3, #0
 800b138:	d044      	beq.n	800b1c4 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	613b      	str	r3, [r7, #16]
 800b13e:	2300      	movs	r3, #0
 800b140:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	3302      	adds	r3, #2
 800b146:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	3301      	adds	r3, #1
 800b150:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe f96b 	bl	8009432 <get_fat>
 800b15c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	2b01      	cmp	r3, #1
 800b162:	d809      	bhi.n	800b178 <f_lseek+0xba>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	755a      	strb	r2, [r3, #21]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2102      	movs	r1, #2
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fd fed9 	bl	8008f26 <unlock_fs>
 800b174:	2302      	movs	r3, #2
 800b176:	e1f1      	b.n	800b55c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b17e:	d109      	bne.n	800b194 <f_lseek+0xd6>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	755a      	strb	r2, [r3, #21]
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2101      	movs	r1, #1
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fd fecb 	bl	8008f26 <unlock_fs>
 800b190:	2301      	movs	r3, #1
 800b192:	e1e3      	b.n	800b55c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3301      	adds	r3, #1
 800b198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d0d4      	beq.n	800b148 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d809      	bhi.n	800b1ba <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	1d1a      	adds	r2, r3, #4
 800b1aa:	627a      	str	r2, [r7, #36]	; 0x24
 800b1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	1d1a      	adds	r2, r3, #4
 800b1b4:	627a      	str	r2, [r7, #36]	; 0x24
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d3ba      	bcc.n	800b13a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d803      	bhi.n	800b1dc <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	e1b6      	b.n	800b54a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b1dc:	2311      	movs	r3, #17
 800b1de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b1e2:	e1b2      	b.n	800b54a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d902      	bls.n	800b1f4 <f_lseek+0x136>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 81a4 	beq.w	800b54a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	3b01      	subs	r3, #1
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7fe fb9b 	bl	8009944 <clmt_clust>
 800b20e:	4602      	mov	r2, r0
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	4619      	mov	r1, r3
 800b21c:	4610      	mov	r0, r2
 800b21e:	f7fe f8e9 	bl	80093f4 <clust2sect>
 800b222:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d109      	bne.n	800b23e <f_lseek+0x180>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2202      	movs	r2, #2
 800b22e:	755a      	strb	r2, [r3, #21]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2102      	movs	r1, #2
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd fe76 	bl	8008f26 <unlock_fs>
 800b23a:	2302      	movs	r3, #2
 800b23c:	e18e      	b.n	800b55c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	3b01      	subs	r3, #1
 800b242:	0a5b      	lsrs	r3, r3, #9
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	8952      	ldrh	r2, [r2, #10]
 800b248:	3a01      	subs	r2, #1
 800b24a:	4013      	ands	r3, r2
 800b24c:	69ba      	ldr	r2, [r7, #24]
 800b24e:	4413      	add	r3, r2
 800b250:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8175 	beq.w	800b54a <f_lseek+0x48c>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	69ba      	ldr	r2, [r7, #24]
 800b266:	429a      	cmp	r2, r3
 800b268:	f000 816f 	beq.w	800b54a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7d1b      	ldrb	r3, [r3, #20]
 800b270:	b25b      	sxtb	r3, r3
 800b272:	2b00      	cmp	r3, #0
 800b274:	da1d      	bge.n	800b2b2 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	7858      	ldrb	r0, [r3, #1]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a1a      	ldr	r2, [r3, #32]
 800b284:	2301      	movs	r3, #1
 800b286:	f7fd fcfb 	bl	8008c80 <disk_write>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d009      	beq.n	800b2a4 <f_lseek+0x1e6>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	755a      	strb	r2, [r3, #21]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2101      	movs	r1, #1
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fd fe43 	bl	8008f26 <unlock_fs>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e15b      	b.n	800b55c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	7d1b      	ldrb	r3, [r3, #20]
 800b2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	7858      	ldrb	r0, [r3, #1]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2bc:	2301      	movs	r3, #1
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	f7fd fcbe 	bl	8008c40 <disk_read>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d009      	beq.n	800b2de <f_lseek+0x220>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	755a      	strb	r2, [r3, #21]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2101      	movs	r1, #1
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fd fe26 	bl	8008f26 <unlock_fs>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e13e      	b.n	800b55c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	621a      	str	r2, [r3, #32]
 800b2e4:	e131      	b.n	800b54a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d908      	bls.n	800b302 <f_lseek+0x244>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	7d1b      	ldrb	r3, [r3, #20]
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	637b      	str	r3, [r7, #52]	; 0x34
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b310:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 80c0 	beq.w	800b49a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	895b      	ldrh	r3, [r3, #10]
 800b31e:	025b      	lsls	r3, r3, #9
 800b320:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01b      	beq.n	800b360 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	1e5a      	subs	r2, r3, #1
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	1e59      	subs	r1, r3, #1
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d30f      	bcc.n	800b360 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	1e5a      	subs	r2, r3, #1
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	425b      	negs	r3, r3
 800b348:	401a      	ands	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b35e:	e02c      	b.n	800b3ba <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d123      	bne.n	800b3b4 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2100      	movs	r1, #0
 800b370:	4618      	mov	r0, r3
 800b372:	f7fe fa4f 	bl	8009814 <create_chain>
 800b376:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d109      	bne.n	800b392 <f_lseek+0x2d4>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2202      	movs	r2, #2
 800b382:	755a      	strb	r2, [r3, #21]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2102      	movs	r1, #2
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fd fdcc 	bl	8008f26 <unlock_fs>
 800b38e:	2302      	movs	r3, #2
 800b390:	e0e4      	b.n	800b55c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b398:	d109      	bne.n	800b3ae <f_lseek+0x2f0>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	755a      	strb	r2, [r3, #21]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fd fdbe 	bl	8008f26 <unlock_fs>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e0d6      	b.n	800b55c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d06c      	beq.n	800b49a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800b3c0:	e044      	b.n	800b44c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	603b      	str	r3, [r7, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	699a      	ldr	r2, [r3, #24]
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	441a      	add	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	7d1b      	ldrb	r3, [r3, #20]
 800b3da:	f003 0302 	and.w	r3, r3, #2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe fa14 	bl	8009814 <create_chain>
 800b3ec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d108      	bne.n	800b406 <f_lseek+0x348>
							ofs = 0; break;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	e02c      	b.n	800b454 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe f817 	bl	8009432 <get_fat>
 800b404:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b40c:	d109      	bne.n	800b422 <f_lseek+0x364>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	755a      	strb	r2, [r3, #21]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2101      	movs	r1, #1
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fd fd84 	bl	8008f26 <unlock_fs>
 800b41e:	2301      	movs	r3, #1
 800b420:	e09c      	b.n	800b55c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b424:	2b01      	cmp	r3, #1
 800b426:	d904      	bls.n	800b432 <f_lseek+0x374>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b42e:	429a      	cmp	r2, r3
 800b430:	d309      	bcc.n	800b446 <f_lseek+0x388>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2202      	movs	r2, #2
 800b436:	755a      	strb	r2, [r3, #21]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2102      	movs	r1, #2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fd fd72 	bl	8008f26 <unlock_fs>
 800b442:	2302      	movs	r3, #2
 800b444:	e08a      	b.n	800b55c <f_lseek+0x49e>
					fp->clust = clst;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b44a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	429a      	cmp	r2, r3
 800b452:	d8b6      	bhi.n	800b3c2 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	699a      	ldr	r2, [r3, #24]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	441a      	add	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b466:	2b00      	cmp	r3, #0
 800b468:	d017      	beq.n	800b49a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd ffc0 	bl	80093f4 <clust2sect>
 800b474:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d109      	bne.n	800b490 <f_lseek+0x3d2>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	755a      	strb	r2, [r3, #21]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2102      	movs	r1, #2
 800b486:	4618      	mov	r0, r3
 800b488:	f7fd fd4d 	bl	8008f26 <unlock_fs>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e065      	b.n	800b55c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	0a5b      	lsrs	r3, r3, #9
 800b494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b496:	4413      	add	r3, r2
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	699a      	ldr	r2, [r3, #24]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d90a      	bls.n	800b4bc <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	699a      	ldr	r2, [r3, #24]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	7d1b      	ldrb	r3, [r3, #20]
 800b4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d040      	beq.n	800b54a <f_lseek+0x48c>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6a1b      	ldr	r3, [r3, #32]
 800b4cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d03b      	beq.n	800b54a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7d1b      	ldrb	r3, [r3, #20]
 800b4d6:	b25b      	sxtb	r3, r3
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	da1d      	bge.n	800b518 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	7858      	ldrb	r0, [r3, #1]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1a      	ldr	r2, [r3, #32]
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f7fd fbc8 	bl	8008c80 <disk_write>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <f_lseek+0x44c>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	755a      	strb	r2, [r3, #21]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2101      	movs	r1, #1
 800b500:	4618      	mov	r0, r3
 800b502:	f7fd fd10 	bl	8008f26 <unlock_fs>
 800b506:	2301      	movs	r3, #1
 800b508:	e028      	b.n	800b55c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7d1b      	ldrb	r3, [r3, #20]
 800b50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b512:	b2da      	uxtb	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	7858      	ldrb	r0, [r3, #1]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b522:	2301      	movs	r3, #1
 800b524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b526:	f7fd fb8b 	bl	8008c40 <disk_read>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d009      	beq.n	800b544 <f_lseek+0x486>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	755a      	strb	r2, [r3, #21]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2101      	movs	r1, #1
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fd fcf3 	bl	8008f26 <unlock_fs>
 800b540:	2301      	movs	r3, #1
 800b542:	e00b      	b.n	800b55c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b548:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b550:	4611      	mov	r1, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f7fd fce7 	bl	8008f26 <unlock_fs>
 800b558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3740      	adds	r7, #64	; 0x40
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b09e      	sub	sp, #120	; 0x78
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b570:	f107 010c 	add.w	r1, r7, #12
 800b574:	1d3b      	adds	r3, r7, #4
 800b576:	2202      	movs	r2, #2
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe fe7f 	bl	800a27c <find_volume>
 800b57e:	4603      	mov	r3, r0
 800b580:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b588:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f040 808e 	bne.w	800b6ae <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b598:	4611      	mov	r1, r2
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fd62 	bl	800a064 <follow_path>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b5a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d108      	bne.n	800b5c0 <f_unlink+0x5c>
 800b5ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b5b2:	2102      	movs	r1, #2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fd fcd1 	bl	8008f5c <chk_lock>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b5c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d172      	bne.n	800b6ae <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b5c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5cc:	b25b      	sxtb	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da03      	bge.n	800b5da <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b5d2:	2306      	movs	r3, #6
 800b5d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b5d8:	e008      	b.n	800b5ec <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b5da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b5e6:	2307      	movs	r3, #7
 800b5e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b5ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d134      	bne.n	800b65e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fb5d 	bl	8009cba <ld_clust>
 800b600:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b602:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b606:	f003 0310 	and.w	r3, r3, #16
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d027      	beq.n	800b65e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b614:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b616:	f107 0310 	add.w	r3, r7, #16
 800b61a:	2100      	movs	r1, #0
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe f9c5 	bl	80099ac <dir_sdi>
 800b622:	4603      	mov	r3, r0
 800b624:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b628:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d116      	bne.n	800b65e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b630:	f107 0310 	add.w	r3, r7, #16
 800b634:	2100      	movs	r1, #0
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fb7e 	bl	8009d38 <dir_read>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b642:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b646:	2b00      	cmp	r3, #0
 800b648:	d102      	bne.n	800b650 <f_unlink+0xec>
 800b64a:	2307      	movs	r3, #7
 800b64c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b650:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b654:	2b04      	cmp	r3, #4
 800b656:	d102      	bne.n	800b65e <f_unlink+0xfa>
 800b658:	2300      	movs	r3, #0
 800b65a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b65e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b662:	2b00      	cmp	r3, #0
 800b664:	d123      	bne.n	800b6ae <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe fc48 	bl	8009f00 <dir_remove>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b676:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10c      	bne.n	800b698 <f_unlink+0x134>
 800b67e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b684:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b688:	2200      	movs	r2, #0
 800b68a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fe f85c 	bl	800974a <remove_chain>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b698:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <f_unlink+0x14a>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fd fe38 	bl	8009318 <sync_fs>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fd fc35 	bl	8008f26 <unlock_fs>
 800b6bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3778      	adds	r7, #120	; 0x78
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b6de:	4b1f      	ldr	r3, [pc, #124]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b6e0:	7a5b      	ldrb	r3, [r3, #9]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d131      	bne.n	800b74c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b6e8:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b6ea:	7a5b      	ldrb	r3, [r3, #9]
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	4b1a      	ldr	r3, [pc, #104]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b6f6:	4b19      	ldr	r3, [pc, #100]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b6f8:	7a5b      	ldrb	r3, [r3, #9]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	4a17      	ldr	r2, [pc, #92]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b706:	4b15      	ldr	r3, [pc, #84]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b708:	7a5b      	ldrb	r3, [r3, #9]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	461a      	mov	r2, r3
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b710:	4413      	add	r3, r2
 800b712:	79fa      	ldrb	r2, [r7, #7]
 800b714:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b716:	4b11      	ldr	r3, [pc, #68]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b718:	7a5b      	ldrb	r3, [r3, #9]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	b2d1      	uxtb	r1, r2
 800b720:	4a0e      	ldr	r2, [pc, #56]	; (800b75c <FATFS_LinkDriverEx+0x94>)
 800b722:	7251      	strb	r1, [r2, #9]
 800b724:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b726:	7dbb      	ldrb	r3, [r7, #22]
 800b728:	3330      	adds	r3, #48	; 0x30
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	3301      	adds	r3, #1
 800b734:	223a      	movs	r2, #58	; 0x3a
 800b736:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	3302      	adds	r3, #2
 800b73c:	222f      	movs	r2, #47	; 0x2f
 800b73e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	3303      	adds	r3, #3
 800b744:	2200      	movs	r2, #0
 800b746:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	371c      	adds	r7, #28
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	200004f0 	.word	0x200004f0

0800b760 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b76a:	2200      	movs	r2, #0
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7ff ffaa 	bl	800b6c8 <FATFS_LinkDriverEx>
 800b774:	4603      	mov	r3, r0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
	...

0800b780 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b780:	b590      	push	{r4, r7, lr}
 800b782:	b089      	sub	sp, #36	; 0x24
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	6039      	str	r1, [r7, #0]
 800b78a:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 800b78c:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <ff_cre_syncobj+0x48>)
 800b78e:	f107 040c 	add.w	r4, r7, #12
 800b792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    *sobj = osSemaphoreNew(1, 1, osSemaphore(SEM));
 800b798:	f107 030c 	add.w	r3, r7, #12
 800b79c:	461a      	mov	r2, r3
 800b79e:	2101      	movs	r1, #1
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	f000 f955 	bl	800ba50 <osSemaphoreNew>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bf14      	ite	ne
 800b7b4:	2301      	movne	r3, #1
 800b7b6:	2300      	moveq	r3, #0
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	61fb      	str	r3, [r7, #28]

    return ret;
 800b7bc:	69fb      	ldr	r3, [r7, #28]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3724      	adds	r7, #36	; 0x24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd90      	pop	{r4, r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	08013678 	.word	0x08013678

0800b7cc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fa97 	bl	800bd08 <osSemaphoreDelete>
    return 1;
 800b7da:	2301      	movs	r3, #1
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b7f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f9c9 	bl	800bb8c <osSemaphoreAcquire>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <ff_req_grant+0x20>
  {
    ret = 1;
 800b800:	2301      	movs	r3, #1
 800b802:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b804:	68fb      	ldr	r3, [r7, #12]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b082      	sub	sp, #8
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa1e 	bl	800bc58 <osSemaphoreRelease>
}
 800b81c:	bf00      	nop
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b82a:	f3ef 8305 	mrs	r3, IPSR
 800b82e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b830:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10f      	bne.n	800b856 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b836:	f3ef 8310 	mrs	r3, PRIMASK
 800b83a:	607b      	str	r3, [r7, #4]
  return(result);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d109      	bne.n	800b856 <osKernelInitialize+0x32>
 800b842:	4b11      	ldr	r3, [pc, #68]	; (800b888 <osKernelInitialize+0x64>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b02      	cmp	r3, #2
 800b848:	d109      	bne.n	800b85e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b84a:	f3ef 8311 	mrs	r3, BASEPRI
 800b84e:	603b      	str	r3, [r7, #0]
  return(result);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b856:	f06f 0305 	mvn.w	r3, #5
 800b85a:	60fb      	str	r3, [r7, #12]
 800b85c:	e00f      	b.n	800b87e <osKernelInitialize+0x5a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b85e:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <osKernelInitialize+0x64>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d108      	bne.n	800b878 <osKernelInitialize+0x54>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
 800b866:	4809      	ldr	r0, [pc, #36]	; (800b88c <osKernelInitialize+0x68>)
 800b868:	f003 fc34 	bl	800f0d4 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800b86c:	4b06      	ldr	r3, [pc, #24]	; (800b888 <osKernelInitialize+0x64>)
 800b86e:	2201      	movs	r2, #1
 800b870:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]
 800b876:	e002      	b.n	800b87e <osKernelInitialize+0x5a>
    } else {
      stat = osError;
 800b878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b87c:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b87e:	68fb      	ldr	r3, [r7, #12]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	2000054c 	.word	0x2000054c
 800b88c:	20000424 	.word	0x20000424

0800b890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b896:	f3ef 8305 	mrs	r3, IPSR
 800b89a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b89c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10f      	bne.n	800b8c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a6:	607b      	str	r3, [r7, #4]
  return(result);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d109      	bne.n	800b8c2 <osKernelStart+0x32>
 800b8ae:	4b11      	ldr	r3, [pc, #68]	; (800b8f4 <osKernelStart+0x64>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d109      	bne.n	800b8ca <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b8b6:	f3ef 8311 	mrs	r3, BASEPRI
 800b8ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <osKernelStart+0x3a>
    stat = osErrorISR;
 800b8c2:	f06f 0305 	mvn.w	r3, #5
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	e00e      	b.n	800b8e8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800b8ca:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <osKernelStart+0x64>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d107      	bne.n	800b8e2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800b8d2:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <osKernelStart+0x64>)
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b8d8:	f001 fe30 	bl	800d53c <vTaskStartScheduler>
      stat = osOK;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]
 800b8e0:	e002      	b.n	800b8e8 <osKernelStart+0x58>
    } else {
      stat = osError;
 800b8e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	2000054c 	.word	0x2000054c

0800b8f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b092      	sub	sp, #72	; 0x48
 800b8fc:	af04      	add	r7, sp, #16
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b908:	f3ef 8305 	mrs	r3, IPSR
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800b910:	2b00      	cmp	r3, #0
 800b912:	f040 8095 	bne.w	800ba40 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b916:	f3ef 8310 	mrs	r3, PRIMASK
 800b91a:	623b      	str	r3, [r7, #32]
  return(result);
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f040 808e 	bne.w	800ba40 <osThreadNew+0x148>
 800b924:	4b49      	ldr	r3, [pc, #292]	; (800ba4c <osThreadNew+0x154>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d106      	bne.n	800b93a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b92c:	f3ef 8311 	mrs	r3, BASEPRI
 800b930:	61fb      	str	r3, [r7, #28]
  return(result);
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 8083 	bne.w	800ba40 <osThreadNew+0x148>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d07f      	beq.n	800ba40 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800b940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b944:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b946:	2318      	movs	r3, #24
 800b948:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b94a:	2300      	movs	r3, #0
 800b94c:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b94e:	f107 031b 	add.w	r3, r7, #27
 800b952:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b958:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d045      	beq.n	800b9ec <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <osThreadNew+0x76>
        name = attr->name;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d008      	beq.n	800b994 <osThreadNew+0x9c>
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	2b38      	cmp	r3, #56	; 0x38
 800b986:	d805      	bhi.n	800b994 <osThreadNew+0x9c>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f003 0301 	and.w	r3, r3, #1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <osThreadNew+0xa0>
        return (NULL);
 800b994:	2300      	movs	r3, #0
 800b996:	e054      	b.n	800ba42 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	089b      	lsrs	r3, r3, #2
 800b9a6:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00e      	beq.n	800b9ce <osThreadNew+0xd6>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	2b5b      	cmp	r3, #91	; 0x5b
 800b9b6:	d90a      	bls.n	800b9ce <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d006      	beq.n	800b9ce <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <osThreadNew+0xd6>
        mem = 1;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9cc:	e010      	b.n	800b9f0 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10c      	bne.n	800b9f0 <osThreadNew+0xf8>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d108      	bne.n	800b9f0 <osThreadNew+0xf8>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d104      	bne.n	800b9f0 <osThreadNew+0xf8>
          mem = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9ea:	e001      	b.n	800b9f0 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d110      	bne.n	800ba18 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9fe:	9202      	str	r2, [sp, #8]
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f001 fc01 	bl	800d214 <xTaskCreateStatic>
 800ba12:	4603      	mov	r3, r0
 800ba14:	617b      	str	r3, [r7, #20]
 800ba16:	e013      	b.n	800ba40 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d110      	bne.n	800ba40 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	f107 0314 	add.w	r3, r7, #20
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f001 fc48 	bl	800d2c6 <xTaskCreate>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d001      	beq.n	800ba40 <osThreadNew+0x148>
          hTask = NULL;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba40:	697b      	ldr	r3, [r7, #20]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3738      	adds	r7, #56	; 0x38
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	2000054c 	.word	0x2000054c

0800ba50 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08c      	sub	sp, #48	; 0x30
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba60:	f3ef 8305 	mrs	r3, IPSR
 800ba64:	61bb      	str	r3, [r7, #24]
  return(result);
 800ba66:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f040 8088 	bne.w	800bb7e <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba72:	617b      	str	r3, [r7, #20]
  return(result);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f040 8081 	bne.w	800bb7e <osSemaphoreNew+0x12e>
 800ba7c:	4b42      	ldr	r3, [pc, #264]	; (800bb88 <osSemaphoreNew+0x138>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d105      	bne.n	800ba90 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba84:	f3ef 8311 	mrs	r3, BASEPRI
 800ba88:	613b      	str	r3, [r7, #16]
  return(result);
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d176      	bne.n	800bb7e <osSemaphoreNew+0x12e>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d073      	beq.n	800bb7e <osSemaphoreNew+0x12e>
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d86f      	bhi.n	800bb7e <osSemaphoreNew+0x12e>
    mem = -1;
 800ba9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baa2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d015      	beq.n	800bad6 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d006      	beq.n	800bac0 <osSemaphoreNew+0x70>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	2b4f      	cmp	r3, #79	; 0x4f
 800bab8:	d902      	bls.n	800bac0 <osSemaphoreNew+0x70>
        mem = 1;
 800baba:	2301      	movs	r3, #1
 800babc:	623b      	str	r3, [r7, #32]
 800babe:	e00c      	b.n	800bada <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d108      	bne.n	800bada <osSemaphoreNew+0x8a>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d104      	bne.n	800bada <osSemaphoreNew+0x8a>
          mem = 0;
 800bad0:	2300      	movs	r3, #0
 800bad2:	623b      	str	r3, [r7, #32]
 800bad4:	e001      	b.n	800bada <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bae0:	d04d      	beq.n	800bb7e <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d129      	bne.n	800bb3c <osSemaphoreNew+0xec>
        if (mem == 1) {
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d10b      	bne.n	800bb06 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	2303      	movs	r3, #3
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	4613      	mov	r3, r2
 800baf8:	2200      	movs	r2, #0
 800bafa:	2100      	movs	r1, #0
 800bafc:	2001      	movs	r0, #1
 800bafe:	f000 fc07 	bl	800c310 <xQueueGenericCreateStatic>
 800bb02:	6278      	str	r0, [r7, #36]	; 0x24
 800bb04:	e005      	b.n	800bb12 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800bb06:	2203      	movs	r2, #3
 800bb08:	2100      	movs	r1, #0
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	f000 fc72 	bl	800c3f4 <xQueueGenericCreate>
 800bb10:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d022      	beq.n	800bb5e <osSemaphoreNew+0x10e>
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d01f      	beq.n	800bb5e <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2200      	movs	r2, #0
 800bb22:	2100      	movs	r1, #0
 800bb24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb26:	f000 fd2b 	bl	800c580 <xQueueGenericSend>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d016      	beq.n	800bb5e <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800bb30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb32:	f001 f99e 	bl	800ce72 <vQueueDelete>
            hSemaphore = NULL;
 800bb36:	2300      	movs	r3, #0
 800bb38:	627b      	str	r3, [r7, #36]	; 0x24
 800bb3a:	e010      	b.n	800bb5e <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d108      	bne.n	800bb54 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	461a      	mov	r2, r3
 800bb48:	68b9      	ldr	r1, [r7, #8]
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f000 fcb2 	bl	800c4b4 <xQueueCreateCountingSemaphoreStatic>
 800bb50:	6278      	str	r0, [r7, #36]	; 0x24
 800bb52:	e004      	b.n	800bb5e <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bb54:	68b9      	ldr	r1, [r7, #8]
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 fce1 	bl	800c51e <xQueueCreateCountingSemaphore>
 800bb5c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00c      	beq.n	800bb7e <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <osSemaphoreNew+0x122>
          name = attr->name;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	e001      	b.n	800bb76 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bb76:	69f9      	ldr	r1, [r7, #28]
 800bb78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb7a:	f001 fac5 	bl	800d108 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3728      	adds	r7, #40	; 0x28
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	2000054c 	.word	0x2000054c

0800bb8c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d103      	bne.n	800bbac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bba4:	f06f 0303 	mvn.w	r3, #3
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	e04b      	b.n	800bc44 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbac:	f3ef 8305 	mrs	r3, IPSR
 800bbb0:	617b      	str	r3, [r7, #20]
  return(result);
 800bbb2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10f      	bne.n	800bbd8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbb8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbbc:	613b      	str	r3, [r7, #16]
  return(result);
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d109      	bne.n	800bbd8 <osSemaphoreAcquire+0x4c>
 800bbc4:	4b22      	ldr	r3, [pc, #136]	; (800bc50 <osSemaphoreAcquire+0xc4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d128      	bne.n	800bc1e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bbcc:	f3ef 8311 	mrs	r3, BASEPRI
 800bbd0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d022      	beq.n	800bc1e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800bbde:	f06f 0303 	mvn.w	r3, #3
 800bbe2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bbe4:	e02d      	b.n	800bc42 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bbea:	f107 0308 	add.w	r3, r7, #8
 800bbee:	461a      	mov	r2, r3
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	69b8      	ldr	r0, [r7, #24]
 800bbf4:	f001 f8c0 	bl	800cd78 <xQueueReceiveFromISR>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d003      	beq.n	800bc06 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800bbfe:	f06f 0302 	mvn.w	r3, #2
 800bc02:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bc04:	e01d      	b.n	800bc42 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d01a      	beq.n	800bc42 <osSemaphoreAcquire+0xb6>
 800bc0c:	4b11      	ldr	r3, [pc, #68]	; (800bc54 <osSemaphoreAcquire+0xc8>)
 800bc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc12:	601a      	str	r2, [r3, #0]
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800bc1c:	e011      	b.n	800bc42 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	69b8      	ldr	r0, [r7, #24]
 800bc22:	f000 ffa1 	bl	800cb68 <xQueueSemaphoreTake>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d00b      	beq.n	800bc44 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800bc32:	f06f 0301 	mvn.w	r3, #1
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	e004      	b.n	800bc44 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800bc3a:	f06f 0302 	mvn.w	r3, #2
 800bc3e:	61fb      	str	r3, [r7, #28]
 800bc40:	e000      	b.n	800bc44 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800bc42:	bf00      	nop
      }
    }
  }

  return (stat);
 800bc44:	69fb      	ldr	r3, [r7, #28]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3720      	adds	r7, #32
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	2000054c 	.word	0x2000054c
 800bc54:	e000ed04 	.word	0xe000ed04

0800bc58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d103      	bne.n	800bc76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bc6e:	f06f 0303 	mvn.w	r3, #3
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	e03e      	b.n	800bcf4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc76:	f3ef 8305 	mrs	r3, IPSR
 800bc7a:	617b      	str	r3, [r7, #20]
  return(result);
 800bc7c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10f      	bne.n	800bca2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc82:	f3ef 8310 	mrs	r3, PRIMASK
 800bc86:	613b      	str	r3, [r7, #16]
  return(result);
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d109      	bne.n	800bca2 <osSemaphoreRelease+0x4a>
 800bc8e:	4b1c      	ldr	r3, [pc, #112]	; (800bd00 <osSemaphoreRelease+0xa8>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d120      	bne.n	800bcd8 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc96:	f3ef 8311 	mrs	r3, BASEPRI
 800bc9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d01a      	beq.n	800bcd8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800bca2:	2300      	movs	r3, #0
 800bca4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bca6:	f107 0308 	add.w	r3, r7, #8
 800bcaa:	4619      	mov	r1, r3
 800bcac:	69b8      	ldr	r0, [r7, #24]
 800bcae:	f000 fdf5 	bl	800c89c <xQueueGiveFromISR>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d003      	beq.n	800bcc0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800bcb8:	f06f 0302 	mvn.w	r3, #2
 800bcbc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bcbe:	e018      	b.n	800bcf2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d015      	beq.n	800bcf2 <osSemaphoreRelease+0x9a>
 800bcc6:	4b0f      	ldr	r3, [pc, #60]	; (800bd04 <osSemaphoreRelease+0xac>)
 800bcc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bcd6:	e00c      	b.n	800bcf2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2100      	movs	r1, #0
 800bcde:	69b8      	ldr	r0, [r7, #24]
 800bce0:	f000 fc4e 	bl	800c580 <xQueueGenericSend>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d004      	beq.n	800bcf4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800bcea:	f06f 0302 	mvn.w	r3, #2
 800bcee:	61fb      	str	r3, [r7, #28]
 800bcf0:	e000      	b.n	800bcf4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bcf2:	bf00      	nop
    }
  }

  return (stat);
 800bcf4:	69fb      	ldr	r3, [r7, #28]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	2000054c 	.word	0x2000054c
 800bd04:	e000ed04 	.word	0xe000ed04

0800bd08 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd14:	f3ef 8305 	mrs	r3, IPSR
 800bd18:	617b      	str	r3, [r7, #20]
  return(result);
 800bd1a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10f      	bne.n	800bd40 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd20:	f3ef 8310 	mrs	r3, PRIMASK
 800bd24:	613b      	str	r3, [r7, #16]
  return(result);
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d109      	bne.n	800bd40 <osSemaphoreDelete+0x38>
 800bd2c:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <osSemaphoreDelete+0x68>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d109      	bne.n	800bd48 <osSemaphoreDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd34:	f3ef 8311 	mrs	r3, BASEPRI
 800bd38:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800bd40:	f06f 0305 	mvn.w	r3, #5
 800bd44:	61fb      	str	r3, [r7, #28]
 800bd46:	e00e      	b.n	800bd66 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d103      	bne.n	800bd56 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800bd4e:	f06f 0303 	mvn.w	r3, #3
 800bd52:	61fb      	str	r3, [r7, #28]
 800bd54:	e007      	b.n	800bd66 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800bd56:	69b8      	ldr	r0, [r7, #24]
 800bd58:	f001 f9fe 	bl	800d158 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800bd60:	69b8      	ldr	r0, [r7, #24]
 800bd62:	f001 f886 	bl	800ce72 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bd66:	69fb      	ldr	r3, [r7, #28]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3720      	adds	r7, #32
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	2000054c 	.word	0x2000054c

0800bd74 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08c      	sub	sp, #48	; 0x30
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd84:	f3ef 8305 	mrs	r3, IPSR
 800bd88:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d170      	bne.n	800be72 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd90:	f3ef 8310 	mrs	r3, PRIMASK
 800bd94:	617b      	str	r3, [r7, #20]
  return(result);
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d16a      	bne.n	800be72 <osMessageQueueNew+0xfe>
 800bd9c:	4b37      	ldr	r3, [pc, #220]	; (800be7c <osMessageQueueNew+0x108>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d105      	bne.n	800bdb0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bda4:	f3ef 8311 	mrs	r3, BASEPRI
 800bda8:	613b      	str	r3, [r7, #16]
  return(result);
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d160      	bne.n	800be72 <osMessageQueueNew+0xfe>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d05d      	beq.n	800be72 <osMessageQueueNew+0xfe>
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d05a      	beq.n	800be72 <osMessageQueueNew+0xfe>
    mem = -1;
 800bdbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d029      	beq.n	800be1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d012      	beq.n	800bdf6 <osMessageQueueNew+0x82>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	2b4f      	cmp	r3, #79	; 0x4f
 800bdd6:	d90e      	bls.n	800bdf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00a      	beq.n	800bdf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695a      	ldr	r2, [r3, #20]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	fb01 f303 	mul.w	r3, r1, r3
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d302      	bcc.n	800bdf6 <osMessageQueueNew+0x82>
        mem = 1;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	623b      	str	r3, [r7, #32]
 800bdf4:	e014      	b.n	800be20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d110      	bne.n	800be20 <osMessageQueueNew+0xac>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10c      	bne.n	800be20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d108      	bne.n	800be20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	695b      	ldr	r3, [r3, #20]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d104      	bne.n	800be20 <osMessageQueueNew+0xac>
          mem = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	623b      	str	r3, [r7, #32]
 800be1a:	e001      	b.n	800be20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d10c      	bne.n	800be40 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691a      	ldr	r2, [r3, #16]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6899      	ldr	r1, [r3, #8]
 800be2e:	2300      	movs	r3, #0
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	460b      	mov	r3, r1
 800be34:	68b9      	ldr	r1, [r7, #8]
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f000 fa6a 	bl	800c310 <xQueueGenericCreateStatic>
 800be3c:	6278      	str	r0, [r7, #36]	; 0x24
 800be3e:	e008      	b.n	800be52 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d105      	bne.n	800be52 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800be46:	2200      	movs	r2, #0
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 fad2 	bl	800c3f4 <xQueueGenericCreate>
 800be50:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00c      	beq.n	800be72 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <osMessageQueueNew+0xf2>
        name = attr->name;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e001      	b.n	800be6a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800be6a:	69f9      	ldr	r1, [r7, #28]
 800be6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be6e:	f001 f94b 	bl	800d108 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be74:	4618      	mov	r0, r3
 800be76:	3728      	adds	r7, #40	; 0x28
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	2000054c 	.word	0x2000054c

0800be80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	; 0x28
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	603b      	str	r3, [r7, #0]
 800be8c:	4613      	mov	r3, r2
 800be8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800be94:	2300      	movs	r3, #0
 800be96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be98:	f3ef 8305 	mrs	r3, IPSR
 800be9c:	61fb      	str	r3, [r7, #28]
  return(result);
 800be9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10f      	bne.n	800bec4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bea4:	f3ef 8310 	mrs	r3, PRIMASK
 800bea8:	61bb      	str	r3, [r7, #24]
  return(result);
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d109      	bne.n	800bec4 <osMessageQueuePut+0x44>
 800beb0:	4b2b      	ldr	r3, [pc, #172]	; (800bf60 <osMessageQueuePut+0xe0>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d12e      	bne.n	800bf16 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800beb8:	f3ef 8311 	mrs	r3, BASEPRI
 800bebc:	617b      	str	r3, [r7, #20]
  return(result);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d028      	beq.n	800bf16 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d005      	beq.n	800bed6 <osMessageQueuePut+0x56>
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <osMessageQueuePut+0x56>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800bed6:	f06f 0303 	mvn.w	r3, #3
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bedc:	e039      	b.n	800bf52 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800bede:	2300      	movs	r3, #0
 800bee0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bee2:	f107 0210 	add.w	r2, r7, #16
 800bee6:	2300      	movs	r3, #0
 800bee8:	68b9      	ldr	r1, [r7, #8]
 800beea:	6a38      	ldr	r0, [r7, #32]
 800beec:	f000 fc42 	bl	800c774 <xQueueGenericSendFromISR>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d003      	beq.n	800befe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800bef6:	f06f 0302 	mvn.w	r3, #2
 800befa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800befc:	e029      	b.n	800bf52 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d026      	beq.n	800bf52 <osMessageQueuePut+0xd2>
 800bf04:	4b17      	ldr	r3, [pc, #92]	; (800bf64 <osMessageQueuePut+0xe4>)
 800bf06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf14:	e01d      	b.n	800bf52 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <osMessageQueuePut+0xa2>
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d103      	bne.n	800bf2a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800bf22:	f06f 0303 	mvn.w	r3, #3
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
 800bf28:	e014      	b.n	800bf54 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	68b9      	ldr	r1, [r7, #8]
 800bf30:	6a38      	ldr	r0, [r7, #32]
 800bf32:	f000 fb25 	bl	800c580 <xQueueGenericSend>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d00b      	beq.n	800bf54 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800bf42:	f06f 0301 	mvn.w	r3, #1
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
 800bf48:	e004      	b.n	800bf54 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800bf4a:	f06f 0302 	mvn.w	r3, #2
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf50:	e000      	b.n	800bf54 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3728      	adds	r7, #40	; 0x28
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	2000054c 	.word	0x2000054c
 800bf64:	e000ed04 	.word	0xe000ed04

0800bf68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b08a      	sub	sp, #40	; 0x28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf7e:	f3ef 8305 	mrs	r3, IPSR
 800bf82:	61fb      	str	r3, [r7, #28]
  return(result);
 800bf84:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10f      	bne.n	800bfaa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf8a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf8e:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d109      	bne.n	800bfaa <osMessageQueueGet+0x42>
 800bf96:	4b2b      	ldr	r3, [pc, #172]	; (800c044 <osMessageQueueGet+0xdc>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d12e      	bne.n	800bffc <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bf9e:	f3ef 8311 	mrs	r3, BASEPRI
 800bfa2:	617b      	str	r3, [r7, #20]
  return(result);
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d028      	beq.n	800bffc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d005      	beq.n	800bfbc <osMessageQueueGet+0x54>
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <osMessageQueueGet+0x54>
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800bfbc:	f06f 0303 	mvn.w	r3, #3
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfc2:	e038      	b.n	800c036 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bfc8:	f107 0310 	add.w	r3, r7, #16
 800bfcc:	461a      	mov	r2, r3
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	6a38      	ldr	r0, [r7, #32]
 800bfd2:	f000 fed1 	bl	800cd78 <xQueueReceiveFromISR>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d003      	beq.n	800bfe4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800bfdc:	f06f 0302 	mvn.w	r3, #2
 800bfe0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfe2:	e028      	b.n	800c036 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d025      	beq.n	800c036 <osMessageQueueGet+0xce>
 800bfea:	4b17      	ldr	r3, [pc, #92]	; (800c048 <osMessageQueueGet+0xe0>)
 800bfec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff0:	601a      	str	r2, [r3, #0]
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bffa:	e01c      	b.n	800c036 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <osMessageQueueGet+0xa0>
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d103      	bne.n	800c010 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800c008:	f06f 0303 	mvn.w	r3, #3
 800c00c:	627b      	str	r3, [r7, #36]	; 0x24
 800c00e:	e013      	b.n	800c038 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	68b9      	ldr	r1, [r7, #8]
 800c014:	6a38      	ldr	r0, [r7, #32]
 800c016:	f000 fccb 	bl	800c9b0 <xQueueReceive>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d00b      	beq.n	800c038 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800c026:	f06f 0301 	mvn.w	r3, #1
 800c02a:	627b      	str	r3, [r7, #36]	; 0x24
 800c02c:	e004      	b.n	800c038 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800c02e:	f06f 0302 	mvn.w	r3, #2
 800c032:	627b      	str	r3, [r7, #36]	; 0x24
 800c034:	e000      	b.n	800c038 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c036:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3728      	adds	r7, #40	; 0x28
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	2000054c 	.word	0x2000054c
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
 800c050:	bf00      	nop
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 800c05a:	b480      	push	{r7}
 800c05c:	b083      	sub	sp, #12
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	4a07      	ldr	r2, [pc, #28]	; (800c09c <vApplicationGetIdleTaskMemory+0x2c>)
 800c080:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	4a06      	ldr	r2, [pc, #24]	; (800c0a0 <vApplicationGetIdleTaskMemory+0x30>)
 800c086:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c08e:	601a      	str	r2, [r3, #0]
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	20007a80 	.word	0x20007a80
 800c0a0:	20007adc 	.word	0x20007adc

0800c0a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4a07      	ldr	r2, [pc, #28]	; (800c0d0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c0b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	4a06      	ldr	r2, [pc, #24]	; (800c0d4 <vApplicationGetTimerTaskMemory+0x30>)
 800c0ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0c2:	601a      	str	r2, [r3, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	20008adc 	.word	0x20008adc
 800c0d4:	20008b38 	.word	0x20008b38

0800c0d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f103 0208 	add.w	r2, r3, #8
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f103 0208 	add.w	r2, r3, #8
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f103 0208 	add.w	r2, r3, #8
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c126:	bf00      	nop
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	601a      	str	r2, [r3, #0]
}
 800c16e:	bf00      	nop
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c17a:	b480      	push	{r7}
 800c17c:	b085      	sub	sp, #20
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c190:	d103      	bne.n	800c19a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e00c      	b.n	800c1b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	3308      	adds	r3, #8
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	e002      	b.n	800c1a8 <vListInsert+0x2e>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d2f6      	bcs.n	800c1a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	601a      	str	r2, [r3, #0]
}
 800c1e0:	bf00      	nop
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	691b      	ldr	r3, [r3, #16]
 800c1f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	6892      	ldr	r2, [r2, #8]
 800c202:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	6852      	ldr	r2, [r2, #4]
 800c20c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d103      	bne.n	800c220 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	1e5a      	subs	r2, r3, #1
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d109      	bne.n	800c268 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	60bb      	str	r3, [r7, #8]
 800c266:	e7fe      	b.n	800c266 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800c268:	f002 fcc8 	bl	800ebfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c274:	68f9      	ldr	r1, [r7, #12]
 800c276:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c278:	fb01 f303 	mul.w	r3, r1, r3
 800c27c:	441a      	add	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c298:	3b01      	subs	r3, #1
 800c29a:	68f9      	ldr	r1, [r7, #12]
 800c29c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c29e:	fb01 f303 	mul.w	r3, r1, r3
 800c2a2:	441a      	add	r2, r3
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	22ff      	movs	r2, #255	; 0xff
 800c2ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	22ff      	movs	r2, #255	; 0xff
 800c2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d114      	bne.n	800c2e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d01a      	beq.n	800c2fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3310      	adds	r3, #16
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f001 fbcc 	bl	800da68 <xTaskRemoveFromEventList>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d012      	beq.n	800c2fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <xQueueGenericReset+0xcc>)
 800c2d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	e009      	b.n	800c2fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3310      	adds	r3, #16
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7ff fef3 	bl	800c0d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3324      	adds	r3, #36	; 0x24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff feee 	bl	800c0d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c2fc:	f002 fcac 	bl	800ec58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c300:	2301      	movs	r3, #1
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	e000ed04 	.word	0xe000ed04

0800c310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08e      	sub	sp, #56	; 0x38
 800c314:	af02      	add	r7, sp, #8
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d109      	bne.n	800c338 <xQueueGenericCreateStatic+0x28>
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
 800c336:	e7fe      	b.n	800c336 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d109      	bne.n	800c352 <xQueueGenericCreateStatic+0x42>
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	627b      	str	r3, [r7, #36]	; 0x24
 800c350:	e7fe      	b.n	800c350 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <xQueueGenericCreateStatic+0x4e>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <xQueueGenericCreateStatic+0x52>
 800c35e:	2301      	movs	r3, #1
 800c360:	e000      	b.n	800c364 <xQueueGenericCreateStatic+0x54>
 800c362:	2300      	movs	r3, #0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d109      	bne.n	800c37c <xQueueGenericCreateStatic+0x6c>
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	623b      	str	r3, [r7, #32]
 800c37a:	e7fe      	b.n	800c37a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <xQueueGenericCreateStatic+0x78>
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <xQueueGenericCreateStatic+0x7c>
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <xQueueGenericCreateStatic+0x7e>
 800c38c:	2300      	movs	r3, #0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d109      	bne.n	800c3a6 <xQueueGenericCreateStatic+0x96>
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	61fb      	str	r3, [r7, #28]
 800c3a4:	e7fe      	b.n	800c3a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c3a6:	2350      	movs	r3, #80	; 0x50
 800c3a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b50      	cmp	r3, #80	; 0x50
 800c3ae:	d009      	beq.n	800c3c4 <xQueueGenericCreateStatic+0xb4>
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	61bb      	str	r3, [r7, #24]
 800c3c2:	e7fe      	b.n	800c3c2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00d      	beq.n	800c3ea <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f842 	bl	800c46e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3730      	adds	r7, #48	; 0x30
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08a      	sub	sp, #40	; 0x28
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	4613      	mov	r3, r2
 800c400:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d109      	bne.n	800c41c <xQueueGenericCreate+0x28>
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	613b      	str	r3, [r7, #16]
 800c41a:	e7fe      	b.n	800c41a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c422:	2300      	movs	r3, #0
 800c424:	61fb      	str	r3, [r7, #28]
 800c426:	e004      	b.n	800c432 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	fb02 f303 	mul.w	r3, r2, r3
 800c430:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	3350      	adds	r3, #80	; 0x50
 800c436:	4618      	mov	r0, r3
 800c438:	f002 fcfa 	bl	800ee30 <pvPortMalloc>
 800c43c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00f      	beq.n	800c464 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	3350      	adds	r3, #80	; 0x50
 800c448:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c452:	79fa      	ldrb	r2, [r7, #7]
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	4613      	mov	r3, r2
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	68b9      	ldr	r1, [r7, #8]
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 f805 	bl	800c46e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c464:	69bb      	ldr	r3, [r7, #24]
	}
 800c466:	4618      	mov	r0, r3
 800c468:	3720      	adds	r7, #32
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d103      	bne.n	800c48a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	601a      	str	r2, [r3, #0]
 800c488:	e002      	b.n	800c490 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c49c:	2101      	movs	r1, #1
 800c49e:	69b8      	ldr	r0, [r7, #24]
 800c4a0:	f7ff fece 	bl	800c240 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	78fa      	ldrb	r2, [r7, #3]
 800c4a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c4ac:	bf00      	nop
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b08a      	sub	sp, #40	; 0x28
 800c4b8:	af02      	add	r7, sp, #8
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d109      	bne.n	800c4da <xQueueCreateCountingSemaphoreStatic+0x26>
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	61bb      	str	r3, [r7, #24]
 800c4d8:	e7fe      	b.n	800c4d8 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d909      	bls.n	800c4f6 <xQueueCreateCountingSemaphoreStatic+0x42>
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	617b      	str	r3, [r7, #20]
 800c4f4:	e7fe      	b.n	800c4f4 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2100      	movs	r1, #0
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7ff ff05 	bl	800c310 <xQueueGenericCreateStatic>
 800c506:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c514:	69fb      	ldr	r3, [r7, #28]
	}
 800c516:	4618      	mov	r0, r3
 800c518:	3720      	adds	r7, #32
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b086      	sub	sp, #24
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d109      	bne.n	800c542 <xQueueCreateCountingSemaphore+0x24>
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	613b      	str	r3, [r7, #16]
 800c540:	e7fe      	b.n	800c540 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	429a      	cmp	r2, r3
 800c548:	d909      	bls.n	800c55e <xQueueCreateCountingSemaphore+0x40>
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	e7fe      	b.n	800c55c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c55e:	2202      	movs	r2, #2
 800c560:	2100      	movs	r1, #0
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff ff46 	bl	800c3f4 <xQueueGenericCreate>
 800c568:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c576:	697b      	ldr	r3, [r7, #20]
	}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08e      	sub	sp, #56	; 0x38
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c58e:	2300      	movs	r3, #0
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d109      	bne.n	800c5b0 <xQueueGenericSend+0x30>
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5ae:	e7fe      	b.n	800c5ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d103      	bne.n	800c5be <xQueueGenericSend+0x3e>
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <xQueueGenericSend+0x42>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e000      	b.n	800c5c4 <xQueueGenericSend+0x44>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d109      	bne.n	800c5dc <xQueueGenericSend+0x5c>
 800c5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5cc:	f383 8811 	msr	BASEPRI, r3
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c5da:	e7fe      	b.n	800c5da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d103      	bne.n	800c5ea <xQueueGenericSend+0x6a>
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d101      	bne.n	800c5ee <xQueueGenericSend+0x6e>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e000      	b.n	800c5f0 <xQueueGenericSend+0x70>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d109      	bne.n	800c608 <xQueueGenericSend+0x88>
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	623b      	str	r3, [r7, #32]
 800c606:	e7fe      	b.n	800c606 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c608:	f001 fbea 	bl	800dde0 <xTaskGetSchedulerState>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d102      	bne.n	800c618 <xQueueGenericSend+0x98>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d101      	bne.n	800c61c <xQueueGenericSend+0x9c>
 800c618:	2301      	movs	r3, #1
 800c61a:	e000      	b.n	800c61e <xQueueGenericSend+0x9e>
 800c61c:	2300      	movs	r3, #0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d109      	bne.n	800c636 <xQueueGenericSend+0xb6>
 800c622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	61fb      	str	r3, [r7, #28]
 800c634:	e7fe      	b.n	800c634 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c636:	f002 fae1 	bl	800ebfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c642:	429a      	cmp	r2, r3
 800c644:	d302      	bcc.n	800c64c <xQueueGenericSend+0xcc>
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d129      	bne.n	800c6a0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c652:	f000 fc48 	bl	800cee6 <prvCopyDataToQueue>
 800c656:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d010      	beq.n	800c682 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	3324      	adds	r3, #36	; 0x24
 800c664:	4618      	mov	r0, r3
 800c666:	f001 f9ff 	bl	800da68 <xTaskRemoveFromEventList>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d013      	beq.n	800c698 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c670:	4b3f      	ldr	r3, [pc, #252]	; (800c770 <xQueueGenericSend+0x1f0>)
 800c672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	e00a      	b.n	800c698 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	2b00      	cmp	r3, #0
 800c686:	d007      	beq.n	800c698 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c688:	4b39      	ldr	r3, [pc, #228]	; (800c770 <xQueueGenericSend+0x1f0>)
 800c68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c698:	f002 fade 	bl	800ec58 <vPortExitCritical>
				return pdPASS;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e063      	b.n	800c768 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d103      	bne.n	800c6ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6a6:	f002 fad7 	bl	800ec58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e05c      	b.n	800c768 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d106      	bne.n	800c6c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6b4:	f107 0314 	add.w	r3, r7, #20
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f001 fa37 	bl	800db2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6c2:	f002 fac9 	bl	800ec58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6c6:	f000 ff9d 	bl	800d604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6ca:	f002 fa97 	bl	800ebfc <vPortEnterCritical>
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6d4:	b25b      	sxtb	r3, r3
 800c6d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6da:	d103      	bne.n	800c6e4 <xQueueGenericSend+0x164>
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6ea:	b25b      	sxtb	r3, r3
 800c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f0:	d103      	bne.n	800c6fa <xQueueGenericSend+0x17a>
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6fa:	f002 faad 	bl	800ec58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6fe:	1d3a      	adds	r2, r7, #4
 800c700:	f107 0314 	add.w	r3, r7, #20
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f001 fa26 	bl	800db58 <xTaskCheckForTimeOut>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d124      	bne.n	800c75c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c714:	f000 fcdf 	bl	800d0d6 <prvIsQueueFull>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d018      	beq.n	800c750 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	3310      	adds	r3, #16
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	4611      	mov	r1, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f001 f950 	bl	800d9cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c72c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c72e:	f000 fc6a 	bl	800d006 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c732:	f000 ff75 	bl	800d620 <xTaskResumeAll>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f47f af7c 	bne.w	800c636 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c73e:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <xQueueGenericSend+0x1f0>)
 800c740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	e772      	b.n	800c636 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c752:	f000 fc58 	bl	800d006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c756:	f000 ff63 	bl	800d620 <xTaskResumeAll>
 800c75a:	e76c      	b.n	800c636 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c75e:	f000 fc52 	bl	800d006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c762:	f000 ff5d 	bl	800d620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c766:	2300      	movs	r3, #0
		}
	}
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3738      	adds	r7, #56	; 0x38
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	e000ed04 	.word	0xe000ed04

0800c774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08e      	sub	sp, #56	; 0x38
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d109      	bne.n	800c7a0 <xQueueGenericSendFromISR+0x2c>
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	627b      	str	r3, [r7, #36]	; 0x24
 800c79e:	e7fe      	b.n	800c79e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d103      	bne.n	800c7ae <xQueueGenericSendFromISR+0x3a>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <xQueueGenericSendFromISR+0x3e>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e000      	b.n	800c7b4 <xQueueGenericSendFromISR+0x40>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d109      	bne.n	800c7cc <xQueueGenericSendFromISR+0x58>
 800c7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7bc:	f383 8811 	msr	BASEPRI, r3
 800c7c0:	f3bf 8f6f 	isb	sy
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	623b      	str	r3, [r7, #32]
 800c7ca:	e7fe      	b.n	800c7ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d103      	bne.n	800c7da <xQueueGenericSendFromISR+0x66>
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d101      	bne.n	800c7de <xQueueGenericSendFromISR+0x6a>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e000      	b.n	800c7e0 <xQueueGenericSendFromISR+0x6c>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d109      	bne.n	800c7f8 <xQueueGenericSendFromISR+0x84>
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	61fb      	str	r3, [r7, #28]
 800c7f6:	e7fe      	b.n	800c7f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7f8:	f002 fadc 	bl	800edb4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c7fc:	f3ef 8211 	mrs	r2, BASEPRI
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	61ba      	str	r2, [r7, #24]
 800c812:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c814:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c816:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c820:	429a      	cmp	r2, r3
 800c822:	d302      	bcc.n	800c82a <xQueueGenericSendFromISR+0xb6>
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d12c      	bne.n	800c884 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	68b9      	ldr	r1, [r7, #8]
 800c838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c83a:	f000 fb54 	bl	800cee6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c83e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c846:	d112      	bne.n	800c86e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d016      	beq.n	800c87e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	3324      	adds	r3, #36	; 0x24
 800c854:	4618      	mov	r0, r3
 800c856:	f001 f907 	bl	800da68 <xTaskRemoveFromEventList>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00e      	beq.n	800c87e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00b      	beq.n	800c87e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	e007      	b.n	800c87e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c86e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c872:	3301      	adds	r3, #1
 800c874:	b2db      	uxtb	r3, r3
 800c876:	b25a      	sxtb	r2, r3
 800c878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c87e:	2301      	movs	r3, #1
 800c880:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c882:	e001      	b.n	800c888 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c884:	2300      	movs	r3, #0
 800c886:	637b      	str	r3, [r7, #52]	; 0x34
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c894:	4618      	mov	r0, r3
 800c896:	3738      	adds	r7, #56	; 0x38
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08e      	sub	sp, #56	; 0x38
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d109      	bne.n	800c8c4 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	623b      	str	r3, [r7, #32]
 800c8c2:	e7fe      	b.n	800c8c2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d009      	beq.n	800c8e0 <xQueueGiveFromISR+0x44>
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	61fb      	str	r3, [r7, #28]
 800c8de:	e7fe      	b.n	800c8de <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d103      	bne.n	800c8f0 <xQueueGiveFromISR+0x54>
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <xQueueGiveFromISR+0x58>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e000      	b.n	800c8f6 <xQueueGiveFromISR+0x5a>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d109      	bne.n	800c90e <xQueueGiveFromISR+0x72>
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	61bb      	str	r3, [r7, #24]
 800c90c:	e7fe      	b.n	800c90c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c90e:	f002 fa51 	bl	800edb4 <vPortValidateInterruptPriority>
	__asm volatile
 800c912:	f3ef 8211 	mrs	r2, BASEPRI
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	617a      	str	r2, [r7, #20]
 800c928:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c92a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c92c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d22b      	bcs.n	800c996 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	1c5a      	adds	r2, r3, #1
 800c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c958:	d112      	bne.n	800c980 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d016      	beq.n	800c990 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	3324      	adds	r3, #36	; 0x24
 800c966:	4618      	mov	r0, r3
 800c968:	f001 f87e 	bl	800da68 <xTaskRemoveFromEventList>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00e      	beq.n	800c990 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	e007      	b.n	800c990 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c984:	3301      	adds	r3, #1
 800c986:	b2db      	uxtb	r3, r3
 800c988:	b25a      	sxtb	r2, r3
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c990:	2301      	movs	r3, #1
 800c992:	637b      	str	r3, [r7, #52]	; 0x34
 800c994:	e001      	b.n	800c99a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c996:	2300      	movs	r3, #0
 800c998:	637b      	str	r3, [r7, #52]	; 0x34
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3738      	adds	r7, #56	; 0x38
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08c      	sub	sp, #48	; 0x30
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d109      	bne.n	800c9de <xQueueReceive+0x2e>
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	623b      	str	r3, [r7, #32]
 800c9dc:	e7fe      	b.n	800c9dc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d103      	bne.n	800c9ec <xQueueReceive+0x3c>
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <xQueueReceive+0x40>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e000      	b.n	800c9f2 <xQueueReceive+0x42>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d109      	bne.n	800ca0a <xQueueReceive+0x5a>
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	61fb      	str	r3, [r7, #28]
 800ca08:	e7fe      	b.n	800ca08 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca0a:	f001 f9e9 	bl	800dde0 <xTaskGetSchedulerState>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d102      	bne.n	800ca1a <xQueueReceive+0x6a>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <xQueueReceive+0x6e>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e000      	b.n	800ca20 <xQueueReceive+0x70>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d109      	bne.n	800ca38 <xQueueReceive+0x88>
 800ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	61bb      	str	r3, [r7, #24]
 800ca36:	e7fe      	b.n	800ca36 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca38:	f002 f8e0 	bl	800ebfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d01f      	beq.n	800ca88 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca48:	68b9      	ldr	r1, [r7, #8]
 800ca4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca4c:	f000 fab5 	bl	800cfba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	1e5a      	subs	r2, r3, #1
 800ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00f      	beq.n	800ca80 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	3310      	adds	r3, #16
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 ffff 	bl	800da68 <xTaskRemoveFromEventList>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d007      	beq.n	800ca80 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca70:	4b3c      	ldr	r3, [pc, #240]	; (800cb64 <xQueueReceive+0x1b4>)
 800ca72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca80:	f002 f8ea 	bl	800ec58 <vPortExitCritical>
				return pdPASS;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e069      	b.n	800cb5c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d103      	bne.n	800ca96 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca8e:	f002 f8e3 	bl	800ec58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca92:	2300      	movs	r3, #0
 800ca94:	e062      	b.n	800cb5c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d106      	bne.n	800caaa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca9c:	f107 0310 	add.w	r3, r7, #16
 800caa0:	4618      	mov	r0, r3
 800caa2:	f001 f843 	bl	800db2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caa6:	2301      	movs	r3, #1
 800caa8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800caaa:	f002 f8d5 	bl	800ec58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800caae:	f000 fda9 	bl	800d604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cab2:	f002 f8a3 	bl	800ebfc <vPortEnterCritical>
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cabc:	b25b      	sxtb	r3, r3
 800cabe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cac2:	d103      	bne.n	800cacc <xQueueReceive+0x11c>
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cad2:	b25b      	sxtb	r3, r3
 800cad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cad8:	d103      	bne.n	800cae2 <xQueueReceive+0x132>
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae2:	f002 f8b9 	bl	800ec58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cae6:	1d3a      	adds	r2, r7, #4
 800cae8:	f107 0310 	add.w	r3, r7, #16
 800caec:	4611      	mov	r1, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	f001 f832 	bl	800db58 <xTaskCheckForTimeOut>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d123      	bne.n	800cb42 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafc:	f000 fad5 	bl	800d0aa <prvIsQueueEmpty>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d017      	beq.n	800cb36 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb08:	3324      	adds	r3, #36	; 0x24
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 ff5c 	bl	800d9cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb16:	f000 fa76 	bl	800d006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb1a:	f000 fd81 	bl	800d620 <xTaskResumeAll>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d189      	bne.n	800ca38 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800cb24:	4b0f      	ldr	r3, [pc, #60]	; (800cb64 <xQueueReceive+0x1b4>)
 800cb26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	e780      	b.n	800ca38 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb38:	f000 fa65 	bl	800d006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb3c:	f000 fd70 	bl	800d620 <xTaskResumeAll>
 800cb40:	e77a      	b.n	800ca38 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb44:	f000 fa5f 	bl	800d006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb48:	f000 fd6a 	bl	800d620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb4e:	f000 faac 	bl	800d0aa <prvIsQueueEmpty>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f43f af6f 	beq.w	800ca38 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3730      	adds	r7, #48	; 0x30
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	e000ed04 	.word	0xe000ed04

0800cb68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08e      	sub	sp, #56	; 0x38
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb72:	2300      	movs	r3, #0
 800cb74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d109      	bne.n	800cb98 <xQueueSemaphoreTake+0x30>
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	623b      	str	r3, [r7, #32]
 800cb96:	e7fe      	b.n	800cb96 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d009      	beq.n	800cbb4 <xQueueSemaphoreTake+0x4c>
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	61fb      	str	r3, [r7, #28]
 800cbb2:	e7fe      	b.n	800cbb2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbb4:	f001 f914 	bl	800dde0 <xTaskGetSchedulerState>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d102      	bne.n	800cbc4 <xQueueSemaphoreTake+0x5c>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <xQueueSemaphoreTake+0x60>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e000      	b.n	800cbca <xQueueSemaphoreTake+0x62>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d109      	bne.n	800cbe2 <xQueueSemaphoreTake+0x7a>
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	61bb      	str	r3, [r7, #24]
 800cbe0:	e7fe      	b.n	800cbe0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbe2:	f002 f80b 	bl	800ebfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d024      	beq.n	800cc3c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	1e5a      	subs	r2, r3, #1
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d104      	bne.n	800cc0c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800cc02:	f001 fa69 	bl	800e0d8 <pvTaskIncrementMutexHeldCount>
 800cc06:	4602      	mov	r2, r0
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00f      	beq.n	800cc34 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	3310      	adds	r3, #16
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 ff25 	bl	800da68 <xTaskRemoveFromEventList>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d007      	beq.n	800cc34 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc24:	4b53      	ldr	r3, [pc, #332]	; (800cd74 <xQueueSemaphoreTake+0x20c>)
 800cc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc34:	f002 f810 	bl	800ec58 <vPortExitCritical>
				return pdPASS;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e096      	b.n	800cd6a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d110      	bne.n	800cc64 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d009      	beq.n	800cc5c <xQueueSemaphoreTake+0xf4>
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	617b      	str	r3, [r7, #20]
 800cc5a:	e7fe      	b.n	800cc5a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc5c:	f001 fffc 	bl	800ec58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc60:	2300      	movs	r3, #0
 800cc62:	e082      	b.n	800cd6a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc6a:	f107 030c 	add.w	r3, r7, #12
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 ff5c 	bl	800db2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc74:	2301      	movs	r3, #1
 800cc76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc78:	f001 ffee 	bl	800ec58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc7c:	f000 fcc2 	bl	800d604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc80:	f001 ffbc 	bl	800ebfc <vPortEnterCritical>
 800cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc8a:	b25b      	sxtb	r3, r3
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc90:	d103      	bne.n	800cc9a <xQueueSemaphoreTake+0x132>
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cca0:	b25b      	sxtb	r3, r3
 800cca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cca6:	d103      	bne.n	800ccb0 <xQueueSemaphoreTake+0x148>
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccb0:	f001 ffd2 	bl	800ec58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccb4:	463a      	mov	r2, r7
 800ccb6:	f107 030c 	add.w	r3, r7, #12
 800ccba:	4611      	mov	r1, r2
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 ff4b 	bl	800db58 <xTaskCheckForTimeOut>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d132      	bne.n	800cd2e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccca:	f000 f9ee 	bl	800d0aa <prvIsQueueEmpty>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d026      	beq.n	800cd22 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d109      	bne.n	800ccf0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800ccdc:	f001 ff8e 	bl	800ebfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f001 f899 	bl	800de1c <xTaskPriorityInherit>
 800ccea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ccec:	f001 ffb4 	bl	800ec58 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	3324      	adds	r3, #36	; 0x24
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 fe67 	bl	800d9cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd00:	f000 f981 	bl	800d006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd04:	f000 fc8c 	bl	800d620 <xTaskResumeAll>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f47f af69 	bne.w	800cbe2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800cd10:	4b18      	ldr	r3, [pc, #96]	; (800cd74 <xQueueSemaphoreTake+0x20c>)
 800cd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	f3bf 8f6f 	isb	sy
 800cd20:	e75f      	b.n	800cbe2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd24:	f000 f96f 	bl	800d006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd28:	f000 fc7a 	bl	800d620 <xTaskResumeAll>
 800cd2c:	e759      	b.n	800cbe2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd30:	f000 f969 	bl	800d006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd34:	f000 fc74 	bl	800d620 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd3a:	f000 f9b6 	bl	800d0aa <prvIsQueueEmpty>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f43f af4e 	beq.w	800cbe2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00d      	beq.n	800cd68 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800cd4c:	f001 ff56 	bl	800ebfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd52:	f000 f8b0 	bl	800ceb6 <prvGetDisinheritPriorityAfterTimeout>
 800cd56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800cd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f001 f936 	bl	800dfd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd64:	f001 ff78 	bl	800ec58 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3738      	adds	r7, #56	; 0x38
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	e000ed04 	.word	0xe000ed04

0800cd78 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08e      	sub	sp, #56	; 0x38
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d109      	bne.n	800cda2 <xQueueReceiveFromISR+0x2a>
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	623b      	str	r3, [r7, #32]
 800cda0:	e7fe      	b.n	800cda0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d103      	bne.n	800cdb0 <xQueueReceiveFromISR+0x38>
 800cda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <xQueueReceiveFromISR+0x3c>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <xQueueReceiveFromISR+0x3e>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d109      	bne.n	800cdce <xQueueReceiveFromISR+0x56>
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	61fb      	str	r3, [r7, #28]
 800cdcc:	e7fe      	b.n	800cdcc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdce:	f001 fff1 	bl	800edb4 <vPortValidateInterruptPriority>
	__asm volatile
 800cdd2:	f3ef 8211 	mrs	r2, BASEPRI
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	61ba      	str	r2, [r7, #24]
 800cde8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d02f      	beq.n	800ce5a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce04:	68b9      	ldr	r1, [r7, #8]
 800ce06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce08:	f000 f8d7 	bl	800cfba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	1e5a      	subs	r2, r3, #1
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ce14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce1c:	d112      	bne.n	800ce44 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d016      	beq.n	800ce54 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	3310      	adds	r3, #16
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fe1c 	bl	800da68 <xTaskRemoveFromEventList>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00e      	beq.n	800ce54 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00b      	beq.n	800ce54 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	e007      	b.n	800ce54 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce48:	3301      	adds	r3, #1
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	b25a      	sxtb	r2, r3
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce54:	2301      	movs	r3, #1
 800ce56:	637b      	str	r3, [r7, #52]	; 0x34
 800ce58:	e001      	b.n	800ce5e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3738      	adds	r7, #56	; 0x38
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d109      	bne.n	800ce98 <vQueueDelete+0x26>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	60bb      	str	r3, [r7, #8]
 800ce96:	e7fe      	b.n	800ce96 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f000 f95d 	bl	800d158 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d102      	bne.n	800ceae <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f002 f861 	bl	800ef70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b085      	sub	sp, #20
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d006      	beq.n	800ced4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	e001      	b.n	800ced8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ced4:	2300      	movs	r3, #0
 800ced6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ced8:	68fb      	ldr	r3, [r7, #12]
	}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3714      	adds	r7, #20
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr

0800cee6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b086      	sub	sp, #24
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	60f8      	str	r0, [r7, #12]
 800ceee:	60b9      	str	r1, [r7, #8]
 800cef0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cef2:	2300      	movs	r3, #0
 800cef4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10d      	bne.n	800cf20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d14d      	bne.n	800cfa8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 fff1 	bl	800def8 <xTaskPriorityDisinherit>
 800cf16:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	605a      	str	r2, [r3, #4]
 800cf1e:	e043      	b.n	800cfa8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d119      	bne.n	800cf5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6898      	ldr	r0, [r3, #8]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2e:	461a      	mov	r2, r3
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	f005 fe07 	bl	8012b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	441a      	add	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d32b      	bcc.n	800cfa8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	609a      	str	r2, [r3, #8]
 800cf58:	e026      	b.n	800cfa8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	68d8      	ldr	r0, [r3, #12]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf62:	461a      	mov	r2, r3
 800cf64:	68b9      	ldr	r1, [r7, #8]
 800cf66:	f005 fded 	bl	8012b44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	68da      	ldr	r2, [r3, #12]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	425b      	negs	r3, r3
 800cf74:	441a      	add	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	68da      	ldr	r2, [r3, #12]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d207      	bcs.n	800cf96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8e:	425b      	negs	r3, r3
 800cf90:	441a      	add	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d105      	bne.n	800cfa8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	1c5a      	adds	r2, r3, #1
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cfb0:	697b      	ldr	r3, [r7, #20]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b082      	sub	sp, #8
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d018      	beq.n	800cffe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68da      	ldr	r2, [r3, #12]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd4:	441a      	add	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68da      	ldr	r2, [r3, #12]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d303      	bcc.n	800cfee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	68d9      	ldr	r1, [r3, #12]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff6:	461a      	mov	r2, r3
 800cff8:	6838      	ldr	r0, [r7, #0]
 800cffa:	f005 fda3 	bl	8012b44 <memcpy>
	}
}
 800cffe:	bf00      	nop
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d00e:	f001 fdf5 	bl	800ebfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d018:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d01a:	e011      	b.n	800d040 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d020:	2b00      	cmp	r3, #0
 800d022:	d012      	beq.n	800d04a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	3324      	adds	r3, #36	; 0x24
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 fd1d 	bl	800da68 <xTaskRemoveFromEventList>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d034:	f000 fdf0 	bl	800dc18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d044:	2b00      	cmp	r3, #0
 800d046:	dce9      	bgt.n	800d01c <prvUnlockQueue+0x16>
 800d048:	e000      	b.n	800d04c <prvUnlockQueue+0x46>
					break;
 800d04a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	22ff      	movs	r2, #255	; 0xff
 800d050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d054:	f001 fe00 	bl	800ec58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d058:	f001 fdd0 	bl	800ebfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d062:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d064:	e011      	b.n	800d08a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d012      	beq.n	800d094 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3310      	adds	r3, #16
 800d072:	4618      	mov	r0, r3
 800d074:	f000 fcf8 	bl	800da68 <xTaskRemoveFromEventList>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d07e:	f000 fdcb 	bl	800dc18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d082:	7bbb      	ldrb	r3, [r7, #14]
 800d084:	3b01      	subs	r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d08a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	dce9      	bgt.n	800d066 <prvUnlockQueue+0x60>
 800d092:	e000      	b.n	800d096 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d094:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	22ff      	movs	r2, #255	; 0xff
 800d09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d09e:	f001 fddb 	bl	800ec58 <vPortExitCritical>
}
 800d0a2:	bf00      	nop
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0b2:	f001 fda3 	bl	800ebfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d102      	bne.n	800d0c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	e001      	b.n	800d0c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0c8:	f001 fdc6 	bl	800ec58 <vPortExitCritical>

	return xReturn;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0de:	f001 fd8d 	bl	800ebfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d102      	bne.n	800d0f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	60fb      	str	r3, [r7, #12]
 800d0f2:	e001      	b.n	800d0f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0f8:	f001 fdae 	bl	800ec58 <vPortExitCritical>

	return xReturn;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
	...

0800d108 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d112:	2300      	movs	r3, #0
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e014      	b.n	800d142 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d118:	4a0e      	ldr	r2, [pc, #56]	; (800d154 <vQueueAddToRegistry+0x4c>)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10b      	bne.n	800d13c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d124:	490b      	ldr	r1, [pc, #44]	; (800d154 <vQueueAddToRegistry+0x4c>)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d12e:	4a09      	ldr	r2, [pc, #36]	; (800d154 <vQueueAddToRegistry+0x4c>)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	00db      	lsls	r3, r3, #3
 800d134:	4413      	add	r3, r2
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d13a:	e005      	b.n	800d148 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3301      	adds	r3, #1
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b07      	cmp	r3, #7
 800d146:	d9e7      	bls.n	800d118 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d148:	bf00      	nop
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	2000b1bc 	.word	0x2000b1bc

0800d158 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d160:	2300      	movs	r3, #0
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	e016      	b.n	800d194 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d166:	4a10      	ldr	r2, [pc, #64]	; (800d1a8 <vQueueUnregisterQueue+0x50>)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	4413      	add	r3, r2
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	429a      	cmp	r2, r3
 800d174:	d10b      	bne.n	800d18e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d176:	4a0c      	ldr	r2, [pc, #48]	; (800d1a8 <vQueueUnregisterQueue+0x50>)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2100      	movs	r1, #0
 800d17c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d180:	4a09      	ldr	r2, [pc, #36]	; (800d1a8 <vQueueUnregisterQueue+0x50>)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	4413      	add	r3, r2
 800d188:	2200      	movs	r2, #0
 800d18a:	605a      	str	r2, [r3, #4]
				break;
 800d18c:	e005      	b.n	800d19a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3301      	adds	r3, #1
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b07      	cmp	r3, #7
 800d198:	d9e5      	bls.n	800d166 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	2000b1bc 	.word	0x2000b1bc

0800d1ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d1bc:	f001 fd1e 	bl	800ebfc <vPortEnterCritical>
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1c6:	b25b      	sxtb	r3, r3
 800d1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1cc:	d103      	bne.n	800d1d6 <vQueueWaitForMessageRestricted+0x2a>
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1dc:	b25b      	sxtb	r3, r3
 800d1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1e2:	d103      	bne.n	800d1ec <vQueueWaitForMessageRestricted+0x40>
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ec:	f001 fd34 	bl	800ec58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d106      	bne.n	800d206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	3324      	adds	r3, #36	; 0x24
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fc07 	bl	800da14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d206:	6978      	ldr	r0, [r7, #20]
 800d208:	f7ff fefd 	bl	800d006 <prvUnlockQueue>
	}
 800d20c:	bf00      	nop
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08e      	sub	sp, #56	; 0x38
 800d218:	af04      	add	r7, sp, #16
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d224:	2b00      	cmp	r3, #0
 800d226:	d109      	bne.n	800d23c <xTaskCreateStatic+0x28>
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	623b      	str	r3, [r7, #32]
 800d23a:	e7fe      	b.n	800d23a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d109      	bne.n	800d256 <xTaskCreateStatic+0x42>
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	61fb      	str	r3, [r7, #28]
 800d254:	e7fe      	b.n	800d254 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d256:	235c      	movs	r3, #92	; 0x5c
 800d258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	2b5c      	cmp	r3, #92	; 0x5c
 800d25e:	d009      	beq.n	800d274 <xTaskCreateStatic+0x60>
 800d260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	61bb      	str	r3, [r7, #24]
 800d272:	e7fe      	b.n	800d272 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d276:	2b00      	cmp	r3, #0
 800d278:	d01e      	beq.n	800d2b8 <xTaskCreateStatic+0xa4>
 800d27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d01b      	beq.n	800d2b8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d288:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28c:	2202      	movs	r2, #2
 800d28e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d292:	2300      	movs	r3, #0
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	9302      	str	r3, [sp, #8]
 800d29a:	f107 0314 	add.w	r3, r7, #20
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	68b9      	ldr	r1, [r7, #8]
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f000 f850 	bl	800d350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2b2:	f000 f8d3 	bl	800d45c <prvAddNewTaskToReadyList>
 800d2b6:	e001      	b.n	800d2bc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d2bc:	697b      	ldr	r3, [r7, #20]
	}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3728      	adds	r7, #40	; 0x28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b08c      	sub	sp, #48	; 0x30
 800d2ca:	af04      	add	r7, sp, #16
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	60b9      	str	r1, [r7, #8]
 800d2d0:	603b      	str	r3, [r7, #0]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2d6:	88fb      	ldrh	r3, [r7, #6]
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f001 fda8 	bl	800ee30 <pvPortMalloc>
 800d2e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00e      	beq.n	800d306 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d2e8:	205c      	movs	r0, #92	; 0x5c
 800d2ea:	f001 fda1 	bl	800ee30 <pvPortMalloc>
 800d2ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	697a      	ldr	r2, [r7, #20]
 800d2fa:	631a      	str	r2, [r3, #48]	; 0x30
 800d2fc:	e005      	b.n	800d30a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2fe:	6978      	ldr	r0, [r7, #20]
 800d300:	f001 fe36 	bl	800ef70 <vPortFree>
 800d304:	e001      	b.n	800d30a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d306:	2300      	movs	r3, #0
 800d308:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d017      	beq.n	800d340 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d318:	88fa      	ldrh	r2, [r7, #6]
 800d31a:	2300      	movs	r3, #0
 800d31c:	9303      	str	r3, [sp, #12]
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	9302      	str	r3, [sp, #8]
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	68b9      	ldr	r1, [r7, #8]
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f000 f80e 	bl	800d350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d334:	69f8      	ldr	r0, [r7, #28]
 800d336:	f000 f891 	bl	800d45c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d33a:	2301      	movs	r3, #1
 800d33c:	61bb      	str	r3, [r7, #24]
 800d33e:	e002      	b.n	800d346 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d344:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d346:	69bb      	ldr	r3, [r7, #24]
	}
 800d348:	4618      	mov	r0, r3
 800d34a:	3720      	adds	r7, #32
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	461a      	mov	r2, r3
 800d368:	21a5      	movs	r1, #165	; 0xa5
 800d36a:	f005 fbf6 	bl	8012b5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d378:	3b01      	subs	r3, #1
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	f023 0307 	bic.w	r3, r3, #7
 800d386:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d009      	beq.n	800d3a6 <prvInitialiseNewTask+0x56>
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	617b      	str	r3, [r7, #20]
 800d3a4:	e7fe      	b.n	800d3a4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	61fb      	str	r3, [r7, #28]
 800d3aa:	e012      	b.n	800d3d2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	7819      	ldrb	r1, [r3, #0]
 800d3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	3334      	adds	r3, #52	; 0x34
 800d3bc:	460a      	mov	r2, r1
 800d3be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d3c0:	68ba      	ldr	r2, [r7, #8]
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d006      	beq.n	800d3da <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	61fb      	str	r3, [r7, #28]
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	2b0f      	cmp	r3, #15
 800d3d6:	d9e9      	bls.n	800d3ac <prvInitialiseNewTask+0x5c>
 800d3d8:	e000      	b.n	800d3dc <prvInitialiseNewTask+0x8c>
		{
			break;
 800d3da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	2b37      	cmp	r3, #55	; 0x37
 800d3e8:	d901      	bls.n	800d3ee <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3ea:	2337      	movs	r3, #55	; 0x37
 800d3ec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d402:	3304      	adds	r3, #4
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe fe87 	bl	800c118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	3318      	adds	r3, #24
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe fe82 	bl	800c118 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d418:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d428:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	2200      	movs	r2, #0
 800d42e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	2200      	movs	r2, #0
 800d434:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d438:	683a      	ldr	r2, [r7, #0]
 800d43a:	68f9      	ldr	r1, [r7, #12]
 800d43c:	69b8      	ldr	r0, [r7, #24]
 800d43e:	f001 fab9 	bl	800e9b4 <pxPortInitialiseStack>
 800d442:	4602      	mov	r2, r0
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d002      	beq.n	800d454 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d452:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d454:	bf00      	nop
 800d456:	3720      	adds	r7, #32
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d464:	f001 fbca 	bl	800ebfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d468:	4b2d      	ldr	r3, [pc, #180]	; (800d520 <prvAddNewTaskToReadyList+0xc4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	3301      	adds	r3, #1
 800d46e:	4a2c      	ldr	r2, [pc, #176]	; (800d520 <prvAddNewTaskToReadyList+0xc4>)
 800d470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d472:	4b2c      	ldr	r3, [pc, #176]	; (800d524 <prvAddNewTaskToReadyList+0xc8>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d109      	bne.n	800d48e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d47a:	4a2a      	ldr	r2, [pc, #168]	; (800d524 <prvAddNewTaskToReadyList+0xc8>)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d480:	4b27      	ldr	r3, [pc, #156]	; (800d520 <prvAddNewTaskToReadyList+0xc4>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d110      	bne.n	800d4aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d488:	f000 fbea 	bl	800dc60 <prvInitialiseTaskLists>
 800d48c:	e00d      	b.n	800d4aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d48e:	4b26      	ldr	r3, [pc, #152]	; (800d528 <prvAddNewTaskToReadyList+0xcc>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d109      	bne.n	800d4aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d496:	4b23      	ldr	r3, [pc, #140]	; (800d524 <prvAddNewTaskToReadyList+0xc8>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d802      	bhi.n	800d4aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4a4:	4a1f      	ldr	r2, [pc, #124]	; (800d524 <prvAddNewTaskToReadyList+0xc8>)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4aa:	4b20      	ldr	r3, [pc, #128]	; (800d52c <prvAddNewTaskToReadyList+0xd0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	4a1e      	ldr	r2, [pc, #120]	; (800d52c <prvAddNewTaskToReadyList+0xd0>)
 800d4b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d4b4:	4b1d      	ldr	r3, [pc, #116]	; (800d52c <prvAddNewTaskToReadyList+0xd0>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c0:	4b1b      	ldr	r3, [pc, #108]	; (800d530 <prvAddNewTaskToReadyList+0xd4>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d903      	bls.n	800d4d0 <prvAddNewTaskToReadyList+0x74>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4cc:	4a18      	ldr	r2, [pc, #96]	; (800d530 <prvAddNewTaskToReadyList+0xd4>)
 800d4ce:	6013      	str	r3, [r2, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4413      	add	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4a15      	ldr	r2, [pc, #84]	; (800d534 <prvAddNewTaskToReadyList+0xd8>)
 800d4de:	441a      	add	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	f7fe fe23 	bl	800c132 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4ec:	f001 fbb4 	bl	800ec58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4f0:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <prvAddNewTaskToReadyList+0xcc>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00e      	beq.n	800d516 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <prvAddNewTaskToReadyList+0xc8>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d502:	429a      	cmp	r2, r3
 800d504:	d207      	bcs.n	800d516 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d506:	4b0c      	ldr	r3, [pc, #48]	; (800d538 <prvAddNewTaskToReadyList+0xdc>)
 800d508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d516:	bf00      	nop
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	2000b00c 	.word	0x2000b00c
 800d524:	2000ab38 	.word	0x2000ab38
 800d528:	2000b018 	.word	0x2000b018
 800d52c:	2000b028 	.word	0x2000b028
 800d530:	2000b014 	.word	0x2000b014
 800d534:	2000ab3c 	.word	0x2000ab3c
 800d538:	e000ed04 	.word	0xe000ed04

0800d53c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08a      	sub	sp, #40	; 0x28
 800d540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d542:	2300      	movs	r3, #0
 800d544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d546:	2300      	movs	r3, #0
 800d548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d54a:	463a      	mov	r2, r7
 800d54c:	1d39      	adds	r1, r7, #4
 800d54e:	f107 0308 	add.w	r3, r7, #8
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fd8c 	bl	800c070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	9202      	str	r2, [sp, #8]
 800d560:	9301      	str	r3, [sp, #4]
 800d562:	2300      	movs	r3, #0
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	2300      	movs	r3, #0
 800d568:	460a      	mov	r2, r1
 800d56a:	4920      	ldr	r1, [pc, #128]	; (800d5ec <vTaskStartScheduler+0xb0>)
 800d56c:	4820      	ldr	r0, [pc, #128]	; (800d5f0 <vTaskStartScheduler+0xb4>)
 800d56e:	f7ff fe51 	bl	800d214 <xTaskCreateStatic>
 800d572:	4602      	mov	r2, r0
 800d574:	4b1f      	ldr	r3, [pc, #124]	; (800d5f4 <vTaskStartScheduler+0xb8>)
 800d576:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d578:	4b1e      	ldr	r3, [pc, #120]	; (800d5f4 <vTaskStartScheduler+0xb8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d580:	2301      	movs	r3, #1
 800d582:	617b      	str	r3, [r7, #20]
 800d584:	e001      	b.n	800d58a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d586:	2300      	movs	r3, #0
 800d588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d102      	bne.n	800d596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d590:	f000 ff06 	bl	800e3a0 <xTimerCreateTimerTask>
 800d594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d115      	bne.n	800d5c8 <vTaskStartScheduler+0x8c>
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5ae:	4b12      	ldr	r3, [pc, #72]	; (800d5f8 <vTaskStartScheduler+0xbc>)
 800d5b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5b6:	4b11      	ldr	r3, [pc, #68]	; (800d5fc <vTaskStartScheduler+0xc0>)
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d5bc:	4b10      	ldr	r3, [pc, #64]	; (800d600 <vTaskStartScheduler+0xc4>)
 800d5be:	2200      	movs	r2, #0
 800d5c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5c2:	f001 fa7d 	bl	800eac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5c6:	e00d      	b.n	800d5e4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5ce:	d109      	bne.n	800d5e4 <vTaskStartScheduler+0xa8>
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	60fb      	str	r3, [r7, #12]
 800d5e2:	e7fe      	b.n	800d5e2 <vTaskStartScheduler+0xa6>
}
 800d5e4:	bf00      	nop
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	08013688 	.word	0x08013688
 800d5f0:	0800dc31 	.word	0x0800dc31
 800d5f4:	2000b030 	.word	0x2000b030
 800d5f8:	2000b02c 	.word	0x2000b02c
 800d5fc:	2000b018 	.word	0x2000b018
 800d600:	2000b010 	.word	0x2000b010

0800d604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d608:	4b04      	ldr	r3, [pc, #16]	; (800d61c <vTaskSuspendAll+0x18>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3301      	adds	r3, #1
 800d60e:	4a03      	ldr	r2, [pc, #12]	; (800d61c <vTaskSuspendAll+0x18>)
 800d610:	6013      	str	r3, [r2, #0]
}
 800d612:	bf00      	nop
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	2000b034 	.word	0x2000b034

0800d620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d626:	2300      	movs	r3, #0
 800d628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d62e:	4b41      	ldr	r3, [pc, #260]	; (800d734 <xTaskResumeAll+0x114>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d109      	bne.n	800d64a <xTaskResumeAll+0x2a>
 800d636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	603b      	str	r3, [r7, #0]
 800d648:	e7fe      	b.n	800d648 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d64a:	f001 fad7 	bl	800ebfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d64e:	4b39      	ldr	r3, [pc, #228]	; (800d734 <xTaskResumeAll+0x114>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3b01      	subs	r3, #1
 800d654:	4a37      	ldr	r2, [pc, #220]	; (800d734 <xTaskResumeAll+0x114>)
 800d656:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d658:	4b36      	ldr	r3, [pc, #216]	; (800d734 <xTaskResumeAll+0x114>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d162      	bne.n	800d726 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d660:	4b35      	ldr	r3, [pc, #212]	; (800d738 <xTaskResumeAll+0x118>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d05e      	beq.n	800d726 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d668:	e02f      	b.n	800d6ca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d66a:	4b34      	ldr	r3, [pc, #208]	; (800d73c <xTaskResumeAll+0x11c>)
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3318      	adds	r3, #24
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe fdb8 	bl	800c1ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3304      	adds	r3, #4
 800d680:	4618      	mov	r0, r3
 800d682:	f7fe fdb3 	bl	800c1ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68a:	4b2d      	ldr	r3, [pc, #180]	; (800d740 <xTaskResumeAll+0x120>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d903      	bls.n	800d69a <xTaskResumeAll+0x7a>
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d696:	4a2a      	ldr	r2, [pc, #168]	; (800d740 <xTaskResumeAll+0x120>)
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d69e:	4613      	mov	r3, r2
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4413      	add	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4a27      	ldr	r2, [pc, #156]	; (800d744 <xTaskResumeAll+0x124>)
 800d6a8:	441a      	add	r2, r3
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	3304      	adds	r3, #4
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	f7fe fd3e 	bl	800c132 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ba:	4b23      	ldr	r3, [pc, #140]	; (800d748 <xTaskResumeAll+0x128>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d302      	bcc.n	800d6ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d6c4:	4b21      	ldr	r3, [pc, #132]	; (800d74c <xTaskResumeAll+0x12c>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6ca:	4b1c      	ldr	r3, [pc, #112]	; (800d73c <xTaskResumeAll+0x11c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1cb      	bne.n	800d66a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d6d8:	f000 fb5c 	bl	800dd94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d6dc:	4b1c      	ldr	r3, [pc, #112]	; (800d750 <xTaskResumeAll+0x130>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d010      	beq.n	800d70a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6e8:	f000 f846 	bl	800d778 <xTaskIncrementTick>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d002      	beq.n	800d6f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d6f2:	4b16      	ldr	r3, [pc, #88]	; (800d74c <xTaskResumeAll+0x12c>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1f1      	bne.n	800d6e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d704:	4b12      	ldr	r3, [pc, #72]	; (800d750 <xTaskResumeAll+0x130>)
 800d706:	2200      	movs	r2, #0
 800d708:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d70a:	4b10      	ldr	r3, [pc, #64]	; (800d74c <xTaskResumeAll+0x12c>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d009      	beq.n	800d726 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d712:	2301      	movs	r3, #1
 800d714:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d716:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <xTaskResumeAll+0x134>)
 800d718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d726:	f001 fa97 	bl	800ec58 <vPortExitCritical>

	return xAlreadyYielded;
 800d72a:	68bb      	ldr	r3, [r7, #8]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	2000b034 	.word	0x2000b034
 800d738:	2000b00c 	.word	0x2000b00c
 800d73c:	2000afcc 	.word	0x2000afcc
 800d740:	2000b014 	.word	0x2000b014
 800d744:	2000ab3c 	.word	0x2000ab3c
 800d748:	2000ab38 	.word	0x2000ab38
 800d74c:	2000b020 	.word	0x2000b020
 800d750:	2000b01c 	.word	0x2000b01c
 800d754:	e000ed04 	.word	0xe000ed04

0800d758 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d75e:	4b05      	ldr	r3, [pc, #20]	; (800d774 <xTaskGetTickCount+0x1c>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d764:	687b      	ldr	r3, [r7, #4]
}
 800d766:	4618      	mov	r0, r3
 800d768:	370c      	adds	r7, #12
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	2000b010 	.word	0x2000b010

0800d778 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d782:	4b51      	ldr	r3, [pc, #324]	; (800d8c8 <xTaskIncrementTick+0x150>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f040 808d 	bne.w	800d8a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d78c:	4b4f      	ldr	r3, [pc, #316]	; (800d8cc <xTaskIncrementTick+0x154>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3301      	adds	r3, #1
 800d792:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d794:	4a4d      	ldr	r2, [pc, #308]	; (800d8cc <xTaskIncrementTick+0x154>)
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d11f      	bne.n	800d7e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d7a0:	4b4b      	ldr	r3, [pc, #300]	; (800d8d0 <xTaskIncrementTick+0x158>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d009      	beq.n	800d7be <xTaskIncrementTick+0x46>
 800d7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	e7fe      	b.n	800d7bc <xTaskIncrementTick+0x44>
 800d7be:	4b44      	ldr	r3, [pc, #272]	; (800d8d0 <xTaskIncrementTick+0x158>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	4b43      	ldr	r3, [pc, #268]	; (800d8d4 <xTaskIncrementTick+0x15c>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a41      	ldr	r2, [pc, #260]	; (800d8d0 <xTaskIncrementTick+0x158>)
 800d7ca:	6013      	str	r3, [r2, #0]
 800d7cc:	4a41      	ldr	r2, [pc, #260]	; (800d8d4 <xTaskIncrementTick+0x15c>)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	4b41      	ldr	r3, [pc, #260]	; (800d8d8 <xTaskIncrementTick+0x160>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	4a3f      	ldr	r2, [pc, #252]	; (800d8d8 <xTaskIncrementTick+0x160>)
 800d7da:	6013      	str	r3, [r2, #0]
 800d7dc:	f000 fada 	bl	800dd94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7e0:	4b3e      	ldr	r3, [pc, #248]	; (800d8dc <xTaskIncrementTick+0x164>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d34e      	bcc.n	800d888 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7ea:	4b39      	ldr	r3, [pc, #228]	; (800d8d0 <xTaskIncrementTick+0x158>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <xTaskIncrementTick+0x80>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e000      	b.n	800d7fa <xTaskIncrementTick+0x82>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d004      	beq.n	800d808 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7fe:	4b37      	ldr	r3, [pc, #220]	; (800d8dc <xTaskIncrementTick+0x164>)
 800d800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d804:	601a      	str	r2, [r3, #0]
					break;
 800d806:	e03f      	b.n	800d888 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d808:	4b31      	ldr	r3, [pc, #196]	; (800d8d0 <xTaskIncrementTick+0x158>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d203      	bcs.n	800d828 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d820:	4a2e      	ldr	r2, [pc, #184]	; (800d8dc <xTaskIncrementTick+0x164>)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6013      	str	r3, [r2, #0]
						break;
 800d826:	e02f      	b.n	800d888 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	3304      	adds	r3, #4
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fe fcdd 	bl	800c1ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d836:	2b00      	cmp	r3, #0
 800d838:	d004      	beq.n	800d844 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	3318      	adds	r3, #24
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe fcd4 	bl	800c1ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d848:	4b25      	ldr	r3, [pc, #148]	; (800d8e0 <xTaskIncrementTick+0x168>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d903      	bls.n	800d858 <xTaskIncrementTick+0xe0>
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	4a22      	ldr	r2, [pc, #136]	; (800d8e0 <xTaskIncrementTick+0x168>)
 800d856:	6013      	str	r3, [r2, #0]
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85c:	4613      	mov	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4413      	add	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4a1f      	ldr	r2, [pc, #124]	; (800d8e4 <xTaskIncrementTick+0x16c>)
 800d866:	441a      	add	r2, r3
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	3304      	adds	r3, #4
 800d86c:	4619      	mov	r1, r3
 800d86e:	4610      	mov	r0, r2
 800d870:	f7fe fc5f 	bl	800c132 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d878:	4b1b      	ldr	r3, [pc, #108]	; (800d8e8 <xTaskIncrementTick+0x170>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87e:	429a      	cmp	r2, r3
 800d880:	d3b3      	bcc.n	800d7ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d882:	2301      	movs	r3, #1
 800d884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d886:	e7b0      	b.n	800d7ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d888:	4b17      	ldr	r3, [pc, #92]	; (800d8e8 <xTaskIncrementTick+0x170>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88e:	4915      	ldr	r1, [pc, #84]	; (800d8e4 <xTaskIncrementTick+0x16c>)
 800d890:	4613      	mov	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4413      	add	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	440b      	add	r3, r1
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d907      	bls.n	800d8b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e004      	b.n	800d8b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d8a6:	4b11      	ldr	r3, [pc, #68]	; (800d8ec <xTaskIncrementTick+0x174>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	4a0f      	ldr	r2, [pc, #60]	; (800d8ec <xTaskIncrementTick+0x174>)
 800d8ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d8b0:	4b0f      	ldr	r3, [pc, #60]	; (800d8f0 <xTaskIncrementTick+0x178>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d001      	beq.n	800d8bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d8bc:	697b      	ldr	r3, [r7, #20]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	2000b034 	.word	0x2000b034
 800d8cc:	2000b010 	.word	0x2000b010
 800d8d0:	2000afc4 	.word	0x2000afc4
 800d8d4:	2000afc8 	.word	0x2000afc8
 800d8d8:	2000b024 	.word	0x2000b024
 800d8dc:	2000b02c 	.word	0x2000b02c
 800d8e0:	2000b014 	.word	0x2000b014
 800d8e4:	2000ab3c 	.word	0x2000ab3c
 800d8e8:	2000ab38 	.word	0x2000ab38
 800d8ec:	2000b01c 	.word	0x2000b01c
 800d8f0:	2000b020 	.word	0x2000b020

0800d8f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8fa:	4b2f      	ldr	r3, [pc, #188]	; (800d9b8 <vTaskSwitchContext+0xc4>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d902:	4b2e      	ldr	r3, [pc, #184]	; (800d9bc <vTaskSwitchContext+0xc8>)
 800d904:	2201      	movs	r2, #1
 800d906:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d908:	e051      	b.n	800d9ae <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 800d90a:	4b2c      	ldr	r3, [pc, #176]	; (800d9bc <vTaskSwitchContext+0xc8>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d910:	4b2b      	ldr	r3, [pc, #172]	; (800d9c0 <vTaskSwitchContext+0xcc>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4b2a      	ldr	r3, [pc, #168]	; (800d9c0 <vTaskSwitchContext+0xcc>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d808      	bhi.n	800d932 <vTaskSwitchContext+0x3e>
 800d920:	4b27      	ldr	r3, [pc, #156]	; (800d9c0 <vTaskSwitchContext+0xcc>)
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	4b26      	ldr	r3, [pc, #152]	; (800d9c0 <vTaskSwitchContext+0xcc>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3334      	adds	r3, #52	; 0x34
 800d92a:	4619      	mov	r1, r3
 800d92c:	4610      	mov	r0, r2
 800d92e:	f7fe fb94 	bl	800c05a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d932:	4b24      	ldr	r3, [pc, #144]	; (800d9c4 <vTaskSwitchContext+0xd0>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	e00f      	b.n	800d95a <vTaskSwitchContext+0x66>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d109      	bne.n	800d954 <vTaskSwitchContext+0x60>
 800d940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	607b      	str	r3, [r7, #4]
 800d952:	e7fe      	b.n	800d952 <vTaskSwitchContext+0x5e>
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3b01      	subs	r3, #1
 800d958:	60fb      	str	r3, [r7, #12]
 800d95a:	491b      	ldr	r1, [pc, #108]	; (800d9c8 <vTaskSwitchContext+0xd4>)
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	4613      	mov	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	4413      	add	r3, r2
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	440b      	add	r3, r1
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d0e5      	beq.n	800d93a <vTaskSwitchContext+0x46>
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	4613      	mov	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4413      	add	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4a13      	ldr	r2, [pc, #76]	; (800d9c8 <vTaskSwitchContext+0xd4>)
 800d97a:	4413      	add	r3, r2
 800d97c:	60bb      	str	r3, [r7, #8]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	685a      	ldr	r2, [r3, #4]
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	605a      	str	r2, [r3, #4]
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	3308      	adds	r3, #8
 800d990:	429a      	cmp	r2, r3
 800d992:	d104      	bne.n	800d99e <vTaskSwitchContext+0xaa>
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	4a06      	ldr	r2, [pc, #24]	; (800d9c0 <vTaskSwitchContext+0xcc>)
 800d9a6:	6013      	str	r3, [r2, #0]
 800d9a8:	4a06      	ldr	r2, [pc, #24]	; (800d9c4 <vTaskSwitchContext+0xd0>)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6013      	str	r3, [r2, #0]
}
 800d9ae:	bf00      	nop
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	2000b034 	.word	0x2000b034
 800d9bc:	2000b020 	.word	0x2000b020
 800d9c0:	2000ab38 	.word	0x2000ab38
 800d9c4:	2000b014 	.word	0x2000b014
 800d9c8:	2000ab3c 	.word	0x2000ab3c

0800d9cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d109      	bne.n	800d9f0 <vTaskPlaceOnEventList+0x24>
 800d9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	e7fe      	b.n	800d9ee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9f0:	4b07      	ldr	r3, [pc, #28]	; (800da10 <vTaskPlaceOnEventList+0x44>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3318      	adds	r3, #24
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7fe fbbe 	bl	800c17a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9fe:	2101      	movs	r1, #1
 800da00:	6838      	ldr	r0, [r7, #0]
 800da02:	f000 fc79 	bl	800e2f8 <prvAddCurrentTaskToDelayedList>
}
 800da06:	bf00      	nop
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	2000ab38 	.word	0x2000ab38

0800da14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d109      	bne.n	800da3a <vTaskPlaceOnEventListRestricted+0x26>
 800da26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	617b      	str	r3, [r7, #20]
 800da38:	e7fe      	b.n	800da38 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da3a:	4b0a      	ldr	r3, [pc, #40]	; (800da64 <vTaskPlaceOnEventListRestricted+0x50>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	3318      	adds	r3, #24
 800da40:	4619      	mov	r1, r3
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f7fe fb75 	bl	800c132 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d002      	beq.n	800da54 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800da4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da54:	6879      	ldr	r1, [r7, #4]
 800da56:	68b8      	ldr	r0, [r7, #8]
 800da58:	f000 fc4e 	bl	800e2f8 <prvAddCurrentTaskToDelayedList>
	}
 800da5c:	bf00      	nop
 800da5e:	3718      	adds	r7, #24
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	2000ab38 	.word	0x2000ab38

0800da68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d109      	bne.n	800da92 <xTaskRemoveFromEventList+0x2a>
 800da7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	60fb      	str	r3, [r7, #12]
 800da90:	e7fe      	b.n	800da90 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	3318      	adds	r3, #24
 800da96:	4618      	mov	r0, r3
 800da98:	f7fe fba8 	bl	800c1ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da9c:	4b1d      	ldr	r3, [pc, #116]	; (800db14 <xTaskRemoveFromEventList+0xac>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d11d      	bne.n	800dae0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	3304      	adds	r3, #4
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe fb9f 	bl	800c1ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab2:	4b19      	ldr	r3, [pc, #100]	; (800db18 <xTaskRemoveFromEventList+0xb0>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d903      	bls.n	800dac2 <xTaskRemoveFromEventList+0x5a>
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dabe:	4a16      	ldr	r2, [pc, #88]	; (800db18 <xTaskRemoveFromEventList+0xb0>)
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4a13      	ldr	r2, [pc, #76]	; (800db1c <xTaskRemoveFromEventList+0xb4>)
 800dad0:	441a      	add	r2, r3
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f7fe fb2a 	bl	800c132 <vListInsertEnd>
 800dade:	e005      	b.n	800daec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	3318      	adds	r3, #24
 800dae4:	4619      	mov	r1, r3
 800dae6:	480e      	ldr	r0, [pc, #56]	; (800db20 <xTaskRemoveFromEventList+0xb8>)
 800dae8:	f7fe fb23 	bl	800c132 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf0:	4b0c      	ldr	r3, [pc, #48]	; (800db24 <xTaskRemoveFromEventList+0xbc>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d905      	bls.n	800db06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dafa:	2301      	movs	r3, #1
 800dafc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dafe:	4b0a      	ldr	r3, [pc, #40]	; (800db28 <xTaskRemoveFromEventList+0xc0>)
 800db00:	2201      	movs	r2, #1
 800db02:	601a      	str	r2, [r3, #0]
 800db04:	e001      	b.n	800db0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800db06:	2300      	movs	r3, #0
 800db08:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800db0a:	697b      	ldr	r3, [r7, #20]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3718      	adds	r7, #24
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	2000b034 	.word	0x2000b034
 800db18:	2000b014 	.word	0x2000b014
 800db1c:	2000ab3c 	.word	0x2000ab3c
 800db20:	2000afcc 	.word	0x2000afcc
 800db24:	2000ab38 	.word	0x2000ab38
 800db28:	2000b020 	.word	0x2000b020

0800db2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db34:	4b06      	ldr	r3, [pc, #24]	; (800db50 <vTaskInternalSetTimeOutState+0x24>)
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db3c:	4b05      	ldr	r3, [pc, #20]	; (800db54 <vTaskInternalSetTimeOutState+0x28>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	605a      	str	r2, [r3, #4]
}
 800db44:	bf00      	nop
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	2000b024 	.word	0x2000b024
 800db54:	2000b010 	.word	0x2000b010

0800db58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b088      	sub	sp, #32
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d109      	bne.n	800db7c <xTaskCheckForTimeOut+0x24>
 800db68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	613b      	str	r3, [r7, #16]
 800db7a:	e7fe      	b.n	800db7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d109      	bne.n	800db96 <xTaskCheckForTimeOut+0x3e>
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	60fb      	str	r3, [r7, #12]
 800db94:	e7fe      	b.n	800db94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800db96:	f001 f831 	bl	800ebfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db9a:	4b1d      	ldr	r3, [pc, #116]	; (800dc10 <xTaskCheckForTimeOut+0xb8>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	69ba      	ldr	r2, [r7, #24]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbb2:	d102      	bne.n	800dbba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	61fb      	str	r3, [r7, #28]
 800dbb8:	e023      	b.n	800dc02 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b15      	ldr	r3, [pc, #84]	; (800dc14 <xTaskCheckForTimeOut+0xbc>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d007      	beq.n	800dbd6 <xTaskCheckForTimeOut+0x7e>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	69ba      	ldr	r2, [r7, #24]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d302      	bcc.n	800dbd6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	61fb      	str	r3, [r7, #28]
 800dbd4:	e015      	b.n	800dc02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	697a      	ldr	r2, [r7, #20]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d20b      	bcs.n	800dbf8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	1ad2      	subs	r2, r2, r3
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff ff9d 	bl	800db2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	61fb      	str	r3, [r7, #28]
 800dbf6:	e004      	b.n	800dc02 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc02:	f001 f829 	bl	800ec58 <vPortExitCritical>

	return xReturn;
 800dc06:	69fb      	ldr	r3, [r7, #28]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3720      	adds	r7, #32
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	2000b010 	.word	0x2000b010
 800dc14:	2000b024 	.word	0x2000b024

0800dc18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc18:	b480      	push	{r7}
 800dc1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc1c:	4b03      	ldr	r3, [pc, #12]	; (800dc2c <vTaskMissedYield+0x14>)
 800dc1e:	2201      	movs	r2, #1
 800dc20:	601a      	str	r2, [r3, #0]
}
 800dc22:	bf00      	nop
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr
 800dc2c:	2000b020 	.word	0x2000b020

0800dc30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc38:	f000 f852 	bl	800dce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc3c:	4b06      	ldr	r3, [pc, #24]	; (800dc58 <prvIdleTask+0x28>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d9f9      	bls.n	800dc38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc44:	4b05      	ldr	r3, [pc, #20]	; (800dc5c <prvIdleTask+0x2c>)
 800dc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc54:	e7f0      	b.n	800dc38 <prvIdleTask+0x8>
 800dc56:	bf00      	nop
 800dc58:	2000ab3c 	.word	0x2000ab3c
 800dc5c:	e000ed04 	.word	0xe000ed04

0800dc60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc66:	2300      	movs	r3, #0
 800dc68:	607b      	str	r3, [r7, #4]
 800dc6a:	e00c      	b.n	800dc86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	4413      	add	r3, r2
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4a12      	ldr	r2, [pc, #72]	; (800dcc0 <prvInitialiseTaskLists+0x60>)
 800dc78:	4413      	add	r3, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fa2c 	bl	800c0d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3301      	adds	r3, #1
 800dc84:	607b      	str	r3, [r7, #4]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2b37      	cmp	r3, #55	; 0x37
 800dc8a:	d9ef      	bls.n	800dc6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc8c:	480d      	ldr	r0, [pc, #52]	; (800dcc4 <prvInitialiseTaskLists+0x64>)
 800dc8e:	f7fe fa23 	bl	800c0d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc92:	480d      	ldr	r0, [pc, #52]	; (800dcc8 <prvInitialiseTaskLists+0x68>)
 800dc94:	f7fe fa20 	bl	800c0d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc98:	480c      	ldr	r0, [pc, #48]	; (800dccc <prvInitialiseTaskLists+0x6c>)
 800dc9a:	f7fe fa1d 	bl	800c0d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc9e:	480c      	ldr	r0, [pc, #48]	; (800dcd0 <prvInitialiseTaskLists+0x70>)
 800dca0:	f7fe fa1a 	bl	800c0d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dca4:	480b      	ldr	r0, [pc, #44]	; (800dcd4 <prvInitialiseTaskLists+0x74>)
 800dca6:	f7fe fa17 	bl	800c0d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dcaa:	4b0b      	ldr	r3, [pc, #44]	; (800dcd8 <prvInitialiseTaskLists+0x78>)
 800dcac:	4a05      	ldr	r2, [pc, #20]	; (800dcc4 <prvInitialiseTaskLists+0x64>)
 800dcae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dcb0:	4b0a      	ldr	r3, [pc, #40]	; (800dcdc <prvInitialiseTaskLists+0x7c>)
 800dcb2:	4a05      	ldr	r2, [pc, #20]	; (800dcc8 <prvInitialiseTaskLists+0x68>)
 800dcb4:	601a      	str	r2, [r3, #0]
}
 800dcb6:	bf00      	nop
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2000ab3c 	.word	0x2000ab3c
 800dcc4:	2000af9c 	.word	0x2000af9c
 800dcc8:	2000afb0 	.word	0x2000afb0
 800dccc:	2000afcc 	.word	0x2000afcc
 800dcd0:	2000afe0 	.word	0x2000afe0
 800dcd4:	2000aff8 	.word	0x2000aff8
 800dcd8:	2000afc4 	.word	0x2000afc4
 800dcdc:	2000afc8 	.word	0x2000afc8

0800dce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dce6:	e019      	b.n	800dd1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dce8:	f000 ff88 	bl	800ebfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dcec:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <prvCheckTasksWaitingTermination+0x4c>)
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fa77 	bl	800c1ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcfe:	4b0c      	ldr	r3, [pc, #48]	; (800dd30 <prvCheckTasksWaitingTermination+0x50>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	4a0a      	ldr	r2, [pc, #40]	; (800dd30 <prvCheckTasksWaitingTermination+0x50>)
 800dd06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <prvCheckTasksWaitingTermination+0x54>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	4a09      	ldr	r2, [pc, #36]	; (800dd34 <prvCheckTasksWaitingTermination+0x54>)
 800dd10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd12:	f000 ffa1 	bl	800ec58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 f80e 	bl	800dd38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd1c:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <prvCheckTasksWaitingTermination+0x54>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e1      	bne.n	800dce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd24:	bf00      	nop
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	2000afe0 	.word	0x2000afe0
 800dd30:	2000b00c 	.word	0x2000b00c
 800dd34:	2000aff4 	.word	0x2000aff4

0800dd38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d108      	bne.n	800dd5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f001 f90e 	bl	800ef70 <vPortFree>
				vPortFree( pxTCB );
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f001 f90b 	bl	800ef70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd5a:	e017      	b.n	800dd8c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d103      	bne.n	800dd6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f001 f902 	bl	800ef70 <vPortFree>
	}
 800dd6c:	e00e      	b.n	800dd8c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d009      	beq.n	800dd8c <prvDeleteTCB+0x54>
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	e7fe      	b.n	800dd8a <prvDeleteTCB+0x52>
	}
 800dd8c:	bf00      	nop
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd9a:	4b0f      	ldr	r3, [pc, #60]	; (800ddd8 <prvResetNextTaskUnblockTime+0x44>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <prvResetNextTaskUnblockTime+0x14>
 800dda4:	2301      	movs	r3, #1
 800dda6:	e000      	b.n	800ddaa <prvResetNextTaskUnblockTime+0x16>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d004      	beq.n	800ddb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ddae:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <prvResetNextTaskUnblockTime+0x48>)
 800ddb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ddb6:	e008      	b.n	800ddca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ddb8:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <prvResetNextTaskUnblockTime+0x44>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	4a05      	ldr	r2, [pc, #20]	; (800dddc <prvResetNextTaskUnblockTime+0x48>)
 800ddc8:	6013      	str	r3, [r2, #0]
}
 800ddca:	bf00      	nop
 800ddcc:	370c      	adds	r7, #12
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	2000afc4 	.word	0x2000afc4
 800dddc:	2000b02c 	.word	0x2000b02c

0800dde0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dde6:	4b0b      	ldr	r3, [pc, #44]	; (800de14 <xTaskGetSchedulerState+0x34>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	607b      	str	r3, [r7, #4]
 800ddf2:	e008      	b.n	800de06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddf4:	4b08      	ldr	r3, [pc, #32]	; (800de18 <xTaskGetSchedulerState+0x38>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d102      	bne.n	800de02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	607b      	str	r3, [r7, #4]
 800de00:	e001      	b.n	800de06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de02:	2300      	movs	r3, #0
 800de04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de06:	687b      	ldr	r3, [r7, #4]
	}
 800de08:	4618      	mov	r0, r3
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	2000b018 	.word	0x2000b018
 800de18:	2000b034 	.word	0x2000b034

0800de1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800de28:	2300      	movs	r3, #0
 800de2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d056      	beq.n	800dee0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de36:	4b2d      	ldr	r3, [pc, #180]	; (800deec <xTaskPriorityInherit+0xd0>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d246      	bcs.n	800dece <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	699b      	ldr	r3, [r3, #24]
 800de44:	2b00      	cmp	r3, #0
 800de46:	db06      	blt.n	800de56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de48:	4b28      	ldr	r3, [pc, #160]	; (800deec <xTaskPriorityInherit+0xd0>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	6959      	ldr	r1, [r3, #20]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5e:	4613      	mov	r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4a22      	ldr	r2, [pc, #136]	; (800def0 <xTaskPriorityInherit+0xd4>)
 800de68:	4413      	add	r3, r2
 800de6a:	4299      	cmp	r1, r3
 800de6c:	d101      	bne.n	800de72 <xTaskPriorityInherit+0x56>
 800de6e:	2301      	movs	r3, #1
 800de70:	e000      	b.n	800de74 <xTaskPriorityInherit+0x58>
 800de72:	2300      	movs	r3, #0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d022      	beq.n	800debe <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	3304      	adds	r3, #4
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fe f9b5 	bl	800c1ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de82:	4b1a      	ldr	r3, [pc, #104]	; (800deec <xTaskPriorityInherit+0xd0>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de90:	4b18      	ldr	r3, [pc, #96]	; (800def4 <xTaskPriorityInherit+0xd8>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	429a      	cmp	r2, r3
 800de96:	d903      	bls.n	800dea0 <xTaskPriorityInherit+0x84>
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9c:	4a15      	ldr	r2, [pc, #84]	; (800def4 <xTaskPriorityInherit+0xd8>)
 800de9e:	6013      	str	r3, [r2, #0]
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea4:	4613      	mov	r3, r2
 800dea6:	009b      	lsls	r3, r3, #2
 800dea8:	4413      	add	r3, r2
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4a10      	ldr	r2, [pc, #64]	; (800def0 <xTaskPriorityInherit+0xd4>)
 800deae:	441a      	add	r2, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	3304      	adds	r3, #4
 800deb4:	4619      	mov	r1, r3
 800deb6:	4610      	mov	r0, r2
 800deb8:	f7fe f93b 	bl	800c132 <vListInsertEnd>
 800debc:	e004      	b.n	800dec8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800debe:	4b0b      	ldr	r3, [pc, #44]	; (800deec <xTaskPriorityInherit+0xd0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dec8:	2301      	movs	r3, #1
 800deca:	60fb      	str	r3, [r7, #12]
 800decc:	e008      	b.n	800dee0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ded2:	4b06      	ldr	r3, [pc, #24]	; (800deec <xTaskPriorityInherit+0xd0>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded8:	429a      	cmp	r2, r3
 800deda:	d201      	bcs.n	800dee0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dedc:	2301      	movs	r3, #1
 800dede:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dee0:	68fb      	ldr	r3, [r7, #12]
	}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	2000ab38 	.word	0x2000ab38
 800def0:	2000ab3c 	.word	0x2000ab3c
 800def4:	2000b014 	.word	0x2000b014

0800def8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df04:	2300      	movs	r3, #0
 800df06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d054      	beq.n	800dfb8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df0e:	4b2d      	ldr	r3, [pc, #180]	; (800dfc4 <xTaskPriorityDisinherit+0xcc>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	693a      	ldr	r2, [r7, #16]
 800df14:	429a      	cmp	r2, r3
 800df16:	d009      	beq.n	800df2c <xTaskPriorityDisinherit+0x34>
 800df18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1c:	f383 8811 	msr	BASEPRI, r3
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	e7fe      	b.n	800df2a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df30:	2b00      	cmp	r3, #0
 800df32:	d109      	bne.n	800df48 <xTaskPriorityDisinherit+0x50>
 800df34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	60bb      	str	r3, [r7, #8]
 800df46:	e7fe      	b.n	800df46 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df4c:	1e5a      	subs	r2, r3, #1
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d02c      	beq.n	800dfb8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df62:	2b00      	cmp	r3, #0
 800df64:	d128      	bne.n	800dfb8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	3304      	adds	r3, #4
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe f93e 	bl	800c1ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df88:	4b0f      	ldr	r3, [pc, #60]	; (800dfc8 <xTaskPriorityDisinherit+0xd0>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d903      	bls.n	800df98 <xTaskPriorityDisinherit+0xa0>
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df94:	4a0c      	ldr	r2, [pc, #48]	; (800dfc8 <xTaskPriorityDisinherit+0xd0>)
 800df96:	6013      	str	r3, [r2, #0]
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9c:	4613      	mov	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4a09      	ldr	r2, [pc, #36]	; (800dfcc <xTaskPriorityDisinherit+0xd4>)
 800dfa6:	441a      	add	r2, r3
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	4619      	mov	r1, r3
 800dfae:	4610      	mov	r0, r2
 800dfb0:	f7fe f8bf 	bl	800c132 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfb8:	697b      	ldr	r3, [r7, #20]
	}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3718      	adds	r7, #24
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	2000ab38 	.word	0x2000ab38
 800dfc8:	2000b014 	.word	0x2000b014
 800dfcc:	2000ab3c 	.word	0x2000ab3c

0800dfd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b088      	sub	sp, #32
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d06d      	beq.n	800e0c4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d109      	bne.n	800e004 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800dff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	60fb      	str	r3, [r7, #12]
 800e002:	e7fe      	b.n	800e002 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d902      	bls.n	800e014 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	61fb      	str	r3, [r7, #28]
 800e012:	e002      	b.n	800e01a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e018:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01e:	69fa      	ldr	r2, [r7, #28]
 800e020:	429a      	cmp	r2, r3
 800e022:	d04f      	beq.n	800e0c4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d14a      	bne.n	800e0c4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e02e:	4b27      	ldr	r3, [pc, #156]	; (800e0cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	69ba      	ldr	r2, [r7, #24]
 800e034:	429a      	cmp	r2, r3
 800e036:	d109      	bne.n	800e04c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800e038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	60bb      	str	r3, [r7, #8]
 800e04a:	e7fe      	b.n	800e04a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e050:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	69fa      	ldr	r2, [r7, #28]
 800e056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	699b      	ldr	r3, [r3, #24]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	db04      	blt.n	800e06a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	6959      	ldr	r1, [r3, #20]
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4a15      	ldr	r2, [pc, #84]	; (800e0d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e07a:	4413      	add	r3, r2
 800e07c:	4299      	cmp	r1, r3
 800e07e:	d101      	bne.n	800e084 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800e080:	2301      	movs	r3, #1
 800e082:	e000      	b.n	800e086 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800e084:	2300      	movs	r3, #0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d01c      	beq.n	800e0c4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	3304      	adds	r3, #4
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fe f8ac 	bl	800c1ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e098:	4b0e      	ldr	r3, [pc, #56]	; (800e0d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d903      	bls.n	800e0a8 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a4:	4a0b      	ldr	r2, [pc, #44]	; (800e0d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4a06      	ldr	r2, [pc, #24]	; (800e0d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e0b6:	441a      	add	r2, r3
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4610      	mov	r0, r2
 800e0c0:	f7fe f837 	bl	800c132 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0c4:	bf00      	nop
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	2000ab38 	.word	0x2000ab38
 800e0d0:	2000ab3c 	.word	0x2000ab3c
 800e0d4:	2000b014 	.word	0x2000b014

0800e0d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e0d8:	b480      	push	{r7}
 800e0da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e0dc:	4b07      	ldr	r3, [pc, #28]	; (800e0fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d004      	beq.n	800e0ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0e4:	4b05      	ldr	r3, [pc, #20]	; (800e0fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0ea:	3201      	adds	r2, #1
 800e0ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e0ee:	4b03      	ldr	r3, [pc, #12]	; (800e0fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
	}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	2000ab38 	.word	0x2000ab38

0800e100 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e10e:	f000 fd75 	bl	800ebfc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e112:	4b26      	ldr	r3, [pc, #152]	; (800e1ac <xTaskNotifyWait+0xac>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d01a      	beq.n	800e156 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e120:	4b22      	ldr	r3, [pc, #136]	; (800e1ac <xTaskNotifyWait+0xac>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	43d2      	mvns	r2, r2
 800e12a:	400a      	ands	r2, r1
 800e12c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e12e:	4b1f      	ldr	r3, [pc, #124]	; (800e1ac <xTaskNotifyWait+0xac>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00b      	beq.n	800e156 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e13e:	2101      	movs	r1, #1
 800e140:	6838      	ldr	r0, [r7, #0]
 800e142:	f000 f8d9 	bl	800e2f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e146:	4b1a      	ldr	r3, [pc, #104]	; (800e1b0 <xTaskNotifyWait+0xb0>)
 800e148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e156:	f000 fd7f 	bl	800ec58 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e15a:	f000 fd4f 	bl	800ebfc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d004      	beq.n	800e16e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e164:	4b11      	ldr	r3, [pc, #68]	; (800e1ac <xTaskNotifyWait+0xac>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e16e:	4b0f      	ldr	r3, [pc, #60]	; (800e1ac <xTaskNotifyWait+0xac>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d002      	beq.n	800e182 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e008      	b.n	800e194 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e182:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <xTaskNotifyWait+0xac>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	43d2      	mvns	r2, r2
 800e18c:	400a      	ands	r2, r1
 800e18e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800e190:	2301      	movs	r3, #1
 800e192:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e194:	4b05      	ldr	r3, [pc, #20]	; (800e1ac <xTaskNotifyWait+0xac>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2200      	movs	r2, #0
 800e19a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800e19e:	f000 fd5b 	bl	800ec58 <vPortExitCritical>

		return xReturn;
 800e1a2:	697b      	ldr	r3, [r7, #20]
	}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3718      	adds	r7, #24
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	2000ab38 	.word	0x2000ab38
 800e1b0:	e000ed04 	.word	0xe000ed04

0800e1b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08a      	sub	sp, #40	; 0x28
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	603b      	str	r3, [r7, #0]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d109      	bne.n	800e1e2 <xTaskGenericNotify+0x2e>
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	61bb      	str	r3, [r7, #24]
 800e1e0:	e7fe      	b.n	800e1e0 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e1e6:	f000 fd09 	bl	800ebfc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d003      	beq.n	800e1f8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e1fe:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e200:	6a3b      	ldr	r3, [r7, #32]
 800e202:	2202      	movs	r2, #2
 800e204:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	d827      	bhi.n	800e25e <xTaskGenericNotify+0xaa>
 800e20e:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <xTaskGenericNotify+0x60>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e25f 	.word	0x0800e25f
 800e218:	0800e229 	.word	0x0800e229
 800e21c:	0800e237 	.word	0x0800e237
 800e220:	0800e243 	.word	0x0800e243
 800e224:	0800e24b 	.word	0x0800e24b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e228:	6a3b      	ldr	r3, [r7, #32]
 800e22a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	431a      	orrs	r2, r3
 800e230:	6a3b      	ldr	r3, [r7, #32]
 800e232:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e234:	e013      	b.n	800e25e <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e23a:	1c5a      	adds	r2, r3, #1
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e240:	e00d      	b.n	800e25e <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e248:	e009      	b.n	800e25e <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e24a:	7ffb      	ldrb	r3, [r7, #31]
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d003      	beq.n	800e258 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e250:	6a3b      	ldr	r3, [r7, #32]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e256:	e001      	b.n	800e25c <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 800e258:	2300      	movs	r3, #0
 800e25a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e25c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e25e:	7ffb      	ldrb	r3, [r7, #31]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d139      	bne.n	800e2d8 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e264:	6a3b      	ldr	r3, [r7, #32]
 800e266:	3304      	adds	r3, #4
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fd ffbf 	bl	800c1ec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e272:	4b1d      	ldr	r3, [pc, #116]	; (800e2e8 <xTaskGenericNotify+0x134>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	429a      	cmp	r2, r3
 800e278:	d903      	bls.n	800e282 <xTaskGenericNotify+0xce>
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27e:	4a1a      	ldr	r2, [pc, #104]	; (800e2e8 <xTaskGenericNotify+0x134>)
 800e280:	6013      	str	r3, [r2, #0]
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e286:	4613      	mov	r3, r2
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	4413      	add	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4a17      	ldr	r2, [pc, #92]	; (800e2ec <xTaskGenericNotify+0x138>)
 800e290:	441a      	add	r2, r3
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	3304      	adds	r3, #4
 800e296:	4619      	mov	r1, r3
 800e298:	4610      	mov	r0, r2
 800e29a:	f7fd ff4a 	bl	800c132 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e29e:	6a3b      	ldr	r3, [r7, #32]
 800e2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d009      	beq.n	800e2ba <xTaskGenericNotify+0x106>
 800e2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	617b      	str	r3, [r7, #20]
 800e2b8:	e7fe      	b.n	800e2b8 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2ba:	6a3b      	ldr	r3, [r7, #32]
 800e2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2be:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <xTaskGenericNotify+0x13c>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d907      	bls.n	800e2d8 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <xTaskGenericNotify+0x140>)
 800e2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e2d8:	f000 fcbe 	bl	800ec58 <vPortExitCritical>

		return xReturn;
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3728      	adds	r7, #40	; 0x28
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	2000b014 	.word	0x2000b014
 800e2ec:	2000ab3c 	.word	0x2000ab3c
 800e2f0:	2000ab38 	.word	0x2000ab38
 800e2f4:	e000ed04 	.word	0xe000ed04

0800e2f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e302:	4b21      	ldr	r3, [pc, #132]	; (800e388 <prvAddCurrentTaskToDelayedList+0x90>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e308:	4b20      	ldr	r3, [pc, #128]	; (800e38c <prvAddCurrentTaskToDelayedList+0x94>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	3304      	adds	r3, #4
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fd ff6c 	bl	800c1ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e31a:	d10a      	bne.n	800e332 <prvAddCurrentTaskToDelayedList+0x3a>
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d007      	beq.n	800e332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e322:	4b1a      	ldr	r3, [pc, #104]	; (800e38c <prvAddCurrentTaskToDelayedList+0x94>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	3304      	adds	r3, #4
 800e328:	4619      	mov	r1, r3
 800e32a:	4819      	ldr	r0, [pc, #100]	; (800e390 <prvAddCurrentTaskToDelayedList+0x98>)
 800e32c:	f7fd ff01 	bl	800c132 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e330:	e026      	b.n	800e380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	4413      	add	r3, r2
 800e338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e33a:	4b14      	ldr	r3, [pc, #80]	; (800e38c <prvAddCurrentTaskToDelayedList+0x94>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	68ba      	ldr	r2, [r7, #8]
 800e340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	429a      	cmp	r2, r3
 800e348:	d209      	bcs.n	800e35e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e34a:	4b12      	ldr	r3, [pc, #72]	; (800e394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	4b0f      	ldr	r3, [pc, #60]	; (800e38c <prvAddCurrentTaskToDelayedList+0x94>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3304      	adds	r3, #4
 800e354:	4619      	mov	r1, r3
 800e356:	4610      	mov	r0, r2
 800e358:	f7fd ff0f 	bl	800c17a <vListInsert>
}
 800e35c:	e010      	b.n	800e380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e35e:	4b0e      	ldr	r3, [pc, #56]	; (800e398 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4b0a      	ldr	r3, [pc, #40]	; (800e38c <prvAddCurrentTaskToDelayedList+0x94>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3304      	adds	r3, #4
 800e368:	4619      	mov	r1, r3
 800e36a:	4610      	mov	r0, r2
 800e36c:	f7fd ff05 	bl	800c17a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e370:	4b0a      	ldr	r3, [pc, #40]	; (800e39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	429a      	cmp	r2, r3
 800e378:	d202      	bcs.n	800e380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e37a:	4a08      	ldr	r2, [pc, #32]	; (800e39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	6013      	str	r3, [r2, #0]
}
 800e380:	bf00      	nop
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	2000b010 	.word	0x2000b010
 800e38c:	2000ab38 	.word	0x2000ab38
 800e390:	2000aff8 	.word	0x2000aff8
 800e394:	2000afc8 	.word	0x2000afc8
 800e398:	2000afc4 	.word	0x2000afc4
 800e39c:	2000b02c 	.word	0x2000b02c

0800e3a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b08a      	sub	sp, #40	; 0x28
 800e3a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3aa:	f000 fac3 	bl	800e934 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3ae:	4b1c      	ldr	r3, [pc, #112]	; (800e420 <xTimerCreateTimerTask+0x80>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d021      	beq.n	800e3fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3be:	1d3a      	adds	r2, r7, #4
 800e3c0:	f107 0108 	add.w	r1, r7, #8
 800e3c4:	f107 030c 	add.w	r3, r7, #12
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fd fe6b 	bl	800c0a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3ce:	6879      	ldr	r1, [r7, #4]
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	9202      	str	r2, [sp, #8]
 800e3d6:	9301      	str	r3, [sp, #4]
 800e3d8:	2302      	movs	r3, #2
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	460a      	mov	r2, r1
 800e3e0:	4910      	ldr	r1, [pc, #64]	; (800e424 <xTimerCreateTimerTask+0x84>)
 800e3e2:	4811      	ldr	r0, [pc, #68]	; (800e428 <xTimerCreateTimerTask+0x88>)
 800e3e4:	f7fe ff16 	bl	800d214 <xTaskCreateStatic>
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	4b10      	ldr	r3, [pc, #64]	; (800e42c <xTimerCreateTimerTask+0x8c>)
 800e3ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e3ee:	4b0f      	ldr	r3, [pc, #60]	; (800e42c <xTimerCreateTimerTask+0x8c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d109      	bne.n	800e414 <xTimerCreateTimerTask+0x74>
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	613b      	str	r3, [r7, #16]
 800e412:	e7fe      	b.n	800e412 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800e414:	697b      	ldr	r3, [r7, #20]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3718      	adds	r7, #24
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	2000b068 	.word	0x2000b068
 800e424:	08013690 	.word	0x08013690
 800e428:	0800e549 	.word	0x0800e549
 800e42c:	2000b06c 	.word	0x2000b06c

0800e430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08a      	sub	sp, #40	; 0x28
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e43e:	2300      	movs	r3, #0
 800e440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d109      	bne.n	800e45c <xTimerGenericCommand+0x2c>
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	623b      	str	r3, [r7, #32]
 800e45a:	e7fe      	b.n	800e45a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e45c:	4b19      	ldr	r3, [pc, #100]	; (800e4c4 <xTimerGenericCommand+0x94>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d02a      	beq.n	800e4ba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	2b05      	cmp	r3, #5
 800e474:	dc18      	bgt.n	800e4a8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e476:	f7ff fcb3 	bl	800dde0 <xTaskGetSchedulerState>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d109      	bne.n	800e494 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e480:	4b10      	ldr	r3, [pc, #64]	; (800e4c4 <xTimerGenericCommand+0x94>)
 800e482:	6818      	ldr	r0, [r3, #0]
 800e484:	f107 0110 	add.w	r1, r7, #16
 800e488:	2300      	movs	r3, #0
 800e48a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e48c:	f7fe f878 	bl	800c580 <xQueueGenericSend>
 800e490:	6278      	str	r0, [r7, #36]	; 0x24
 800e492:	e012      	b.n	800e4ba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e494:	4b0b      	ldr	r3, [pc, #44]	; (800e4c4 <xTimerGenericCommand+0x94>)
 800e496:	6818      	ldr	r0, [r3, #0]
 800e498:	f107 0110 	add.w	r1, r7, #16
 800e49c:	2300      	movs	r3, #0
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f7fe f86e 	bl	800c580 <xQueueGenericSend>
 800e4a4:	6278      	str	r0, [r7, #36]	; 0x24
 800e4a6:	e008      	b.n	800e4ba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4a8:	4b06      	ldr	r3, [pc, #24]	; (800e4c4 <xTimerGenericCommand+0x94>)
 800e4aa:	6818      	ldr	r0, [r3, #0]
 800e4ac:	f107 0110 	add.w	r1, r7, #16
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	f7fe f95e 	bl	800c774 <xQueueGenericSendFromISR>
 800e4b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3728      	adds	r7, #40	; 0x28
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	2000b068 	.word	0x2000b068

0800e4c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af02      	add	r7, sp, #8
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4d2:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <prvProcessExpiredTimer+0x7c>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fd fe83 	bl	800c1ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	69db      	ldr	r3, [r3, #28]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d121      	bne.n	800e532 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	699a      	ldr	r2, [r3, #24]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	18d1      	adds	r1, r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	683a      	ldr	r2, [r7, #0]
 800e4fa:	6978      	ldr	r0, [r7, #20]
 800e4fc:	f000 f8c8 	bl	800e690 <prvInsertTimerInActiveList>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d015      	beq.n	800e532 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e506:	2300      	movs	r3, #0
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	2300      	movs	r3, #0
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	2100      	movs	r1, #0
 800e510:	6978      	ldr	r0, [r7, #20]
 800e512:	f7ff ff8d 	bl	800e430 <xTimerGenericCommand>
 800e516:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d109      	bne.n	800e532 <prvProcessExpiredTimer+0x6a>
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	60fb      	str	r3, [r7, #12]
 800e530:	e7fe      	b.n	800e530 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e536:	6978      	ldr	r0, [r7, #20]
 800e538:	4798      	blx	r3
}
 800e53a:	bf00      	nop
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	2000b060 	.word	0x2000b060

0800e548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e550:	f107 0308 	add.w	r3, r7, #8
 800e554:	4618      	mov	r0, r3
 800e556:	f000 f857 	bl	800e608 <prvGetNextExpireTime>
 800e55a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	4619      	mov	r1, r3
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f000 f803 	bl	800e56c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e566:	f000 f8d5 	bl	800e714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e56a:	e7f1      	b.n	800e550 <prvTimerTask+0x8>

0800e56c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e576:	f7ff f845 	bl	800d604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e57a:	f107 0308 	add.w	r3, r7, #8
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 f866 	bl	800e650 <prvSampleTimeNow>
 800e584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d130      	bne.n	800e5ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d10a      	bne.n	800e5a8 <prvProcessTimerOrBlockTask+0x3c>
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	429a      	cmp	r2, r3
 800e598:	d806      	bhi.n	800e5a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e59a:	f7ff f841 	bl	800d620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e59e:	68f9      	ldr	r1, [r7, #12]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7ff ff91 	bl	800e4c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5a6:	e024      	b.n	800e5f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d008      	beq.n	800e5c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5ae:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <prvProcessTimerOrBlockTask+0x90>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bf0c      	ite	eq
 800e5b8:	2301      	moveq	r3, #1
 800e5ba:	2300      	movne	r3, #0
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5c0:	4b0f      	ldr	r3, [pc, #60]	; (800e600 <prvProcessTimerOrBlockTask+0x94>)
 800e5c2:	6818      	ldr	r0, [r3, #0]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	f7fe fded 	bl	800d1ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e5d2:	f7ff f825 	bl	800d620 <xTaskResumeAll>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10a      	bne.n	800e5f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e5dc:	4b09      	ldr	r3, [pc, #36]	; (800e604 <prvProcessTimerOrBlockTask+0x98>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	f3bf 8f6f 	isb	sy
}
 800e5ec:	e001      	b.n	800e5f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5ee:	f7ff f817 	bl	800d620 <xTaskResumeAll>
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	2000b064 	.word	0x2000b064
 800e600:	2000b068 	.word	0x2000b068
 800e604:	e000ed04 	.word	0xe000ed04

0800e608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e610:	4b0e      	ldr	r3, [pc, #56]	; (800e64c <prvGetNextExpireTime+0x44>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	bf0c      	ite	eq
 800e61a:	2301      	moveq	r3, #1
 800e61c:	2300      	movne	r3, #0
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	461a      	mov	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d105      	bne.n	800e63a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e62e:	4b07      	ldr	r3, [pc, #28]	; (800e64c <prvGetNextExpireTime+0x44>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	e001      	b.n	800e63e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e63e:	68fb      	ldr	r3, [r7, #12]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3714      	adds	r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr
 800e64c:	2000b060 	.word	0x2000b060

0800e650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e658:	f7ff f87e 	bl	800d758 <xTaskGetTickCount>
 800e65c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e65e:	4b0b      	ldr	r3, [pc, #44]	; (800e68c <prvSampleTimeNow+0x3c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	429a      	cmp	r2, r3
 800e666:	d205      	bcs.n	800e674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e668:	f000 f904 	bl	800e874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2201      	movs	r2, #1
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	e002      	b.n	800e67a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e67a:	4a04      	ldr	r2, [pc, #16]	; (800e68c <prvSampleTimeNow+0x3c>)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e680:	68fb      	ldr	r3, [r7, #12]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	2000b070 	.word	0x2000b070

0800e690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d812      	bhi.n	800e6dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	1ad2      	subs	r2, r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	699b      	ldr	r3, [r3, #24]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d302      	bcc.n	800e6ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	617b      	str	r3, [r7, #20]
 800e6c8:	e01b      	b.n	800e702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6ca:	4b10      	ldr	r3, [pc, #64]	; (800e70c <prvInsertTimerInActiveList+0x7c>)
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	f7fd fd50 	bl	800c17a <vListInsert>
 800e6da:	e012      	b.n	800e702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d206      	bcs.n	800e6f2 <prvInsertTimerInActiveList+0x62>
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d302      	bcc.n	800e6f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	617b      	str	r3, [r7, #20]
 800e6f0:	e007      	b.n	800e702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6f2:	4b07      	ldr	r3, [pc, #28]	; (800e710 <prvInsertTimerInActiveList+0x80>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	f7fd fd3c 	bl	800c17a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e702:	697b      	ldr	r3, [r7, #20]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	2000b064 	.word	0x2000b064
 800e710:	2000b060 	.word	0x2000b060

0800e714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08e      	sub	sp, #56	; 0x38
 800e718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e71a:	e099      	b.n	800e850 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	da17      	bge.n	800e752 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e722:	1d3b      	adds	r3, r7, #4
 800e724:	3304      	adds	r3, #4
 800e726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d109      	bne.n	800e742 <prvProcessReceivedCommands+0x2e>
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	61fb      	str	r3, [r7, #28]
 800e740:	e7fe      	b.n	800e740 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e748:	6850      	ldr	r0, [r2, #4]
 800e74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e74c:	6892      	ldr	r2, [r2, #8]
 800e74e:	4611      	mov	r1, r2
 800e750:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	db7a      	blt.n	800e84e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	695b      	ldr	r3, [r3, #20]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d004      	beq.n	800e76e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	3304      	adds	r3, #4
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fd fd3f 	bl	800c1ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e76e:	463b      	mov	r3, r7
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff ff6d 	bl	800e650 <prvSampleTimeNow>
 800e776:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b09      	cmp	r3, #9
 800e77c:	d868      	bhi.n	800e850 <prvProcessReceivedCommands+0x13c>
 800e77e:	a201      	add	r2, pc, #4	; (adr r2, 800e784 <prvProcessReceivedCommands+0x70>)
 800e780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e784:	0800e7ad 	.word	0x0800e7ad
 800e788:	0800e7ad 	.word	0x0800e7ad
 800e78c:	0800e7ad 	.word	0x0800e7ad
 800e790:	0800e851 	.word	0x0800e851
 800e794:	0800e807 	.word	0x0800e807
 800e798:	0800e83d 	.word	0x0800e83d
 800e79c:	0800e7ad 	.word	0x0800e7ad
 800e7a0:	0800e7ad 	.word	0x0800e7ad
 800e7a4:	0800e851 	.word	0x0800e851
 800e7a8:	0800e807 	.word	0x0800e807
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b0:	699b      	ldr	r3, [r3, #24]
 800e7b2:	18d1      	adds	r1, r2, r3
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7ba:	f7ff ff69 	bl	800e690 <prvInsertTimerInActiveList>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d045      	beq.n	800e850 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	69db      	ldr	r3, [r3, #28]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d13d      	bne.n	800e850 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	441a      	add	r2, r3
 800e7dc:	2300      	movs	r3, #0
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7e6:	f7ff fe23 	bl	800e430 <xTimerGenericCommand>
 800e7ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7ec:	6a3b      	ldr	r3, [r7, #32]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d12e      	bne.n	800e850 <prvProcessReceivedCommands+0x13c>
 800e7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	61bb      	str	r3, [r7, #24]
 800e804:	e7fe      	b.n	800e804 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d109      	bne.n	800e828 <prvProcessReceivedCommands+0x114>
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	617b      	str	r3, [r7, #20]
 800e826:	e7fe      	b.n	800e826 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	699a      	ldr	r2, [r3, #24]
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	18d1      	adds	r1, r2, r3
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e836:	f7ff ff2b 	bl	800e690 <prvInsertTimerInActiveList>
					break;
 800e83a:	e009      	b.n	800e850 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e842:	2b00      	cmp	r3, #0
 800e844:	d104      	bne.n	800e850 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800e846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e848:	f000 fb92 	bl	800ef70 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e84c:	e000      	b.n	800e850 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e84e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e850:	4b07      	ldr	r3, [pc, #28]	; (800e870 <prvProcessReceivedCommands+0x15c>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	1d39      	adds	r1, r7, #4
 800e856:	2200      	movs	r2, #0
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fe f8a9 	bl	800c9b0 <xQueueReceive>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	f47f af5b 	bne.w	800e71c <prvProcessReceivedCommands+0x8>
	}
}
 800e866:	bf00      	nop
 800e868:	3730      	adds	r7, #48	; 0x30
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	2000b068 	.word	0x2000b068

0800e874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b088      	sub	sp, #32
 800e878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e87a:	e044      	b.n	800e906 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e87c:	4b2b      	ldr	r3, [pc, #172]	; (800e92c <prvSwitchTimerLists+0xb8>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e886:	4b29      	ldr	r3, [pc, #164]	; (800e92c <prvSwitchTimerLists+0xb8>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	3304      	adds	r3, #4
 800e894:	4618      	mov	r0, r3
 800e896:	f7fd fca9 	bl	800c1ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	69db      	ldr	r3, [r3, #28]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d12d      	bne.n	800e906 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	693a      	ldr	r2, [r7, #16]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d90e      	bls.n	800e8da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8c8:	4b18      	ldr	r3, [pc, #96]	; (800e92c <prvSwitchTimerLists+0xb8>)
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	f7fd fc51 	bl	800c17a <vListInsert>
 800e8d8:	e015      	b.n	800e906 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8da:	2300      	movs	r3, #0
 800e8dc:	9300      	str	r3, [sp, #0]
 800e8de:	2300      	movs	r3, #0
 800e8e0:	693a      	ldr	r2, [r7, #16]
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f7ff fda3 	bl	800e430 <xTimerGenericCommand>
 800e8ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d109      	bne.n	800e906 <prvSwitchTimerLists+0x92>
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	603b      	str	r3, [r7, #0]
 800e904:	e7fe      	b.n	800e904 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e906:	4b09      	ldr	r3, [pc, #36]	; (800e92c <prvSwitchTimerLists+0xb8>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1b5      	bne.n	800e87c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e910:	4b06      	ldr	r3, [pc, #24]	; (800e92c <prvSwitchTimerLists+0xb8>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e916:	4b06      	ldr	r3, [pc, #24]	; (800e930 <prvSwitchTimerLists+0xbc>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a04      	ldr	r2, [pc, #16]	; (800e92c <prvSwitchTimerLists+0xb8>)
 800e91c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e91e:	4a04      	ldr	r2, [pc, #16]	; (800e930 <prvSwitchTimerLists+0xbc>)
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	6013      	str	r3, [r2, #0]
}
 800e924:	bf00      	nop
 800e926:	3718      	adds	r7, #24
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	2000b060 	.word	0x2000b060
 800e930:	2000b064 	.word	0x2000b064

0800e934 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e93a:	f000 f95f 	bl	800ebfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e93e:	4b15      	ldr	r3, [pc, #84]	; (800e994 <prvCheckForValidListAndQueue+0x60>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d120      	bne.n	800e988 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e946:	4814      	ldr	r0, [pc, #80]	; (800e998 <prvCheckForValidListAndQueue+0x64>)
 800e948:	f7fd fbc6 	bl	800c0d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e94c:	4813      	ldr	r0, [pc, #76]	; (800e99c <prvCheckForValidListAndQueue+0x68>)
 800e94e:	f7fd fbc3 	bl	800c0d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e952:	4b13      	ldr	r3, [pc, #76]	; (800e9a0 <prvCheckForValidListAndQueue+0x6c>)
 800e954:	4a10      	ldr	r2, [pc, #64]	; (800e998 <prvCheckForValidListAndQueue+0x64>)
 800e956:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e958:	4b12      	ldr	r3, [pc, #72]	; (800e9a4 <prvCheckForValidListAndQueue+0x70>)
 800e95a:	4a10      	ldr	r2, [pc, #64]	; (800e99c <prvCheckForValidListAndQueue+0x68>)
 800e95c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e95e:	2300      	movs	r3, #0
 800e960:	9300      	str	r3, [sp, #0]
 800e962:	4b11      	ldr	r3, [pc, #68]	; (800e9a8 <prvCheckForValidListAndQueue+0x74>)
 800e964:	4a11      	ldr	r2, [pc, #68]	; (800e9ac <prvCheckForValidListAndQueue+0x78>)
 800e966:	2110      	movs	r1, #16
 800e968:	200a      	movs	r0, #10
 800e96a:	f7fd fcd1 	bl	800c310 <xQueueGenericCreateStatic>
 800e96e:	4602      	mov	r2, r0
 800e970:	4b08      	ldr	r3, [pc, #32]	; (800e994 <prvCheckForValidListAndQueue+0x60>)
 800e972:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e974:	4b07      	ldr	r3, [pc, #28]	; (800e994 <prvCheckForValidListAndQueue+0x60>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d005      	beq.n	800e988 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e97c:	4b05      	ldr	r3, [pc, #20]	; (800e994 <prvCheckForValidListAndQueue+0x60>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	490b      	ldr	r1, [pc, #44]	; (800e9b0 <prvCheckForValidListAndQueue+0x7c>)
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe fbc0 	bl	800d108 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e988:	f000 f966 	bl	800ec58 <vPortExitCritical>
}
 800e98c:	bf00      	nop
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	2000b068 	.word	0x2000b068
 800e998:	2000b038 	.word	0x2000b038
 800e99c:	2000b04c 	.word	0x2000b04c
 800e9a0:	2000b060 	.word	0x2000b060
 800e9a4:	2000b064 	.word	0x2000b064
 800e9a8:	2000b114 	.word	0x2000b114
 800e9ac:	2000b074 	.word	0x2000b074
 800e9b0:	08013698 	.word	0x08013698

0800e9b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	3b04      	subs	r3, #4
 800e9c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	3b04      	subs	r3, #4
 800e9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f023 0201 	bic.w	r2, r3, #1
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3b04      	subs	r3, #4
 800e9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ea18 <pxPortInitialiseStack+0x64>)
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3b14      	subs	r3, #20
 800e9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	3b04      	subs	r3, #4
 800e9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f06f 0202 	mvn.w	r2, #2
 800ea02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	3b20      	subs	r3, #32
 800ea08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3714      	adds	r7, #20
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	0800ea1d 	.word	0x0800ea1d

0800ea1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea26:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <prvTaskExitError+0x50>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea2e:	d009      	beq.n	800ea44 <prvTaskExitError+0x28>
 800ea30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	60fb      	str	r3, [r7, #12]
 800ea42:	e7fe      	b.n	800ea42 <prvTaskExitError+0x26>
 800ea44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea56:	bf00      	nop
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0fc      	beq.n	800ea58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea5e:	bf00      	nop
 800ea60:	3714      	adds	r7, #20
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop
 800ea6c:	20000434 	.word	0x20000434

0800ea70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea70:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <pxCurrentTCBConst2>)
 800ea72:	6819      	ldr	r1, [r3, #0]
 800ea74:	6808      	ldr	r0, [r1, #0]
 800ea76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7a:	f380 8809 	msr	PSP, r0
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f04f 0000 	mov.w	r0, #0
 800ea86:	f380 8811 	msr	BASEPRI, r0
 800ea8a:	4770      	bx	lr
 800ea8c:	f3af 8000 	nop.w

0800ea90 <pxCurrentTCBConst2>:
 800ea90:	2000ab38 	.word	0x2000ab38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop

0800ea98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ea98:	4808      	ldr	r0, [pc, #32]	; (800eabc <prvPortStartFirstTask+0x24>)
 800ea9a:	6800      	ldr	r0, [r0, #0]
 800ea9c:	6800      	ldr	r0, [r0, #0]
 800ea9e:	f380 8808 	msr	MSP, r0
 800eaa2:	f04f 0000 	mov.w	r0, #0
 800eaa6:	f380 8814 	msr	CONTROL, r0
 800eaaa:	b662      	cpsie	i
 800eaac:	b661      	cpsie	f
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	f3bf 8f6f 	isb	sy
 800eab6:	df00      	svc	0
 800eab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eaba:	bf00      	nop
 800eabc:	e000ed08 	.word	0xe000ed08

0800eac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eac6:	4b44      	ldr	r3, [pc, #272]	; (800ebd8 <xPortStartScheduler+0x118>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a44      	ldr	r2, [pc, #272]	; (800ebdc <xPortStartScheduler+0x11c>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d109      	bne.n	800eae4 <xPortStartScheduler+0x24>
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	613b      	str	r3, [r7, #16]
 800eae2:	e7fe      	b.n	800eae2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eae4:	4b3c      	ldr	r3, [pc, #240]	; (800ebd8 <xPortStartScheduler+0x118>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a3d      	ldr	r2, [pc, #244]	; (800ebe0 <xPortStartScheduler+0x120>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d109      	bne.n	800eb02 <xPortStartScheduler+0x42>
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	60fb      	str	r3, [r7, #12]
 800eb00:	e7fe      	b.n	800eb00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb02:	4b38      	ldr	r3, [pc, #224]	; (800ebe4 <xPortStartScheduler+0x124>)
 800eb04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	22ff      	movs	r2, #255	; 0xff
 800eb12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb1c:	78fb      	ldrb	r3, [r7, #3]
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	4b30      	ldr	r3, [pc, #192]	; (800ebe8 <xPortStartScheduler+0x128>)
 800eb28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb2a:	4b30      	ldr	r3, [pc, #192]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb2c:	2207      	movs	r2, #7
 800eb2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb30:	e009      	b.n	800eb46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800eb32:	4b2e      	ldr	r3, [pc, #184]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	3b01      	subs	r3, #1
 800eb38:	4a2c      	ldr	r2, [pc, #176]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb3c:	78fb      	ldrb	r3, [r7, #3]
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	005b      	lsls	r3, r3, #1
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb46:	78fb      	ldrb	r3, [r7, #3]
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb4e:	2b80      	cmp	r3, #128	; 0x80
 800eb50:	d0ef      	beq.n	800eb32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb52:	4b26      	ldr	r3, [pc, #152]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f1c3 0307 	rsb	r3, r3, #7
 800eb5a:	2b04      	cmp	r3, #4
 800eb5c:	d009      	beq.n	800eb72 <xPortStartScheduler+0xb2>
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	60bb      	str	r3, [r7, #8]
 800eb70:	e7fe      	b.n	800eb70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb72:	4b1e      	ldr	r3, [pc, #120]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	021b      	lsls	r3, r3, #8
 800eb78:	4a1c      	ldr	r2, [pc, #112]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb7c:	4b1b      	ldr	r3, [pc, #108]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb84:	4a19      	ldr	r2, [pc, #100]	; (800ebec <xPortStartScheduler+0x12c>)
 800eb86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb90:	4b17      	ldr	r3, [pc, #92]	; (800ebf0 <xPortStartScheduler+0x130>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a16      	ldr	r2, [pc, #88]	; (800ebf0 <xPortStartScheduler+0x130>)
 800eb96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb9c:	4b14      	ldr	r3, [pc, #80]	; (800ebf0 <xPortStartScheduler+0x130>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a13      	ldr	r2, [pc, #76]	; (800ebf0 <xPortStartScheduler+0x130>)
 800eba2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eba6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eba8:	f000 f8d6 	bl	800ed58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebac:	4b11      	ldr	r3, [pc, #68]	; (800ebf4 <xPortStartScheduler+0x134>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebb2:	f000 f8f5 	bl	800eda0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebb6:	4b10      	ldr	r3, [pc, #64]	; (800ebf8 <xPortStartScheduler+0x138>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a0f      	ldr	r2, [pc, #60]	; (800ebf8 <xPortStartScheduler+0x138>)
 800ebbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebc2:	f7ff ff69 	bl	800ea98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebc6:	f7fe fe95 	bl	800d8f4 <vTaskSwitchContext>
	prvTaskExitError();
 800ebca:	f7ff ff27 	bl	800ea1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	e000ed00 	.word	0xe000ed00
 800ebdc:	410fc271 	.word	0x410fc271
 800ebe0:	410fc270 	.word	0x410fc270
 800ebe4:	e000e400 	.word	0xe000e400
 800ebe8:	2000b164 	.word	0x2000b164
 800ebec:	2000b168 	.word	0x2000b168
 800ebf0:	e000ed20 	.word	0xe000ed20
 800ebf4:	20000434 	.word	0x20000434
 800ebf8:	e000ef34 	.word	0xe000ef34

0800ebfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec06:	f383 8811 	msr	BASEPRI, r3
 800ec0a:	f3bf 8f6f 	isb	sy
 800ec0e:	f3bf 8f4f 	dsb	sy
 800ec12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec14:	4b0e      	ldr	r3, [pc, #56]	; (800ec50 <vPortEnterCritical+0x54>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	4a0d      	ldr	r2, [pc, #52]	; (800ec50 <vPortEnterCritical+0x54>)
 800ec1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec1e:	4b0c      	ldr	r3, [pc, #48]	; (800ec50 <vPortEnterCritical+0x54>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d10e      	bne.n	800ec44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec26:	4b0b      	ldr	r3, [pc, #44]	; (800ec54 <vPortEnterCritical+0x58>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d009      	beq.n	800ec44 <vPortEnterCritical+0x48>
 800ec30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec34:	f383 8811 	msr	BASEPRI, r3
 800ec38:	f3bf 8f6f 	isb	sy
 800ec3c:	f3bf 8f4f 	dsb	sy
 800ec40:	603b      	str	r3, [r7, #0]
 800ec42:	e7fe      	b.n	800ec42 <vPortEnterCritical+0x46>
	}
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	20000434 	.word	0x20000434
 800ec54:	e000ed04 	.word	0xe000ed04

0800ec58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec5e:	4b11      	ldr	r3, [pc, #68]	; (800eca4 <vPortExitCritical+0x4c>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d109      	bne.n	800ec7a <vPortExitCritical+0x22>
 800ec66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6a:	f383 8811 	msr	BASEPRI, r3
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	607b      	str	r3, [r7, #4]
 800ec78:	e7fe      	b.n	800ec78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ec7a:	4b0a      	ldr	r3, [pc, #40]	; (800eca4 <vPortExitCritical+0x4c>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	4a08      	ldr	r2, [pc, #32]	; (800eca4 <vPortExitCritical+0x4c>)
 800ec82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec84:	4b07      	ldr	r3, [pc, #28]	; (800eca4 <vPortExitCritical+0x4c>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d104      	bne.n	800ec96 <vPortExitCritical+0x3e>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec96:	bf00      	nop
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	20000434 	.word	0x20000434
	...

0800ecb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ecb0:	f3ef 8009 	mrs	r0, PSP
 800ecb4:	f3bf 8f6f 	isb	sy
 800ecb8:	4b15      	ldr	r3, [pc, #84]	; (800ed10 <pxCurrentTCBConst>)
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	f01e 0f10 	tst.w	lr, #16
 800ecc0:	bf08      	it	eq
 800ecc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ecc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecca:	6010      	str	r0, [r2, #0]
 800eccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecd4:	f380 8811 	msr	BASEPRI, r0
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f7fe fe08 	bl	800d8f4 <vTaskSwitchContext>
 800ece4:	f04f 0000 	mov.w	r0, #0
 800ece8:	f380 8811 	msr	BASEPRI, r0
 800ecec:	bc09      	pop	{r0, r3}
 800ecee:	6819      	ldr	r1, [r3, #0]
 800ecf0:	6808      	ldr	r0, [r1, #0]
 800ecf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf6:	f01e 0f10 	tst.w	lr, #16
 800ecfa:	bf08      	it	eq
 800ecfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed00:	f380 8809 	msr	PSP, r0
 800ed04:	f3bf 8f6f 	isb	sy
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	f3af 8000 	nop.w

0800ed10 <pxCurrentTCBConst>:
 800ed10:	2000ab38 	.word	0x2000ab38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed14:	bf00      	nop
 800ed16:	bf00      	nop

0800ed18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed30:	f7fe fd22 	bl	800d778 <xTaskIncrementTick>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d003      	beq.n	800ed42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed3a:	4b06      	ldr	r3, [pc, #24]	; (800ed54 <SysTick_Handler+0x3c>)
 800ed3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed40:	601a      	str	r2, [r3, #0]
 800ed42:	2300      	movs	r3, #0
 800ed44:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed4c:	bf00      	nop
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	e000ed04 	.word	0xe000ed04

0800ed58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed58:	b480      	push	{r7}
 800ed5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed5c:	4b0b      	ldr	r3, [pc, #44]	; (800ed8c <vPortSetupTimerInterrupt+0x34>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed62:	4b0b      	ldr	r3, [pc, #44]	; (800ed90 <vPortSetupTimerInterrupt+0x38>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed68:	4b0a      	ldr	r3, [pc, #40]	; (800ed94 <vPortSetupTimerInterrupt+0x3c>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a0a      	ldr	r2, [pc, #40]	; (800ed98 <vPortSetupTimerInterrupt+0x40>)
 800ed6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed72:	099b      	lsrs	r3, r3, #6
 800ed74:	4a09      	ldr	r2, [pc, #36]	; (800ed9c <vPortSetupTimerInterrupt+0x44>)
 800ed76:	3b01      	subs	r3, #1
 800ed78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed7a:	4b04      	ldr	r3, [pc, #16]	; (800ed8c <vPortSetupTimerInterrupt+0x34>)
 800ed7c:	2207      	movs	r2, #7
 800ed7e:	601a      	str	r2, [r3, #0]
}
 800ed80:	bf00      	nop
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr
 800ed8a:	bf00      	nop
 800ed8c:	e000e010 	.word	0xe000e010
 800ed90:	e000e018 	.word	0xe000e018
 800ed94:	20000438 	.word	0x20000438
 800ed98:	10624dd3 	.word	0x10624dd3
 800ed9c:	e000e014 	.word	0xe000e014

0800eda0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eda0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800edb0 <vPortEnableVFP+0x10>
 800eda4:	6801      	ldr	r1, [r0, #0]
 800eda6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edaa:	6001      	str	r1, [r0, #0]
 800edac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800edae:	bf00      	nop
 800edb0:	e000ed88 	.word	0xe000ed88

0800edb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edba:	f3ef 8305 	mrs	r3, IPSR
 800edbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2b0f      	cmp	r3, #15
 800edc4:	d913      	bls.n	800edee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edc6:	4a16      	ldr	r2, [pc, #88]	; (800ee20 <vPortValidateInterruptPriority+0x6c>)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	4413      	add	r3, r2
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edd0:	4b14      	ldr	r3, [pc, #80]	; (800ee24 <vPortValidateInterruptPriority+0x70>)
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	7afa      	ldrb	r2, [r7, #11]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d209      	bcs.n	800edee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800edda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edde:	f383 8811 	msr	BASEPRI, r3
 800ede2:	f3bf 8f6f 	isb	sy
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	607b      	str	r3, [r7, #4]
 800edec:	e7fe      	b.n	800edec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <vPortValidateInterruptPriority+0x74>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800edf6:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <vPortValidateInterruptPriority+0x78>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d909      	bls.n	800ee12 <vPortValidateInterruptPriority+0x5e>
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	603b      	str	r3, [r7, #0]
 800ee10:	e7fe      	b.n	800ee10 <vPortValidateInterruptPriority+0x5c>
	}
 800ee12:	bf00      	nop
 800ee14:	3714      	adds	r7, #20
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	e000e3f0 	.word	0xe000e3f0
 800ee24:	2000b164 	.word	0x2000b164
 800ee28:	e000ed0c 	.word	0xe000ed0c
 800ee2c:	2000b168 	.word	0x2000b168

0800ee30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b088      	sub	sp, #32
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800ee3c:	4b47      	ldr	r3, [pc, #284]	; (800ef5c <pvPortMalloc+0x12c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d109      	bne.n	800ee58 <pvPortMalloc+0x28>
 800ee44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	60fb      	str	r3, [r7, #12]
 800ee56:	e7fe      	b.n	800ee56 <pvPortMalloc+0x26>

	vTaskSuspendAll();
 800ee58:	f7fe fbd4 	bl	800d604 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee5c:	4b40      	ldr	r3, [pc, #256]	; (800ef60 <pvPortMalloc+0x130>)
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4013      	ands	r3, r2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d16d      	bne.n	800ef44 <pvPortMalloc+0x114>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00d      	beq.n	800ee8a <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
 800ee6e:	2208      	movs	r2, #8
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4413      	add	r3, r2
 800ee74:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f003 0307 	and.w	r3, r3, #7
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d004      	beq.n	800ee8a <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f023 0307 	bic.w	r3, r3, #7
 800ee86:	3308      	adds	r3, #8
 800ee88:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d059      	beq.n	800ef44 <pvPortMalloc+0x114>
 800ee90:	4b34      	ldr	r3, [pc, #208]	; (800ef64 <pvPortMalloc+0x134>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d854      	bhi.n	800ef44 <pvPortMalloc+0x114>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ee9a:	4b33      	ldr	r3, [pc, #204]	; (800ef68 <pvPortMalloc+0x138>)
 800ee9c:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800ee9e:	4b32      	ldr	r3, [pc, #200]	; (800ef68 <pvPortMalloc+0x138>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eea4:	e004      	b.n	800eeb0 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d903      	bls.n	800eec2 <pvPortMalloc+0x92>
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1f1      	bne.n	800eea6 <pvPortMalloc+0x76>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eec2:	4b26      	ldr	r3, [pc, #152]	; (800ef5c <pvPortMalloc+0x12c>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	69fa      	ldr	r2, [r7, #28]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d03b      	beq.n	800ef44 <pvPortMalloc+0x114>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2208      	movs	r2, #8
 800eed2:	4413      	add	r3, r2
 800eed4:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	685a      	ldr	r2, [r3, #4]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	1ad2      	subs	r2, r2, r3
 800eee6:	2308      	movs	r3, #8
 800eee8:	005b      	lsls	r3, r3, #1
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d90f      	bls.n	800ef0e <pvPortMalloc+0xde>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eeee:	69fa      	ldr	r2, [r7, #28]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4413      	add	r3, r2
 800eef4:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	685a      	ldr	r2, [r3, #4]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	1ad2      	subs	r2, r2, r3
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ef08:	6938      	ldr	r0, [r7, #16]
 800ef0a:	f000 f889 	bl	800f020 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef0e:	4b15      	ldr	r3, [pc, #84]	; (800ef64 <pvPortMalloc+0x134>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	4a12      	ldr	r2, [pc, #72]	; (800ef64 <pvPortMalloc+0x134>)
 800ef1a:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef1c:	4b11      	ldr	r3, [pc, #68]	; (800ef64 <pvPortMalloc+0x134>)
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	4b12      	ldr	r3, [pc, #72]	; (800ef6c <pvPortMalloc+0x13c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d203      	bcs.n	800ef30 <pvPortMalloc+0x100>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef28:	4b0e      	ldr	r3, [pc, #56]	; (800ef64 <pvPortMalloc+0x134>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a0f      	ldr	r2, [pc, #60]	; (800ef6c <pvPortMalloc+0x13c>)
 800ef2e:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	685a      	ldr	r2, [r3, #4]
 800ef34:	4b0a      	ldr	r3, [pc, #40]	; (800ef60 <pvPortMalloc+0x130>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	431a      	orrs	r2, r3
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	2200      	movs	r2, #0
 800ef42:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef44:	f7fe fb6c 	bl	800d620 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <pvPortMalloc+0x122>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ef4e:	f7fd f87d 	bl	800c04c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800ef52:	697b      	ldr	r3, [r7, #20]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3720      	adds	r7, #32
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	2000b174 	.word	0x2000b174
 800ef60:	2000b180 	.word	0x2000b180
 800ef64:	2000b178 	.word	0x2000b178
 800ef68:	2000b16c 	.word	0x2000b16c
 800ef6c:	2000b17c 	.word	0x2000b17c

0800ef70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d046      	beq.n	800f010 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef82:	2308      	movs	r3, #8
 800ef84:	425b      	negs	r3, r3
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	4413      	add	r3, r2
 800ef8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	4b20      	ldr	r3, [pc, #128]	; (800f018 <vPortFree+0xa8>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4013      	ands	r3, r2
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d109      	bne.n	800efb2 <vPortFree+0x42>
 800ef9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	60fb      	str	r3, [r7, #12]
 800efb0:	e7fe      	b.n	800efb0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d009      	beq.n	800efce <vPortFree+0x5e>
 800efba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbe:	f383 8811 	msr	BASEPRI, r3
 800efc2:	f3bf 8f6f 	isb	sy
 800efc6:	f3bf 8f4f 	dsb	sy
 800efca:	60bb      	str	r3, [r7, #8]
 800efcc:	e7fe      	b.n	800efcc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	685a      	ldr	r2, [r3, #4]
 800efd2:	4b11      	ldr	r3, [pc, #68]	; (800f018 <vPortFree+0xa8>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4013      	ands	r3, r2
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d019      	beq.n	800f010 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d115      	bne.n	800f010 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	4b0b      	ldr	r3, [pc, #44]	; (800f018 <vPortFree+0xa8>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	43db      	mvns	r3, r3
 800efee:	401a      	ands	r2, r3
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eff4:	f7fe fb06 	bl	800d604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	685a      	ldr	r2, [r3, #4]
 800effc:	4b07      	ldr	r3, [pc, #28]	; (800f01c <vPortFree+0xac>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4413      	add	r3, r2
 800f002:	4a06      	ldr	r2, [pc, #24]	; (800f01c <vPortFree+0xac>)
 800f004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f006:	6938      	ldr	r0, [r7, #16]
 800f008:	f000 f80a 	bl	800f020 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f00c:	f7fe fb08 	bl	800d620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f010:	bf00      	nop
 800f012:	3718      	adds	r7, #24
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	2000b180 	.word	0x2000b180
 800f01c:	2000b178 	.word	0x2000b178

0800f020 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f028:	4b28      	ldr	r3, [pc, #160]	; (800f0cc <prvInsertBlockIntoFreeList+0xac>)
 800f02a:	60fb      	str	r3, [r7, #12]
 800f02c:	e002      	b.n	800f034 <prvInsertBlockIntoFreeList+0x14>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	60fb      	str	r3, [r7, #12]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d8f7      	bhi.n	800f02e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	4413      	add	r3, r2
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d108      	bne.n	800f062 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	685a      	ldr	r2, [r3, #4]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	441a      	add	r2, r3
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	68ba      	ldr	r2, [r7, #8]
 800f06c:	441a      	add	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	429a      	cmp	r2, r3
 800f074:	d118      	bne.n	800f0a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	4b15      	ldr	r3, [pc, #84]	; (800f0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d00d      	beq.n	800f09e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	441a      	add	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	601a      	str	r2, [r3, #0]
 800f09c:	e008      	b.n	800f0b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f09e:	4b0c      	ldr	r3, [pc, #48]	; (800f0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	601a      	str	r2, [r3, #0]
 800f0a6:	e003      	b.n	800f0b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d002      	beq.n	800f0be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0be:	bf00      	nop
 800f0c0:	3714      	adds	r7, #20
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	2000b16c 	.word	0x2000b16c
 800f0d0:	2000b174 	.word	0x2000b174

0800f0d4 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b08f      	sub	sp, #60	; 0x3c
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800f0e8:	4b58      	ldr	r3, [pc, #352]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d009      	beq.n	800f104 <vPortDefineHeapRegions+0x30>
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	617b      	str	r3, [r7, #20]
 800f102:	e7fe      	b.n	800f102 <vPortDefineHeapRegions+0x2e>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	00db      	lsls	r3, r3, #3
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	4413      	add	r3, r2
 800f10c:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800f10e:	e07b      	b.n	800f208 <vPortDefineHeapRegions+0x134>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11e:	f003 0307 	and.w	r3, r3, #7
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00e      	beq.n	800f144 <vPortDefineHeapRegions+0x70>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800f126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f128:	3307      	adds	r3, #7
 800f12a:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12e:	f023 0307 	bic.w	r3, r3, #7
 800f132:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	461a      	mov	r2, r3
 800f13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f140:	4413      	add	r3, r2
 800f142:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d106      	bne.n	800f15c <vPortDefineHeapRegions+0x88>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	4a3f      	ldr	r2, [pc, #252]	; (800f250 <vPortDefineHeapRegions+0x17c>)
 800f152:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800f154:	4b3e      	ldr	r3, [pc, #248]	; (800f250 <vPortDefineHeapRegions+0x17c>)
 800f156:	2200      	movs	r2, #0
 800f158:	605a      	str	r2, [r3, #4]
 800f15a:	e01d      	b.n	800f198 <vPortDefineHeapRegions+0xc4>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800f15c:	4b3b      	ldr	r3, [pc, #236]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d109      	bne.n	800f178 <vPortDefineHeapRegions+0xa4>
 800f164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	613b      	str	r3, [r7, #16]
 800f176:	e7fe      	b.n	800f176 <vPortDefineHeapRegions+0xa2>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800f178:	4b34      	ldr	r3, [pc, #208]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	461a      	mov	r2, r3
 800f17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f180:	4293      	cmp	r3, r2
 800f182:	d809      	bhi.n	800f198 <vPortDefineHeapRegions+0xc4>
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	60fb      	str	r3, [r7, #12]
 800f196:	e7fe      	b.n	800f196 <vPortDefineHeapRegions+0xc2>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800f198:	4b2c      	ldr	r3, [pc, #176]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800f19e:	69fa      	ldr	r2, [r7, #28]
 800f1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a2:	4413      	add	r3, r2
 800f1a4:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800f1a6:	2208      	movs	r2, #8
 800f1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1aa:	1a9b      	subs	r3, r3, r2
 800f1ac:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800f1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b0:	f023 0307 	bic.w	r3, r3, #7
 800f1b4:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800f1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b8:	4a24      	ldr	r2, [pc, #144]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f1ba:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800f1bc:	4b23      	ldr	r3, [pc, #140]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800f1c4:	4b21      	ldr	r3, [pc, #132]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800f1d0:	6a3b      	ldr	r3, [r7, #32]
 800f1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f1d4:	1ad2      	subs	r2, r2, r3
 800f1d6:	6a3b      	ldr	r3, [r7, #32]
 800f1d8:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800f1da:	4b1c      	ldr	r3, [pc, #112]	; (800f24c <vPortDefineHeapRegions+0x178>)
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <vPortDefineHeapRegions+0x11a>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	6a3a      	ldr	r2, [r7, #32]
 800f1ec:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800f1ee:	6a3b      	ldr	r3, [r7, #32]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1f4:	4413      	add	r3, r2
 800f1f6:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800f1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	4413      	add	r3, r2
 800f206:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800f208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f47f af7f 	bne.w	800f110 <vPortDefineHeapRegions+0x3c>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800f212:	4a10      	ldr	r2, [pc, #64]	; (800f254 <vPortDefineHeapRegions+0x180>)
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800f218:	4a0f      	ldr	r2, [pc, #60]	; (800f258 <vPortDefineHeapRegions+0x184>)
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800f21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f220:	2b00      	cmp	r3, #0
 800f222:	d109      	bne.n	800f238 <vPortDefineHeapRegions+0x164>
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	60bb      	str	r3, [r7, #8]
 800f236:	e7fe      	b.n	800f236 <vPortDefineHeapRegions+0x162>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f238:	4b08      	ldr	r3, [pc, #32]	; (800f25c <vPortDefineHeapRegions+0x188>)
 800f23a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f23e:	601a      	str	r2, [r3, #0]
}
 800f240:	bf00      	nop
 800f242:	373c      	adds	r7, #60	; 0x3c
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	2000b174 	.word	0x2000b174
 800f250:	2000b16c 	.word	0x2000b16c
 800f254:	2000b17c 	.word	0x2000b17c
 800f258:	2000b178 	.word	0x2000b178
 800f25c:	2000b180 	.word	0x2000b180

0800f260 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800f260:	b580      	push	{r7, lr}
 800f262:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800f264:	4904      	ldr	r1, [pc, #16]	; (800f278 <MX_FATFS_Init+0x18>)
 800f266:	4805      	ldr	r0, [pc, #20]	; (800f27c <MX_FATFS_Init+0x1c>)
 800f268:	f7fc fa7a 	bl	800b760 <FATFS_LinkDriver>
 800f26c:	4603      	mov	r3, r0
 800f26e:	461a      	mov	r2, r3
 800f270:	4b03      	ldr	r3, [pc, #12]	; (800f280 <MX_FATFS_Init+0x20>)
 800f272:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800f274:	bf00      	nop
 800f276:	bd80      	pop	{r7, pc}
 800f278:	2000b1fc 	.word	0x2000b1fc
 800f27c:	08013790 	.word	0x08013790
 800f280:	2000b664 	.word	0x2000b664

0800f284 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f288:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording opearation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800f29e:	4b21      	ldr	r3, [pc, #132]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2a0:	685a      	ldr	r2, [r3, #4]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	b2d2      	uxtb	r2, r2
 800f2a8:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800f2aa:	4b1e      	ldr	r3, [pc, #120]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	0a1a      	lsrs	r2, r3, #8
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3305      	adds	r3, #5
 800f2b4:	b2d2      	uxtb	r2, r2
 800f2b6:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800f2b8:	4b1a      	ldr	r3, [pc, #104]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	0c1a      	lsrs	r2, r3, #16
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	3306      	adds	r3, #6
 800f2c2:	b2d2      	uxtb	r2, r2
 800f2c4:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800f2c6:	4b17      	ldr	r3, [pc, #92]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	0e1a      	lsrs	r2, r3, #24
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	3307      	adds	r3, #7
 800f2d0:	b2d2      	uxtb	r2, r2
 800f2d2:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800f2d4:	4b13      	ldr	r3, [pc, #76]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	3b2c      	subs	r3, #44	; 0x2c
 800f2da:	4a12      	ldr	r2, [pc, #72]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2dc:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 800f2de:	4b11      	ldr	r3, [pc, #68]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2e0:	685a      	ldr	r2, [r3, #4]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	3328      	adds	r3, #40	; 0x28
 800f2e6:	b2d2      	uxtb	r2, r2
 800f2e8:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800f2ea:	4b0e      	ldr	r3, [pc, #56]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	0a1a      	lsrs	r2, r3, #8
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	3329      	adds	r3, #41	; 0x29
 800f2f4:	b2d2      	uxtb	r2, r2
 800f2f6:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800f2f8:	4b0a      	ldr	r3, [pc, #40]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	0c1a      	lsrs	r2, r3, #16
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	332a      	adds	r3, #42	; 0x2a
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 800f306:	4b07      	ldr	r3, [pc, #28]	; (800f324 <WavProcess_HeaderUpdate+0x90>)
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	0e1a      	lsrs	r2, r3, #24
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	332b      	adds	r3, #43	; 0x2b
 800f310:	b2d2      	uxtb	r2, r2
 800f312:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	2000b730 	.word	0x2000b730

0800f328 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2252      	movs	r2, #82	; 0x52
 800f336:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	3301      	adds	r3, #1
 800f33c:	2249      	movs	r2, #73	; 0x49
 800f33e:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3302      	adds	r3, #2
 800f344:	2246      	movs	r2, #70	; 0x46
 800f346:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	3303      	adds	r3, #3
 800f34c:	2246      	movs	r2, #70	; 0x46
 800f34e:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording opearation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	3304      	adds	r3, #4
 800f354:	2200      	movs	r2, #0
 800f356:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	3305      	adds	r3, #5
 800f35c:	224c      	movs	r2, #76	; 0x4c
 800f35e:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	3306      	adds	r3, #6
 800f364:	221d      	movs	r2, #29
 800f366:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	3307      	adds	r3, #7
 800f36c:	2200      	movs	r2, #0
 800f36e:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	3308      	adds	r3, #8
 800f374:	2257      	movs	r2, #87	; 0x57
 800f376:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3309      	adds	r3, #9
 800f37c:	2241      	movs	r2, #65	; 0x41
 800f37e:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	330a      	adds	r3, #10
 800f384:	2256      	movs	r2, #86	; 0x56
 800f386:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	330b      	adds	r3, #11
 800f38c:	2245      	movs	r2, #69	; 0x45
 800f38e:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	330c      	adds	r3, #12
 800f394:	2266      	movs	r2, #102	; 0x66
 800f396:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	330d      	adds	r3, #13
 800f39c:	226d      	movs	r2, #109	; 0x6d
 800f39e:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	330e      	adds	r3, #14
 800f3a4:	2274      	movs	r2, #116	; 0x74
 800f3a6:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	330f      	adds	r3, #15
 800f3ac:	2220      	movs	r2, #32
 800f3ae:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	3310      	adds	r3, #16
 800f3b4:	2210      	movs	r2, #16
 800f3b6:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	3311      	adds	r3, #17
 800f3bc:	2200      	movs	r2, #0
 800f3be:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	3312      	adds	r3, #18
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3313      	adds	r3, #19
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	3314      	adds	r3, #20
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	3315      	adds	r3, #21
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	8ada      	ldrh	r2, [r3, #22]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	3316      	adds	r3, #22
 800f3e8:	b2d2      	uxtb	r2, r2
 800f3ea:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3317      	adds	r3, #23
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	699a      	ldr	r2, [r3, #24]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	3318      	adds	r3, #24
 800f3fc:	b2d2      	uxtb	r2, r2
 800f3fe:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	699b      	ldr	r3, [r3, #24]
 800f404:	0a1a      	lsrs	r2, r3, #8
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	3319      	adds	r3, #25
 800f40a:	b2d2      	uxtb	r2, r2
 800f40c:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	699b      	ldr	r3, [r3, #24]
 800f412:	0c1a      	lsrs	r2, r3, #16
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	331a      	adds	r3, #26
 800f418:	b2d2      	uxtb	r2, r2
 800f41a:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	699b      	ldr	r3, [r3, #24]
 800f420:	0e1a      	lsrs	r2, r3, #24
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	331b      	adds	r3, #27
 800f426:	b2d2      	uxtb	r2, r2
 800f428:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	69da      	ldr	r2, [r3, #28]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	331c      	adds	r3, #28
 800f432:	b2d2      	uxtb	r2, r2
 800f434:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	69db      	ldr	r3, [r3, #28]
 800f43a:	0a1a      	lsrs	r2, r3, #8
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	331d      	adds	r3, #29
 800f440:	b2d2      	uxtb	r2, r2
 800f442:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	69db      	ldr	r3, [r3, #28]
 800f448:	0c1a      	lsrs	r2, r3, #16
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	331e      	adds	r3, #30
 800f44e:	b2d2      	uxtb	r2, r2
 800f450:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	69db      	ldr	r3, [r3, #28]
 800f456:	0e1a      	lsrs	r2, r3, #24
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	331f      	adds	r3, #31
 800f45c:	b2d2      	uxtb	r2, r2
 800f45e:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	8c1a      	ldrh	r2, [r3, #32]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3320      	adds	r3, #32
 800f468:	b2d2      	uxtb	r2, r2
 800f46a:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	3321      	adds	r3, #33	; 0x21
 800f470:	2200      	movs	r2, #0
 800f472:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	3322      	adds	r3, #34	; 0x22
 800f47c:	b2d2      	uxtb	r2, r2
 800f47e:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3323      	adds	r3, #35	; 0x23
 800f484:	2200      	movs	r2, #0
 800f486:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3324      	adds	r3, #36	; 0x24
 800f48c:	2264      	movs	r2, #100	; 0x64
 800f48e:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3325      	adds	r3, #37	; 0x25
 800f494:	2261      	movs	r2, #97	; 0x61
 800f496:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	3326      	adds	r3, #38	; 0x26
 800f49c:	2274      	movs	r2, #116	; 0x74
 800f49e:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3327      	adds	r3, #39	; 0x27
 800f4a4:	2261      	movs	r2, #97	; 0x61
 800f4a6:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	3328      	adds	r3, #40	; 0x28
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3329      	adds	r3, #41	; 0x29
 800f4b4:	224c      	movs	r2, #76	; 0x4c
 800f4b6:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	332a      	adds	r3, #42	; 0x2a
 800f4bc:	221d      	movs	r2, #29
 800f4be:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	332b      	adds	r3, #43	; 0x2b
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	370c      	adds	r7, #12
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr
	...

0800f4d8 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */
uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800f4e2:	4a1b      	ldr	r2, [pc, #108]	; (800f550 <WavProcess_EncInit+0x78>)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800f4e8:	4b19      	ldr	r3, [pc, #100]	; (800f550 <WavProcess_EncInit+0x78>)
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800f4ee:	4b18      	ldr	r3, [pc, #96]	; (800f550 <WavProcess_EncInit+0x78>)
 800f4f0:	2210      	movs	r2, #16
 800f4f2:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800f4f4:	4b16      	ldr	r3, [pc, #88]	; (800f550 <WavProcess_EncInit+0x78>)
 800f4f6:	4a17      	ldr	r2, [pc, #92]	; (800f554 <WavProcess_EncInit+0x7c>)
 800f4f8:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800f4fa:	4b15      	ldr	r3, [pc, #84]	; (800f550 <WavProcess_EncInit+0x78>)
 800f4fc:	222c      	movs	r2, #44	; 0x2c
 800f4fe:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800f500:	4b13      	ldr	r3, [pc, #76]	; (800f550 <WavProcess_EncInit+0x78>)
 800f502:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800f504:	4a12      	ldr	r2, [pc, #72]	; (800f550 <WavProcess_EncInit+0x78>)
 800f506:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800f508:	08d2      	lsrs	r2, r2, #3
 800f50a:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800f50c:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800f510:	4a0f      	ldr	r2, [pc, #60]	; (800f550 <WavProcess_EncInit+0x78>)
 800f512:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800f514:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800f518:	4a0d      	ldr	r2, [pc, #52]	; (800f550 <WavProcess_EncInit+0x78>)
 800f51a:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800f51c:	4b0c      	ldr	r3, [pc, #48]	; (800f550 <WavProcess_EncInit+0x78>)
 800f51e:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800f520:	4b0b      	ldr	r3, [pc, #44]	; (800f550 <WavProcess_EncInit+0x78>)
 800f522:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800f524:	08db      	lsrs	r3, r3, #3
 800f526:	b29b      	uxth	r3, r3
 800f528:	fb12 f303 	smulbb	r3, r2, r3
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	4b08      	ldr	r3, [pc, #32]	; (800f550 <WavProcess_EncInit+0x78>)
 800f530:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800f532:	4907      	ldr	r1, [pc, #28]	; (800f550 <WavProcess_EncInit+0x78>)
 800f534:	6838      	ldr	r0, [r7, #0]
 800f536:	f7ff fef7 	bl	800f328 <WavProcess_HeaderInit>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d001      	beq.n	800f544 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800f540:	2301      	movs	r3, #1
 800f542:	e000      	b.n	800f546 <WavProcess_EncInit+0x6e>
  }
  return 0;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	2000b678 	.word	0x2000b678
 800f554:	001d4c00 	.word	0x001d4c00

0800f558 <PDMDecoder_Init>:
  * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
  *         Number of audio channels (1: mono; 2: stereo)
  */
void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 800f564:	2300      	movs	r3, #0
 800f566:	617b      	str	r3, [r7, #20]

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 800f568:	2300      	movs	r3, #0
 800f56a:	613b      	str	r3, [r7, #16]
 800f56c:	4b42      	ldr	r3, [pc, #264]	; (800f678 <PDMDecoder_Init+0x120>)
 800f56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f570:	4a41      	ldr	r2, [pc, #260]	; (800f678 <PDMDecoder_Init+0x120>)
 800f572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f576:	6313      	str	r3, [r2, #48]	; 0x30
 800f578:	4b3f      	ldr	r3, [pc, #252]	; (800f678 <PDMDecoder_Init+0x120>)
 800f57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f57c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f580:	613b      	str	r3, [r7, #16]
 800f582:	693b      	ldr	r3, [r7, #16]

  for(index = 0; index < ChnlNbrIn; index++)
 800f584:	2300      	movs	r3, #0
 800f586:	617b      	str	r3, [r7, #20]
 800f588:	e06e      	b.n	800f668 <PDMDecoder_Init+0x110>
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 800f58a:	4a3c      	ldr	r2, [pc, #240]	; (800f67c <PDMDecoder_Init+0x124>)
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	214c      	movs	r1, #76	; 0x4c
 800f590:	fb01 f303 	mul.w	r3, r1, r3
 800f594:	4413      	add	r3, r2
 800f596:	2200      	movs	r2, #0
 800f598:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800f59a:	4a38      	ldr	r2, [pc, #224]	; (800f67c <PDMDecoder_Init+0x124>)
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	214c      	movs	r1, #76	; 0x4c
 800f5a0:	fb01 f303 	mul.w	r3, r1, r3
 800f5a4:	4413      	add	r3, r2
 800f5a6:	3302      	adds	r3, #2
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800f5ac:	4a33      	ldr	r2, [pc, #204]	; (800f67c <PDMDecoder_Init+0x124>)
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	214c      	movs	r1, #76	; 0x4c
 800f5b2:	fb01 f303 	mul.w	r3, r1, r3
 800f5b6:	4413      	add	r3, r2
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	4a31      	ldr	r2, [pc, #196]	; (800f680 <PDMDecoder_Init+0x128>)
 800f5bc:	601a      	str	r2, [r3, #0]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	b298      	uxth	r0, r3
 800f5c2:	4a2e      	ldr	r2, [pc, #184]	; (800f67c <PDMDecoder_Init+0x124>)
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	214c      	movs	r1, #76	; 0x4c
 800f5c8:	fb01 f303 	mul.w	r3, r1, r3
 800f5cc:	4413      	add	r3, r2
 800f5ce:	330a      	adds	r3, #10
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	b298      	uxth	r0, r3
 800f5d8:	4a28      	ldr	r2, [pc, #160]	; (800f67c <PDMDecoder_Init+0x124>)
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	214c      	movs	r1, #76	; 0x4c
 800f5de:	fb01 f303 	mul.w	r3, r1, r3
 800f5e2:	4413      	add	r3, r2
 800f5e4:	3308      	adds	r3, #8
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	801a      	strh	r2, [r3, #0]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	224c      	movs	r2, #76	; 0x4c
 800f5ee:	fb02 f303 	mul.w	r3, r2, r3
 800f5f2:	4a22      	ldr	r2, [pc, #136]	; (800f67c <PDMDecoder_Init+0x124>)
 800f5f4:	4413      	add	r3, r2
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f003 f8c8 	bl	801278c <PDM_Filter_Init>

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	4a21      	ldr	r2, [pc, #132]	; (800f684 <PDMDecoder_Init+0x12c>)
 800f600:	fba2 2303 	umull	r2, r3, r2, r3
 800f604:	099b      	lsrs	r3, r3, #6
 800f606:	b298      	uxth	r0, r3
 800f608:	491f      	ldr	r1, [pc, #124]	; (800f688 <PDMDecoder_Init+0x130>)
 800f60a:	697a      	ldr	r2, [r7, #20]
 800f60c:	4613      	mov	r3, r2
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	4413      	add	r3, r2
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	440b      	add	r3, r1
 800f616:	3302      	adds	r3, #2
 800f618:	4602      	mov	r2, r0
 800f61a:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].mic_gain = 50;
 800f61c:	491a      	ldr	r1, [pc, #104]	; (800f688 <PDMDecoder_Init+0x130>)
 800f61e:	697a      	ldr	r2, [r7, #20]
 800f620:	4613      	mov	r3, r2
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	4413      	add	r3, r2
 800f626:	005b      	lsls	r3, r3, #1
 800f628:	440b      	add	r3, r1
 800f62a:	3304      	adds	r3, #4
 800f62c:	2232      	movs	r2, #50	; 0x32
 800f62e:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800f630:	4915      	ldr	r1, [pc, #84]	; (800f688 <PDMDecoder_Init+0x130>)
 800f632:	697a      	ldr	r2, [r7, #20]
 800f634:	4613      	mov	r3, r2
 800f636:	005b      	lsls	r3, r3, #1
 800f638:	4413      	add	r3, r2
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	440b      	add	r3, r1
 800f63e:	2202      	movs	r2, #2
 800f640:	801a      	strh	r2, [r3, #0]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	224c      	movs	r2, #76	; 0x4c
 800f646:	fb02 f303 	mul.w	r3, r2, r3
 800f64a:	4a0c      	ldr	r2, [pc, #48]	; (800f67c <PDMDecoder_Init+0x124>)
 800f64c:	1898      	adds	r0, r3, r2
 800f64e:	697a      	ldr	r2, [r7, #20]
 800f650:	4613      	mov	r3, r2
 800f652:	005b      	lsls	r3, r3, #1
 800f654:	4413      	add	r3, r2
 800f656:	005b      	lsls	r3, r3, #1
 800f658:	4a0b      	ldr	r2, [pc, #44]	; (800f688 <PDMDecoder_Init+0x130>)
 800f65a:	4413      	add	r3, r2
 800f65c:	4619      	mov	r1, r3
 800f65e:	f003 f931 	bl	80128c4 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	3301      	adds	r3, #1
 800f666:	617b      	str	r3, [r7, #20]
 800f668:	697a      	ldr	r2, [r7, #20]
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d38c      	bcc.n	800f58a <PDMDecoder_Init+0x32>
  }
}
 800f670:	bf00      	nop
 800f672:	3718      	adds	r7, #24
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	40023800 	.word	0x40023800
 800f67c:	2000d740 	.word	0x2000d740
 800f680:	7e809d48 	.word	0x7e809d48
 800f684:	10624dd3 	.word	0x10624dd3
 800f688:	2000b66c 	.word	0x2000b66c

0800f68c <AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b0a4      	sub	sp, #144	; 0x90
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
  uint16_t AppPDM[64];
  uint32_t index = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* PDM Demux */
  for(index = 0; index < 64; index++)
 800f69c:	2300      	movs	r3, #0
 800f69e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f6a2:	e020      	b.n	800f6e6 <AUDIO_IN_PDMToPCM+0x5a>
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 800f6a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	0a1b      	lsrs	r3, r3, #8
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	b21a      	sxth	r2, r3
 800f6b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6ba:	005b      	lsls	r3, r3, #1
 800f6bc:	6879      	ldr	r1, [r7, #4]
 800f6be:	440b      	add	r3, r1
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	021b      	lsls	r3, r3, #8
 800f6c4:	b21b      	sxth	r3, r3
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	b21b      	sxth	r3, r3
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800f6d6:	440b      	add	r3, r1
 800f6d8:	f823 2c84 	strh.w	r2, [r3, #-132]
  for(index = 0; index < 64; index++)
 800f6dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f6e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6ea:	2b3f      	cmp	r3, #63	; 0x3f
 800f6ec:	d9da      	bls.n	800f6a4 <AUDIO_IN_PDMToPCM+0x18>
  }

  for(index = 0; index < 1; index++)
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f6f4:	e019      	b.n	800f72a <AUDIO_IN_PDMToPCM+0x9e>
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 800f6f6:	f107 020c 	add.w	r2, r7, #12
 800f6fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6fe:	005b      	lsls	r3, r3, #1
 800f700:	18d0      	adds	r0, r2, r3
 800f702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	18d1      	adds	r1, r2, r3
 800f70c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f710:	224c      	movs	r2, #76	; 0x4c
 800f712:	fb02 f303 	mul.w	r3, r2, r3
 800f716:	4a16      	ldr	r2, [pc, #88]	; (800f770 <AUDIO_IN_PDMToPCM+0xe4>)
 800f718:	4413      	add	r3, r2
 800f71a:	461a      	mov	r2, r3
 800f71c:	f003 f9cc 	bl	8012ab8 <PDM_Filter>
  for(index = 0; index < 1; index++)
 800f720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f724:	3301      	adds	r3, #1
 800f726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f72a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d0e1      	beq.n	800f6f6 <AUDIO_IN_PDMToPCM+0x6a>
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < 16; index++)
 800f732:	2300      	movs	r3, #0
 800f734:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f738:	e011      	b.n	800f75e <AUDIO_IN_PDMToPCM+0xd2>
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 800f73a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	441a      	add	r2, r3
 800f744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	3302      	adds	r3, #2
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	440b      	add	r3, r1
 800f750:	8812      	ldrh	r2, [r2, #0]
 800f752:	801a      	strh	r2, [r3, #0]
  for(index = 0; index < 16; index++)
 800f754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f758:	3301      	adds	r3, #1
 800f75a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f762:	2b0f      	cmp	r3, #15
 800f764:	d9e9      	bls.n	800f73a <AUDIO_IN_PDMToPCM+0xae>
  }

  /* Return AUDIO_OK when all operations are correctly done */
  return 1;
 800f766:	2301      	movs	r3, #1
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3790      	adds	r7, #144	; 0x90
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	2000d740 	.word	0x2000d740

0800f774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b08a      	sub	sp, #40	; 0x28
 800f778:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f77a:	f7f1 f8d5 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f77e:	f000 f849 	bl	800f814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f782:	f000 f915 	bl	800f9b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800f786:	f000 f8f3 	bl	800f970 <MX_DMA_Init>
  MX_I2S2_Init();
 800f78a:	f000 f8c3 	bl	800f914 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
    PDMDecoder_Init(FREQ,1,NBR_CHANNELS);
 800f78e:	2202      	movs	r2, #2
 800f790:	2101      	movs	r1, #1
 800f792:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800f796:	f7ff fedf 	bl	800f558 <PDMDecoder_Init>
    memset(PDM_buffer,0,sizeof(uint16_t)*128);
 800f79a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f79e:	2100      	movs	r1, #0
 800f7a0:	4815      	ldr	r0, [pc, #84]	; (800f7f8 <main+0x84>)
 800f7a2:	f003 f9da 	bl	8012b5a <memset>
    memset(PCM_buffer,0,sizeof(uint16_t)*16);
 800f7a6:	2220      	movs	r2, #32
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	4814      	ldr	r0, [pc, #80]	; (800f7fc <main+0x88>)
 800f7ac:	f003 f9d5 	bl	8012b5a <memset>
  /* USER CODE END 2 */

  osKernelInitialize();
 800f7b0:	f7fc f838 	bl	800b824 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800f7b4:	1d3b      	adds	r3, r7, #4
 800f7b6:	2224      	movs	r2, #36	; 0x24
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f003 f9cd 	bl	8012b5a <memset>
 800f7c0:	4b0f      	ldr	r3, [pc, #60]	; (800f800 <main+0x8c>)
 800f7c2:	607b      	str	r3, [r7, #4]
 800f7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7c8:	61bb      	str	r3, [r7, #24]
 800f7ca:	2318      	movs	r3, #24
 800f7cc:	61fb      	str	r3, [r7, #28]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 1024
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800f7ce:	1d3b      	adds	r3, r7, #4
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	480b      	ldr	r0, [pc, #44]	; (800f804 <main+0x90>)
 800f7d6:	f7fc f88f 	bl	800b8f8 <osThreadNew>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	4b0a      	ldr	r3, [pc, #40]	; (800f808 <main+0x94>)
 800f7de:	601a      	str	r2, [r3, #0]
  Led_task_handle =  osThreadNew(Led_commandes, NULL, &defaultTask_attributes);
 800f7e0:	1d3b      	adds	r3, r7, #4
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	4809      	ldr	r0, [pc, #36]	; (800f80c <main+0x98>)
 800f7e8:	f7fc f886 	bl	800b8f8 <osThreadNew>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	4b08      	ldr	r3, [pc, #32]	; (800f810 <main+0x9c>)
 800f7f0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800f7f2:	f7fc f84d 	bl	800b890 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800f7f6:	e7fe      	b.n	800f7f6 <main+0x82>
 800f7f8:	2000d7d8 	.word	0x2000d7d8
 800f7fc:	2000dd84 	.word	0x2000dd84
 800f800:	080136a0 	.word	0x080136a0
 800f804:	0800fd01 	.word	0x0800fd01
 800f808:	2000b668 	.word	0x2000b668
 800f80c:	0800faad 	.word	0x0800faad
 800f810:	2000d73c 	.word	0x2000d73c

0800f814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b098      	sub	sp, #96	; 0x60
 800f818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f81a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f81e:	2230      	movs	r2, #48	; 0x30
 800f820:	2100      	movs	r1, #0
 800f822:	4618      	mov	r0, r3
 800f824:	f003 f999 	bl	8012b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f828:	f107 031c 	add.w	r3, r7, #28
 800f82c:	2200      	movs	r2, #0
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	605a      	str	r2, [r3, #4]
 800f832:	609a      	str	r2, [r3, #8]
 800f834:	60da      	str	r2, [r3, #12]
 800f836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f838:	f107 030c 	add.w	r3, r7, #12
 800f83c:	2200      	movs	r2, #0
 800f83e:	601a      	str	r2, [r3, #0]
 800f840:	605a      	str	r2, [r3, #4]
 800f842:	609a      	str	r2, [r3, #8]
 800f844:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f846:	2300      	movs	r3, #0
 800f848:	60bb      	str	r3, [r7, #8]
 800f84a:	4b30      	ldr	r3, [pc, #192]	; (800f90c <SystemClock_Config+0xf8>)
 800f84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84e:	4a2f      	ldr	r2, [pc, #188]	; (800f90c <SystemClock_Config+0xf8>)
 800f850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f854:	6413      	str	r3, [r2, #64]	; 0x40
 800f856:	4b2d      	ldr	r3, [pc, #180]	; (800f90c <SystemClock_Config+0xf8>)
 800f858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f85a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f85e:	60bb      	str	r3, [r7, #8]
 800f860:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f862:	2300      	movs	r3, #0
 800f864:	607b      	str	r3, [r7, #4]
 800f866:	4b2a      	ldr	r3, [pc, #168]	; (800f910 <SystemClock_Config+0xfc>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a29      	ldr	r2, [pc, #164]	; (800f910 <SystemClock_Config+0xfc>)
 800f86c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f870:	6013      	str	r3, [r2, #0]
 800f872:	4b27      	ldr	r3, [pc, #156]	; (800f910 <SystemClock_Config+0xfc>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f87a:	607b      	str	r3, [r7, #4]
 800f87c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f87e:	2301      	movs	r3, #1
 800f880:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f888:	2302      	movs	r3, #2
 800f88a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f88c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f890:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f892:	2304      	movs	r3, #4
 800f894:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f896:	23a8      	movs	r3, #168	; 0xa8
 800f898:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f89a:	2302      	movs	r3, #2
 800f89c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800f89e:	2307      	movs	r3, #7
 800f8a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f8a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7f4 f9e2 	bl	8003c70 <HAL_RCC_OscConfig>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d001      	beq.n	800f8b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800f8b2:	f000 faab 	bl	800fe0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f8b6:	230f      	movs	r3, #15
 800f8b8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f8ba:	2302      	movs	r3, #2
 800f8bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f8c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f8c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f8c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f8ce:	f107 031c 	add.w	r3, r7, #28
 800f8d2:	2105      	movs	r1, #5
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7f4 fc0d 	bl	80040f4 <HAL_RCC_ClockConfig>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d001      	beq.n	800f8e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800f8e0:	f000 fa94 	bl	800fe0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 800f8e8:	2360      	movs	r3, #96	; 0x60
 800f8ea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 800f8ec:	2306      	movs	r3, #6
 800f8ee:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f8f0:	f107 030c 	add.w	r3, r7, #12
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7f4 fe09 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800f900:	f000 fa84 	bl	800fe0c <Error_Handler>
  }
}
 800f904:	bf00      	nop
 800f906:	3760      	adds	r7, #96	; 0x60
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	40023800 	.word	0x40023800
 800f910:	40007000 	.word	0x40007000

0800f914 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800f918:	4b13      	ldr	r3, [pc, #76]	; (800f968 <MX_I2S2_Init+0x54>)
 800f91a:	4a14      	ldr	r2, [pc, #80]	; (800f96c <MX_I2S2_Init+0x58>)
 800f91c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800f91e:	4b12      	ldr	r3, [pc, #72]	; (800f968 <MX_I2S2_Init+0x54>)
 800f920:	f44f 7240 	mov.w	r2, #768	; 0x300
 800f924:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_LSB;
 800f926:	4b10      	ldr	r3, [pc, #64]	; (800f968 <MX_I2S2_Init+0x54>)
 800f928:	2220      	movs	r2, #32
 800f92a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800f92c:	4b0e      	ldr	r3, [pc, #56]	; (800f968 <MX_I2S2_Init+0x54>)
 800f92e:	2200      	movs	r2, #0
 800f930:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800f932:	4b0d      	ldr	r3, [pc, #52]	; (800f968 <MX_I2S2_Init+0x54>)
 800f934:	2200      	movs	r2, #0
 800f936:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = 2*I2S_AUDIOFREQ_16K;
 800f938:	4b0b      	ldr	r3, [pc, #44]	; (800f968 <MX_I2S2_Init+0x54>)
 800f93a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800f93e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 800f940:	4b09      	ldr	r3, [pc, #36]	; (800f968 <MX_I2S2_Init+0x54>)
 800f942:	2208      	movs	r2, #8
 800f944:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800f946:	4b08      	ldr	r3, [pc, #32]	; (800f968 <MX_I2S2_Init+0x54>)
 800f948:	2200      	movs	r2, #0
 800f94a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800f94c:	4b06      	ldr	r3, [pc, #24]	; (800f968 <MX_I2S2_Init+0x54>)
 800f94e:	2200      	movs	r2, #0
 800f950:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800f952:	4805      	ldr	r0, [pc, #20]	; (800f968 <MX_I2S2_Init+0x54>)
 800f954:	f7f3 fb4a 	bl	8002fec <HAL_I2S_Init>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800f95e:	f000 fa55 	bl	800fe0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800f962:	bf00      	nop
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	2000db0c 	.word	0x2000db0c
 800f96c:	40003800 	.word	0x40003800

0800f970 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f976:	2300      	movs	r3, #0
 800f978:	607b      	str	r3, [r7, #4]
 800f97a:	4b0c      	ldr	r3, [pc, #48]	; (800f9ac <MX_DMA_Init+0x3c>)
 800f97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f97e:	4a0b      	ldr	r2, [pc, #44]	; (800f9ac <MX_DMA_Init+0x3c>)
 800f980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f984:	6313      	str	r3, [r2, #48]	; 0x30
 800f986:	4b09      	ldr	r3, [pc, #36]	; (800f9ac <MX_DMA_Init+0x3c>)
 800f988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f98a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f98e:	607b      	str	r3, [r7, #4]
 800f990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800f992:	2200      	movs	r2, #0
 800f994:	2105      	movs	r1, #5
 800f996:	200e      	movs	r0, #14
 800f998:	f7f1 f8e2 	bl	8000b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800f99c:	200e      	movs	r0, #14
 800f99e:	f7f1 f8fb 	bl	8000b98 <HAL_NVIC_EnableIRQ>

}
 800f9a2:	bf00      	nop
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	40023800 	.word	0x40023800

0800f9b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b08a      	sub	sp, #40	; 0x28
 800f9b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f9b6:	f107 0314 	add.w	r3, r7, #20
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	601a      	str	r2, [r3, #0]
 800f9be:	605a      	str	r2, [r3, #4]
 800f9c0:	609a      	str	r2, [r3, #8]
 800f9c2:	60da      	str	r2, [r3, #12]
 800f9c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	613b      	str	r3, [r7, #16]
 800f9ca:	4b35      	ldr	r3, [pc, #212]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800f9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ce:	4a34      	ldr	r2, [pc, #208]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800f9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9d4:	6313      	str	r3, [r2, #48]	; 0x30
 800f9d6:	4b32      	ldr	r3, [pc, #200]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800f9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9de:	613b      	str	r3, [r7, #16]
 800f9e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	60fb      	str	r3, [r7, #12]
 800f9e6:	4b2e      	ldr	r3, [pc, #184]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800f9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ea:	4a2d      	ldr	r2, [pc, #180]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800f9ec:	f043 0304 	orr.w	r3, r3, #4
 800f9f0:	6313      	str	r3, [r2, #48]	; 0x30
 800f9f2:	4b2b      	ldr	r3, [pc, #172]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800f9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f6:	f003 0304 	and.w	r3, r3, #4
 800f9fa:	60fb      	str	r3, [r7, #12]
 800f9fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f9fe:	2300      	movs	r3, #0
 800fa00:	60bb      	str	r3, [r7, #8]
 800fa02:	4b27      	ldr	r3, [pc, #156]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa06:	4a26      	ldr	r2, [pc, #152]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa08:	f043 0302 	orr.w	r3, r3, #2
 800fa0c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa0e:	4b24      	ldr	r3, [pc, #144]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa12:	f003 0302 	and.w	r3, r3, #2
 800fa16:	60bb      	str	r3, [r7, #8]
 800fa18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	607b      	str	r3, [r7, #4]
 800fa1e:	4b20      	ldr	r3, [pc, #128]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa22:	4a1f      	ldr	r2, [pc, #124]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa24:	f043 0301 	orr.w	r3, r3, #1
 800fa28:	6313      	str	r3, [r2, #48]	; 0x30
 800fa2a:	4b1d      	ldr	r3, [pc, #116]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa2e:	f003 0301 	and.w	r3, r3, #1
 800fa32:	607b      	str	r3, [r7, #4]
 800fa34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fa36:	2300      	movs	r3, #0
 800fa38:	603b      	str	r3, [r7, #0]
 800fa3a:	4b19      	ldr	r3, [pc, #100]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa3e:	4a18      	ldr	r2, [pc, #96]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa40:	f043 0308 	orr.w	r3, r3, #8
 800fa44:	6313      	str	r3, [r2, #48]	; 0x30
 800fa46:	4b16      	ldr	r3, [pc, #88]	; (800faa0 <MX_GPIO_Init+0xf0>)
 800fa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4a:	f003 0308 	and.w	r3, r3, #8
 800fa4e:	603b      	str	r3, [r7, #0]
 800fa50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800fa52:	2200      	movs	r2, #0
 800fa54:	2101      	movs	r1, #1
 800fa56:	4813      	ldr	r0, [pc, #76]	; (800faa4 <MX_GPIO_Init+0xf4>)
 800fa58:	f7f1 fe2c 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fa60:	2301      	movs	r3, #1
 800fa62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa64:	2300      	movs	r3, #0
 800fa66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fa6c:	f107 0314 	add.w	r3, r7, #20
 800fa70:	4619      	mov	r1, r3
 800fa72:	480c      	ldr	r0, [pc, #48]	; (800faa4 <MX_GPIO_Init+0xf4>)
 800fa74:	f7f1 fc84 	bl	8001380 <HAL_GPIO_Init>


  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800fa78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800fa7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa86:	2300      	movs	r3, #0
 800fa88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fa8a:	f107 0314 	add.w	r3, r7, #20
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4805      	ldr	r0, [pc, #20]	; (800faa8 <MX_GPIO_Init+0xf8>)
 800fa92:	f7f1 fc75 	bl	8001380 <HAL_GPIO_Init>


}
 800fa96:	bf00      	nop
 800fa98:	3728      	adds	r7, #40	; 0x28
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	40023800 	.word	0x40023800
 800faa4:	40020800 	.word	0x40020800
 800faa8:	40020c00 	.word	0x40020c00

0800faac <Led_commandes>:

/* USER CODE BEGIN 4 */

void Led_commandes(void *argument)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
	uint32_t Notification_value = 0x00;
 800fab4:	2300      	movs	r3, #0
 800fab6:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
      xTaskNotifyWait(1, 0, &Notification_value, 1000);
 800fab8:	f107 020c 	add.w	r2, r7, #12
 800fabc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fac0:	2100      	movs	r1, #0
 800fac2:	2001      	movs	r0, #1
 800fac4:	f7fe fb1c 	bl	800e100 <xTaskNotifyWait>
      HAL_GPIO_TogglePin(GPIOD,Notification_value);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	b29b      	uxth	r3, r3
 800facc:	4619      	mov	r1, r3
 800face:	4802      	ldr	r0, [pc, #8]	; (800fad8 <Led_commandes+0x2c>)
 800fad0:	f7f1 fe09 	bl	80016e6 <HAL_GPIO_TogglePin>
      xTaskNotifyWait(1, 0, &Notification_value, 1000);
 800fad4:	e7f0      	b.n	800fab8 <Led_commandes+0xc>
 800fad6:	bf00      	nop
 800fad8:	40020c00 	.word	0x40020c00

0800fadc <USBH_UserProcess>:
	}
}


void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	460b      	mov	r3, r1
 800fae6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fae8:	78fb      	ldrb	r3, [r7, #3]
 800faea:	3b01      	subs	r3, #1
 800faec:	2b04      	cmp	r3, #4
 800faee:	d84e      	bhi.n	800fb8e <USBH_UserProcess+0xb2>
 800faf0:	a201      	add	r2, pc, #4	; (adr r2, 800faf8 <USBH_UserProcess+0x1c>)
 800faf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf6:	bf00      	nop
 800faf8:	0800fb8f 	.word	0x0800fb8f
 800fafc:	0800fb15 	.word	0x0800fb15
 800fb00:	0800fb8f 	.word	0x0800fb8f
 800fb04:	0800fb87 	.word	0x0800fb87
 800fb08:	0800fb0d 	.word	0x0800fb0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fb0c:	4b22      	ldr	r3, [pc, #136]	; (800fb98 <USBH_UserProcess+0xbc>)
 800fb0e:	2203      	movs	r2, #3
 800fb10:	701a      	strb	r2, [r3, #0]
  break;
 800fb12:	e03d      	b.n	800fb90 <USBH_UserProcess+0xb4>

  case HOST_USER_CLASS_ACTIVE:
	  /* Initializes the File System */
	  if (f_mount(&USBDISKFatFs,(TCHAR const*)USBHPath,0) != FR_OK )
 800fb14:	2200      	movs	r2, #0
 800fb16:	4921      	ldr	r1, [pc, #132]	; (800fb9c <USBH_UserProcess+0xc0>)
 800fb18:	4821      	ldr	r0, [pc, #132]	; (800fba0 <USBH_UserProcess+0xc4>)
 800fb1a:	f7fa fe4b 	bl	800a7b4 <f_mount>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d001      	beq.n	800fb28 <USBH_UserProcess+0x4c>
	  {
	    /* FatFs initialisation fails */
	    Error_Handler();
 800fb24:	f000 f972 	bl	800fe0c <Error_Handler>
	  }

	  /* Remove Wave file if it exists on USB Flash Disk */
	  f_unlink (REC_WAVE_NAME);
 800fb28:	481e      	ldr	r0, [pc, #120]	; (800fba4 <USBH_UserProcess+0xc8>)
 800fb2a:	f7fb fd1b 	bl	800b564 <f_unlink>

	  if ((f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK))
 800fb2e:	220a      	movs	r2, #10
 800fb30:	491c      	ldr	r1, [pc, #112]	; (800fba4 <USBH_UserProcess+0xc8>)
 800fb32:	481d      	ldr	r0, [pc, #116]	; (800fba8 <USBH_UserProcess+0xcc>)
 800fb34:	f7fa fea2 	bl	800a87c <f_open>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d000      	beq.n	800fb40 <USBH_UserProcess+0x64>
	  {
	    while(1)
 800fb3e:	e7fe      	b.n	800fb3e <USBH_UserProcess+0x62>
	      /* Toggle LED5 in infinite loop to signal that: USB Flash Disk is not connected/removed
	         or an issue has occurred when creating/opening Wave file */
	    }
	  }
	  /* Initialize header file */
	  WavProcess_EncInit(16000, pHeaderBuff);
 800fb40:	491a      	ldr	r1, [pc, #104]	; (800fbac <USBH_UserProcess+0xd0>)
 800fb42:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800fb46:	f7ff fcc7 	bl	800f4d8 <WavProcess_EncInit>
	  /* Write the header Wave */
	  f_write(&WavFile, pHeaderBuff, 44, (void *)&byteswritten);
 800fb4a:	4b19      	ldr	r3, [pc, #100]	; (800fbb0 <USBH_UserProcess+0xd4>)
 800fb4c:	222c      	movs	r2, #44	; 0x2c
 800fb4e:	4917      	ldr	r1, [pc, #92]	; (800fbac <USBH_UserProcess+0xd0>)
 800fb50:	4815      	ldr	r0, [pc, #84]	; (800fba8 <USBH_UserProcess+0xcc>)
 800fb52:	f7fb f858 	bl	800ac06 <f_write>

	  /* Increment the Wave counter */
	  BufferCtl.fptr = byteswritten;
 800fb56:	4b16      	ldr	r3, [pc, #88]	; (800fbb0 <USBH_UserProcess+0xd4>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a16      	ldr	r2, [pc, #88]	; (800fbb4 <USBH_UserProcess+0xd8>)
 800fb5c:	6053      	str	r3, [r2, #4]
	  HAL_I2S_Receive_DMA(&hi2s2, PDM_buffer, PDM_BUFFER);
 800fb5e:	2280      	movs	r2, #128	; 0x80
 800fb60:	4915      	ldr	r1, [pc, #84]	; (800fbb8 <USBH_UserProcess+0xdc>)
 800fb62:	4816      	ldr	r0, [pc, #88]	; (800fbbc <USBH_UserProcess+0xe0>)
 800fb64:	f7f3 fb82 	bl	800326c <HAL_I2S_Receive_DMA>
      //envoi de notification pour la tache qui gere les leds
	  if( xTaskNotify( Led_task_handle, GPIO_PIN_13, eSetValueWithOverwrite ) == pdPASS )
 800fb68:	4b15      	ldr	r3, [pc, #84]	; (800fbc0 <USBH_UserProcess+0xe4>)
 800fb6a:	6818      	ldr	r0, [r3, #0]
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	2203      	movs	r2, #3
 800fb70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fb74:	f7fe fb1e 	bl	800e1b4 <xTaskGenericNotify>
	  }
	  else
	  {
		 /* The task's notification value was not updated. */
	  }
	  ITcounter = 0;
 800fb78:	4b12      	ldr	r3, [pc, #72]	; (800fbc4 <USBH_UserProcess+0xe8>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	801a      	strh	r2, [r3, #0]
  Appli_state = APPLICATION_READY;
 800fb7e:	4b06      	ldr	r3, [pc, #24]	; (800fb98 <USBH_UserProcess+0xbc>)
 800fb80:	2202      	movs	r2, #2
 800fb82:	701a      	strb	r2, [r3, #0]
  break;
 800fb84:	e004      	b.n	800fb90 <USBH_UserProcess+0xb4>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fb86:	4b04      	ldr	r3, [pc, #16]	; (800fb98 <USBH_UserProcess+0xbc>)
 800fb88:	2201      	movs	r2, #1
 800fb8a:	701a      	strb	r2, [r3, #0]
  break;
 800fb8c:	e000      	b.n	800fb90 <USBH_UserProcess+0xb4>

  default:
  break;
 800fb8e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	2000b192 	.word	0x2000b192
 800fb9c:	2000b1fc 	.word	0x2000b1fc
 800fba0:	2000d8d8 	.word	0x2000d8d8
 800fba4:	080136ac 	.word	0x080136ac
 800fba8:	2000db54 	.word	0x2000db54
 800fbac:	2000b6a4 	.word	0x2000b6a4
 800fbb0:	2000b18c 	.word	0x2000b18c
 800fbb4:	2000b730 	.word	0x2000b730
 800fbb8:	2000d7d8 	.word	0x2000d7d8
 800fbbc:	2000db0c 	.word	0x2000db0c
 800fbc0:	2000d73c 	.word	0x2000d73c
 800fbc4:	2000b190 	.word	0x2000b190

0800fbc8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  AUDIO_IN_PDMToPCM((uint16_t*)&PDM_buffer[0], (uint16_t*)&PCM_buffer[0]);
 800fbd0:	491e      	ldr	r1, [pc, #120]	; (800fc4c <HAL_I2S_RxHalfCpltCallback+0x84>)
 800fbd2:	481f      	ldr	r0, [pc, #124]	; (800fc50 <HAL_I2S_RxHalfCpltCallback+0x88>)
 800fbd4:	f7ff fd5a 	bl	800f68c <AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&Rc_Buffer[32*ITcounter],(uint8_t*)PCM_buffer,64);
 800fbd8:	4b1e      	ldr	r3, [pc, #120]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fbda:	881b      	ldrh	r3, [r3, #0]
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	015b      	lsls	r3, r3, #5
 800fbe0:	005b      	lsls	r3, r3, #1
 800fbe2:	4a1d      	ldr	r2, [pc, #116]	; (800fc58 <HAL_I2S_RxHalfCpltCallback+0x90>)
 800fbe4:	4413      	add	r3, r2
 800fbe6:	2240      	movs	r2, #64	; 0x40
 800fbe8:	4918      	ldr	r1, [pc, #96]	; (800fc4c <HAL_I2S_RxHalfCpltCallback+0x84>)
 800fbea:	4618      	mov	r0, r3
 800fbec:	f002 ffaa 	bl	8012b44 <memcpy>

  if(ITcounter == (RC_BUFFER/(2*(PCM_BUFFER)))-1)
 800fbf0:	4b18      	ldr	r3, [pc, #96]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fbf2:	881b      	ldrh	r3, [r3, #0]
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	2b3f      	cmp	r3, #63	; 0x3f
 800fbf8:	d10d      	bne.n	800fc16 <HAL_I2S_RxHalfCpltCallback+0x4e>
  {
    AUDIODataReady = 1;
 800fbfa:	4b18      	ldr	r3, [pc, #96]	; (800fc5c <HAL_I2S_RxHalfCpltCallback+0x94>)
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = 0;
 800fc00:	4b17      	ldr	r3, [pc, #92]	; (800fc60 <HAL_I2S_RxHalfCpltCallback+0x98>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	601a      	str	r2, [r3, #0]
    ITcounter++;
 800fc06:	4b13      	ldr	r3, [pc, #76]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fc08:	881b      	ldrh	r3, [r3, #0]
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	b29a      	uxth	r2, r3
 800fc10:	4b10      	ldr	r3, [pc, #64]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fc12:	801a      	strh	r2, [r3, #0]
  //f_write(&WavFile,(uint8_t*) PCM_buffer,64, (void*)&byteswritten);
  //BufferCtl.fptr += 64;
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fc14:	e016      	b.n	800fc44 <HAL_I2S_RxHalfCpltCallback+0x7c>
  else if(ITcounter == (RC_BUFFER/(PCM_BUFFER))-1)
 800fc16:	4b0f      	ldr	r3, [pc, #60]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fc18:	881b      	ldrh	r3, [r3, #0]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	2b7f      	cmp	r3, #127	; 0x7f
 800fc1e:	d10a      	bne.n	800fc36 <HAL_I2S_RxHalfCpltCallback+0x6e>
    AUDIODataReady = 1;
 800fc20:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <HAL_I2S_RxHalfCpltCallback+0x94>)
 800fc22:	2201      	movs	r2, #1
 800fc24:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = 2048;
 800fc26:	4b0e      	ldr	r3, [pc, #56]	; (800fc60 <HAL_I2S_RxHalfCpltCallback+0x98>)
 800fc28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc2c:	601a      	str	r2, [r3, #0]
    ITcounter = 0;
 800fc2e:	4b09      	ldr	r3, [pc, #36]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	801a      	strh	r2, [r3, #0]
}
 800fc34:	e006      	b.n	800fc44 <HAL_I2S_RxHalfCpltCallback+0x7c>
	  ITcounter++;
 800fc36:	4b07      	ldr	r3, [pc, #28]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	4b04      	ldr	r3, [pc, #16]	; (800fc54 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 800fc42:	801a      	strh	r2, [r3, #0]
}
 800fc44:	bf00      	nop
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	2000dd84 	.word	0x2000dd84
 800fc50:	2000d7d8 	.word	0x2000d7d8
 800fc54:	2000b190 	.word	0x2000b190
 800fc58:	2000b738 	.word	0x2000b738
 800fc5c:	2000b184 	.word	0x2000b184
 800fc60:	2000b188 	.word	0x2000b188

0800fc64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  AUDIO_IN_PDMToPCM((uint16_t*)&PDM_buffer[64], (uint16_t*)&PCM_buffer[0]);
 800fc6c:	491e      	ldr	r1, [pc, #120]	; (800fce8 <HAL_I2S_RxCpltCallback+0x84>)
 800fc6e:	481f      	ldr	r0, [pc, #124]	; (800fcec <HAL_I2S_RxCpltCallback+0x88>)
 800fc70:	f7ff fd0c 	bl	800f68c <AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&Rc_Buffer[32*ITcounter],(uint8_t*)PCM_buffer,64);
 800fc74:	4b1e      	ldr	r3, [pc, #120]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fc76:	881b      	ldrh	r3, [r3, #0]
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	015b      	lsls	r3, r3, #5
 800fc7c:	005b      	lsls	r3, r3, #1
 800fc7e:	4a1d      	ldr	r2, [pc, #116]	; (800fcf4 <HAL_I2S_RxCpltCallback+0x90>)
 800fc80:	4413      	add	r3, r2
 800fc82:	2240      	movs	r2, #64	; 0x40
 800fc84:	4918      	ldr	r1, [pc, #96]	; (800fce8 <HAL_I2S_RxCpltCallback+0x84>)
 800fc86:	4618      	mov	r0, r3
 800fc88:	f002 ff5c 	bl	8012b44 <memcpy>
  if(ITcounter == (RC_BUFFER/(2*(PCM_BUFFER)))-1)
 800fc8c:	4b18      	ldr	r3, [pc, #96]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	2b3f      	cmp	r3, #63	; 0x3f
 800fc94:	d10d      	bne.n	800fcb2 <HAL_I2S_RxCpltCallback+0x4e>
  {
    AUDIODataReady = 1;
 800fc96:	4b18      	ldr	r3, [pc, #96]	; (800fcf8 <HAL_I2S_RxCpltCallback+0x94>)
 800fc98:	2201      	movs	r2, #1
 800fc9a:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = 0;
 800fc9c:	4b17      	ldr	r3, [pc, #92]	; (800fcfc <HAL_I2S_RxCpltCallback+0x98>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	601a      	str	r2, [r3, #0]
    ITcounter++;
 800fca2:	4b13      	ldr	r3, [pc, #76]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	3301      	adds	r3, #1
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	4b10      	ldr	r3, [pc, #64]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fcae:	801a      	strh	r2, [r3, #0]
	  ITcounter++;
  }
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800fcb0:	e016      	b.n	800fce0 <HAL_I2S_RxCpltCallback+0x7c>
  else if(ITcounter == (RC_BUFFER/(PCM_BUFFER))-1)
 800fcb2:	4b0f      	ldr	r3, [pc, #60]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	2b7f      	cmp	r3, #127	; 0x7f
 800fcba:	d10a      	bne.n	800fcd2 <HAL_I2S_RxCpltCallback+0x6e>
    AUDIODataReady = 1;
 800fcbc:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <HAL_I2S_RxCpltCallback+0x94>)
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = 2048;
 800fcc2:	4b0e      	ldr	r3, [pc, #56]	; (800fcfc <HAL_I2S_RxCpltCallback+0x98>)
 800fcc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcc8:	601a      	str	r2, [r3, #0]
    ITcounter = 0;
 800fcca:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	801a      	strh	r2, [r3, #0]
}
 800fcd0:	e006      	b.n	800fce0 <HAL_I2S_RxCpltCallback+0x7c>
	  ITcounter++;
 800fcd2:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	3301      	adds	r3, #1
 800fcda:	b29a      	uxth	r2, r3
 800fcdc:	4b04      	ldr	r3, [pc, #16]	; (800fcf0 <HAL_I2S_RxCpltCallback+0x8c>)
 800fcde:	801a      	strh	r2, [r3, #0]
}
 800fce0:	bf00      	nop
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	2000dd84 	.word	0x2000dd84
 800fcec:	2000d858 	.word	0x2000d858
 800fcf0:	2000b190 	.word	0x2000b190
 800fcf4:	2000b738 	.word	0x2000b738
 800fcf8:	2000b184 	.word	0x2000b184
 800fcfc:	2000b188 	.word	0x2000b188

0800fd00 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800fd08:	f000 fa18 	bl	801013c <MX_USB_HOST_Init>

  /* init code for FATFS */
  MX_FATFS_Init();
 800fd0c:	f7ff faa8 	bl	800f260 <MX_FATFS_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 if(  Appli_state == APPLICATION_READY)
 800fd10:	4b28      	ldr	r3, [pc, #160]	; (800fdb4 <StartDefaultTask+0xb4>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2b02      	cmp	r3, #2
 800fd16:	d1fb      	bne.n	800fd10 <StartDefaultTask+0x10>
	 {
		 /* Check if there are Data to write in Usb Key */
	   if(AUDIODataReady == 1)
 800fd18:	4b27      	ldr	r3, [pc, #156]	; (800fdb8 <StartDefaultTask+0xb8>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d119      	bne.n	800fd54 <StartDefaultTask+0x54>
	   {
		 /* write buffer in file */
		 if(f_write(&WavFile, (uint8_t*)(Rc_Buffer+AUDIOBuffOffset), RC_BUFFER, (void*)&byteswritten) != 0)
 800fd20:	4b26      	ldr	r3, [pc, #152]	; (800fdbc <StartDefaultTask+0xbc>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	4a26      	ldr	r2, [pc, #152]	; (800fdc0 <StartDefaultTask+0xc0>)
 800fd28:	1899      	adds	r1, r3, r2
 800fd2a:	4b26      	ldr	r3, [pc, #152]	; (800fdc4 <StartDefaultTask+0xc4>)
 800fd2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd30:	4825      	ldr	r0, [pc, #148]	; (800fdc8 <StartDefaultTask+0xc8>)
 800fd32:	f7fa ff68 	bl	800ac06 <f_write>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d001      	beq.n	800fd40 <StartDefaultTask+0x40>
		 {
		   Error_Handler();
 800fd3c:	f000 f866 	bl	800fe0c <Error_Handler>
		 }
		 BufferCtl.fptr += byteswritten;
 800fd40:	4b22      	ldr	r3, [pc, #136]	; (800fdcc <StartDefaultTask+0xcc>)
 800fd42:	685a      	ldr	r2, [r3, #4]
 800fd44:	4b1f      	ldr	r3, [pc, #124]	; (800fdc4 <StartDefaultTask+0xc4>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4413      	add	r3, r2
 800fd4a:	4a20      	ldr	r2, [pc, #128]	; (800fdcc <StartDefaultTask+0xcc>)
 800fd4c:	6053      	str	r3, [r2, #4]
		 AUDIODataReady = 0;
 800fd4e:	4b1a      	ldr	r3, [pc, #104]	; (800fdb8 <StartDefaultTask+0xb8>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]
	   }
	   if(BufferCtl.fptr  > 200000000)
 800fd54:	4b1d      	ldr	r3, [pc, #116]	; (800fdcc <StartDefaultTask+0xcc>)
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	4a1d      	ldr	r2, [pc, #116]	; (800fdd0 <StartDefaultTask+0xd0>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d9d8      	bls.n	800fd10 <StartDefaultTask+0x10>
	   {
		   HAL_I2S_DMAStop(&hi2s2);
 800fd5e:	481d      	ldr	r0, [pc, #116]	; (800fdd4 <StartDefaultTask+0xd4>)
 800fd60:	f7f3 fb40 	bl	80033e4 <HAL_I2S_DMAStop>
		  /* Update the data length in the header of the recorded Wave */
		  f_lseek(&WavFile, 0);
 800fd64:	2100      	movs	r1, #0
 800fd66:	4818      	ldr	r0, [pc, #96]	; (800fdc8 <StartDefaultTask+0xc8>)
 800fd68:	f7fb f9a9 	bl	800b0be <f_lseek>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fd72:	4819      	ldr	r0, [pc, #100]	; (800fdd8 <StartDefaultTask+0xd8>)
 800fd74:	f7f1 fc9e 	bl	80016b4 <HAL_GPIO_WritePin>
		  /* Parse the wav file header and extract required information */
		  WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800fd78:	4918      	ldr	r1, [pc, #96]	; (800fddc <StartDefaultTask+0xdc>)
 800fd7a:	4819      	ldr	r0, [pc, #100]	; (800fde0 <StartDefaultTask+0xe0>)
 800fd7c:	f7ff fa8a 	bl	800f294 <WavProcess_HeaderUpdate>
		  f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten);
 800fd80:	4b10      	ldr	r3, [pc, #64]	; (800fdc4 <StartDefaultTask+0xc4>)
 800fd82:	222c      	movs	r2, #44	; 0x2c
 800fd84:	4916      	ldr	r1, [pc, #88]	; (800fde0 <StartDefaultTask+0xe0>)
 800fd86:	4810      	ldr	r0, [pc, #64]	; (800fdc8 <StartDefaultTask+0xc8>)
 800fd88:	f7fa ff3d 	bl	800ac06 <f_write>

		  /* Close file and unmount MyFilesystem */
		  f_close (&WavFile);
 800fd8c:	480e      	ldr	r0, [pc, #56]	; (800fdc8 <StartDefaultTask+0xc8>)
 800fd8e:	f7fb f967 	bl	800b060 <f_close>
		  f_mount(NULL, 0, 1);
 800fd92:	2201      	movs	r2, #1
 800fd94:	2100      	movs	r1, #0
 800fd96:	2000      	movs	r0, #0
 800fd98:	f7fa fd0c 	bl	800a7b4 <f_mount>
		  BufferCtl.fptr = 0;
 800fd9c:	4b0b      	ldr	r3, [pc, #44]	; (800fdcc <StartDefaultTask+0xcc>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	605a      	str	r2, [r3, #4]
		  //send notification to led task
		  if( xTaskNotify( Led_task_handle, GPIO_PIN_12, eSetValueWithOverwrite ) == pdPASS )
 800fda2:	4b10      	ldr	r3, [pc, #64]	; (800fde4 <StartDefaultTask+0xe4>)
 800fda4:	6818      	ldr	r0, [r3, #0]
 800fda6:	2300      	movs	r3, #0
 800fda8:	2203      	movs	r2, #3
 800fdaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fdae:	f7fe fa01 	bl	800e1b4 <xTaskGenericNotify>
	 if(  Appli_state == APPLICATION_READY)
 800fdb2:	e7ad      	b.n	800fd10 <StartDefaultTask+0x10>
 800fdb4:	2000b192 	.word	0x2000b192
 800fdb8:	2000b184 	.word	0x2000b184
 800fdbc:	2000b188 	.word	0x2000b188
 800fdc0:	2000b738 	.word	0x2000b738
 800fdc4:	2000b18c 	.word	0x2000b18c
 800fdc8:	2000db54 	.word	0x2000db54
 800fdcc:	2000b730 	.word	0x2000b730
 800fdd0:	0bebc200 	.word	0x0bebc200
 800fdd4:	2000db0c 	.word	0x2000db0c
 800fdd8:	40020c00 	.word	0x40020c00
 800fddc:	2000b678 	.word	0x2000b678
 800fde0:	2000b6a4 	.word	0x2000b6a4
 800fde4:	2000d73c 	.word	0x2000d73c

0800fde8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4a04      	ldr	r2, [pc, #16]	; (800fe08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d101      	bne.n	800fdfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800fdfa:	f7f0 fdb7 	bl	800096c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800fdfe:	bf00      	nop
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	40010000 	.word	0x40010000

0800fe0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800fe10:	bf00      	nop
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
	...

0800fe1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fe22:	2300      	movs	r3, #0
 800fe24:	607b      	str	r3, [r7, #4]
 800fe26:	4b12      	ldr	r3, [pc, #72]	; (800fe70 <HAL_MspInit+0x54>)
 800fe28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe2a:	4a11      	ldr	r2, [pc, #68]	; (800fe70 <HAL_MspInit+0x54>)
 800fe2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe30:	6453      	str	r3, [r2, #68]	; 0x44
 800fe32:	4b0f      	ldr	r3, [pc, #60]	; (800fe70 <HAL_MspInit+0x54>)
 800fe34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe3a:	607b      	str	r3, [r7, #4]
 800fe3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fe3e:	2300      	movs	r3, #0
 800fe40:	603b      	str	r3, [r7, #0]
 800fe42:	4b0b      	ldr	r3, [pc, #44]	; (800fe70 <HAL_MspInit+0x54>)
 800fe44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe46:	4a0a      	ldr	r2, [pc, #40]	; (800fe70 <HAL_MspInit+0x54>)
 800fe48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe4c:	6413      	str	r3, [r2, #64]	; 0x40
 800fe4e:	4b08      	ldr	r3, [pc, #32]	; (800fe70 <HAL_MspInit+0x54>)
 800fe50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe56:	603b      	str	r3, [r7, #0]
 800fe58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	210f      	movs	r1, #15
 800fe5e:	f06f 0001 	mvn.w	r0, #1
 800fe62:	f7f0 fe7d 	bl	8000b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fe66:	bf00      	nop
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	40023800 	.word	0x40023800

0800fe74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b08a      	sub	sp, #40	; 0x28
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe7c:	f107 0314 	add.w	r3, r7, #20
 800fe80:	2200      	movs	r2, #0
 800fe82:	601a      	str	r2, [r3, #0]
 800fe84:	605a      	str	r2, [r3, #4]
 800fe86:	609a      	str	r2, [r3, #8]
 800fe88:	60da      	str	r2, [r3, #12]
 800fe8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a40      	ldr	r2, [pc, #256]	; (800ff94 <HAL_I2S_MspInit+0x120>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d17a      	bne.n	800ff8c <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800fe96:	2300      	movs	r3, #0
 800fe98:	613b      	str	r3, [r7, #16]
 800fe9a:	4b3f      	ldr	r3, [pc, #252]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800fe9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe9e:	4a3e      	ldr	r2, [pc, #248]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800fea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fea4:	6413      	str	r3, [r2, #64]	; 0x40
 800fea6:	4b3c      	ldr	r3, [pc, #240]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800fea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800feae:	613b      	str	r3, [r7, #16]
 800feb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800feb2:	2300      	movs	r3, #0
 800feb4:	60fb      	str	r3, [r7, #12]
 800feb6:	4b38      	ldr	r3, [pc, #224]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800feb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feba:	4a37      	ldr	r2, [pc, #220]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800febc:	f043 0304 	orr.w	r3, r3, #4
 800fec0:	6313      	str	r3, [r2, #48]	; 0x30
 800fec2:	4b35      	ldr	r3, [pc, #212]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800fec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec6:	f003 0304 	and.w	r3, r3, #4
 800feca:	60fb      	str	r3, [r7, #12]
 800fecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fece:	2300      	movs	r3, #0
 800fed0:	60bb      	str	r3, [r7, #8]
 800fed2:	4b31      	ldr	r3, [pc, #196]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800fed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fed6:	4a30      	ldr	r2, [pc, #192]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800fed8:	f043 0302 	orr.w	r3, r3, #2
 800fedc:	6313      	str	r3, [r2, #48]	; 0x30
 800fede:	4b2e      	ldr	r3, [pc, #184]	; (800ff98 <HAL_I2S_MspInit+0x124>)
 800fee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fee2:	f003 0302 	and.w	r3, r3, #2
 800fee6:	60bb      	str	r3, [r7, #8]
 800fee8:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration    
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800feea:	2308      	movs	r3, #8
 800feec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800feee:	2302      	movs	r3, #2
 800fef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fef6:	2300      	movs	r3, #0
 800fef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800fefa:	2305      	movs	r3, #5
 800fefc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fefe:	f107 0314 	add.w	r3, r7, #20
 800ff02:	4619      	mov	r1, r3
 800ff04:	4825      	ldr	r0, [pc, #148]	; (800ff9c <HAL_I2S_MspInit+0x128>)
 800ff06:	f7f1 fa3b 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800ff0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ff0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff10:	2302      	movs	r3, #2
 800ff12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff14:	2300      	movs	r3, #0
 800ff16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ff1c:	2305      	movs	r3, #5
 800ff1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ff20:	f107 0314 	add.w	r3, r7, #20
 800ff24:	4619      	mov	r1, r3
 800ff26:	481e      	ldr	r0, [pc, #120]	; (800ffa0 <HAL_I2S_MspInit+0x12c>)
 800ff28:	f7f1 fa2a 	bl	8001380 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800ff2c:	4b1d      	ldr	r3, [pc, #116]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff2e:	4a1e      	ldr	r2, [pc, #120]	; (800ffa8 <HAL_I2S_MspInit+0x134>)
 800ff30:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800ff32:	4b1c      	ldr	r3, [pc, #112]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff34:	2200      	movs	r2, #0
 800ff36:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ff38:	4b1a      	ldr	r3, [pc, #104]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ff3e:	4b19      	ldr	r3, [pc, #100]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff40:	2200      	movs	r2, #0
 800ff42:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ff44:	4b17      	ldr	r3, [pc, #92]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ff4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ff4c:	4b15      	ldr	r3, [pc, #84]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff52:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ff54:	4b13      	ldr	r3, [pc, #76]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ff5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800ff5c:	4b11      	ldr	r3, [pc, #68]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff62:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ff64:	4b0f      	ldr	r3, [pc, #60]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff66:	2200      	movs	r2, #0
 800ff68:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ff6a:	4b0e      	ldr	r3, [pc, #56]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ff70:	480c      	ldr	r0, [pc, #48]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff72:	f7f0 fe1f 	bl	8000bb4 <HAL_DMA_Init>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 800ff7c:	f7ff ff46 	bl	800fe0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	4a08      	ldr	r2, [pc, #32]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff84:	63da      	str	r2, [r3, #60]	; 0x3c
 800ff86:	4a07      	ldr	r2, [pc, #28]	; (800ffa4 <HAL_I2S_MspInit+0x130>)
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ff8c:	bf00      	nop
 800ff8e:	3728      	adds	r7, #40	; 0x28
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	40003800 	.word	0x40003800
 800ff98:	40023800 	.word	0x40023800
 800ff9c:	40020800 	.word	0x40020800
 800ffa0:	40020400 	.word	0x40020400
 800ffa4:	2000b6d0 	.word	0x2000b6d0
 800ffa8:	40026058 	.word	0x40026058

0800ffac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b08c      	sub	sp, #48	; 0x30
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	6879      	ldr	r1, [r7, #4]
 800ffc0:	2019      	movs	r0, #25
 800ffc2:	f7f0 fdcd 	bl	8000b60 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800ffc6:	2019      	movs	r0, #25
 800ffc8:	f7f0 fde6 	bl	8000b98 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ffcc:	2300      	movs	r3, #0
 800ffce:	60fb      	str	r3, [r7, #12]
 800ffd0:	4b1f      	ldr	r3, [pc, #124]	; (8010050 <HAL_InitTick+0xa4>)
 800ffd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffd4:	4a1e      	ldr	r2, [pc, #120]	; (8010050 <HAL_InitTick+0xa4>)
 800ffd6:	f043 0301 	orr.w	r3, r3, #1
 800ffda:	6453      	str	r3, [r2, #68]	; 0x44
 800ffdc:	4b1c      	ldr	r3, [pc, #112]	; (8010050 <HAL_InitTick+0xa4>)
 800ffde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe0:	f003 0301 	and.w	r3, r3, #1
 800ffe4:	60fb      	str	r3, [r7, #12]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ffe8:	f107 0210 	add.w	r2, r7, #16
 800ffec:	f107 0314 	add.w	r3, r7, #20
 800fff0:	4611      	mov	r1, r2
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7f4 fa58 	bl	80044a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800fff8:	f7f4 fa42 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 800fffc:	4603      	mov	r3, r0
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010004:	4a13      	ldr	r2, [pc, #76]	; (8010054 <HAL_InitTick+0xa8>)
 8010006:	fba2 2303 	umull	r2, r3, r2, r3
 801000a:	0c9b      	lsrs	r3, r3, #18
 801000c:	3b01      	subs	r3, #1
 801000e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010010:	4b11      	ldr	r3, [pc, #68]	; (8010058 <HAL_InitTick+0xac>)
 8010012:	4a12      	ldr	r2, [pc, #72]	; (801005c <HAL_InitTick+0xb0>)
 8010014:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8010016:	4b10      	ldr	r3, [pc, #64]	; (8010058 <HAL_InitTick+0xac>)
 8010018:	f240 32e7 	movw	r2, #999	; 0x3e7
 801001c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801001e:	4a0e      	ldr	r2, [pc, #56]	; (8010058 <HAL_InitTick+0xac>)
 8010020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010022:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8010024:	4b0c      	ldr	r3, [pc, #48]	; (8010058 <HAL_InitTick+0xac>)
 8010026:	2200      	movs	r2, #0
 8010028:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801002a:	4b0b      	ldr	r3, [pc, #44]	; (8010058 <HAL_InitTick+0xac>)
 801002c:	2200      	movs	r2, #0
 801002e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8010030:	4809      	ldr	r0, [pc, #36]	; (8010058 <HAL_InitTick+0xac>)
 8010032:	f7f4 fba9 	bl	8004788 <HAL_TIM_Base_Init>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d104      	bne.n	8010046 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 801003c:	4806      	ldr	r0, [pc, #24]	; (8010058 <HAL_InitTick+0xac>)
 801003e:	f7f4 fbd8 	bl	80047f2 <HAL_TIM_Base_Start_IT>
 8010042:	4603      	mov	r3, r0
 8010044:	e000      	b.n	8010048 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8010046:	2301      	movs	r3, #1
}
 8010048:	4618      	mov	r0, r3
 801004a:	3730      	adds	r7, #48	; 0x30
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	40023800 	.word	0x40023800
 8010054:	431bde83 	.word	0x431bde83
 8010058:	2000ddc4 	.word	0x2000ddc4
 801005c:	40010000 	.word	0x40010000

08010060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010060:	b480      	push	{r7}
 8010062:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010064:	bf00      	nop
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801006e:	b480      	push	{r7}
 8010070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010072:	e7fe      	b.n	8010072 <HardFault_Handler+0x4>

08010074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010074:	b480      	push	{r7}
 8010076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010078:	e7fe      	b.n	8010078 <MemManage_Handler+0x4>

0801007a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801007a:	b480      	push	{r7}
 801007c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801007e:	e7fe      	b.n	801007e <BusFault_Handler+0x4>

08010080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010080:	b480      	push	{r7}
 8010082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010084:	e7fe      	b.n	8010084 <UsageFault_Handler+0x4>

08010086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010086:	b480      	push	{r7}
 8010088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801008a:	bf00      	nop
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr

08010094 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8010098:	4802      	ldr	r0, [pc, #8]	; (80100a4 <DMA1_Stream3_IRQHandler+0x10>)
 801009a:	f7f0 ff09 	bl	8000eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 801009e:	bf00      	nop
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	2000b6d0 	.word	0x2000b6d0

080100a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80100ac:	4802      	ldr	r0, [pc, #8]	; (80100b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80100ae:	f7f4 fbc4 	bl	800483a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80100b2:	bf00      	nop
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	2000ddc4 	.word	0x2000ddc4

080100bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80100c0:	4802      	ldr	r0, [pc, #8]	; (80100cc <OTG_FS_IRQHandler+0x10>)
 80100c2:	f7f1 fdb1 	bl	8001c28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80100c6:	bf00      	nop
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	2000e1dc 	.word	0x2000e1dc

080100d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80100d0:	b480      	push	{r7}
 80100d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80100d4:	4b16      	ldr	r3, [pc, #88]	; (8010130 <SystemInit+0x60>)
 80100d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100da:	4a15      	ldr	r2, [pc, #84]	; (8010130 <SystemInit+0x60>)
 80100dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80100e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80100e4:	4b13      	ldr	r3, [pc, #76]	; (8010134 <SystemInit+0x64>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4a12      	ldr	r2, [pc, #72]	; (8010134 <SystemInit+0x64>)
 80100ea:	f043 0301 	orr.w	r3, r3, #1
 80100ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80100f0:	4b10      	ldr	r3, [pc, #64]	; (8010134 <SystemInit+0x64>)
 80100f2:	2200      	movs	r2, #0
 80100f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80100f6:	4b0f      	ldr	r3, [pc, #60]	; (8010134 <SystemInit+0x64>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a0e      	ldr	r2, [pc, #56]	; (8010134 <SystemInit+0x64>)
 80100fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010104:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010106:	4b0b      	ldr	r3, [pc, #44]	; (8010134 <SystemInit+0x64>)
 8010108:	4a0b      	ldr	r2, [pc, #44]	; (8010138 <SystemInit+0x68>)
 801010a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801010c:	4b09      	ldr	r3, [pc, #36]	; (8010134 <SystemInit+0x64>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4a08      	ldr	r2, [pc, #32]	; (8010134 <SystemInit+0x64>)
 8010112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010116:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010118:	4b06      	ldr	r3, [pc, #24]	; (8010134 <SystemInit+0x64>)
 801011a:	2200      	movs	r2, #0
 801011c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801011e:	4b04      	ldr	r3, [pc, #16]	; (8010130 <SystemInit+0x60>)
 8010120:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010124:	609a      	str	r2, [r3, #8]
#endif
}
 8010126:	bf00      	nop
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr
 8010130:	e000ed00 	.word	0xe000ed00
 8010134:	40023800 	.word	0x40023800
 8010138:	24003010 	.word	0x24003010

0801013c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010140:	2201      	movs	r2, #1
 8010142:	490e      	ldr	r1, [pc, #56]	; (801017c <MX_USB_HOST_Init+0x40>)
 8010144:	480e      	ldr	r0, [pc, #56]	; (8010180 <MX_USB_HOST_Init+0x44>)
 8010146:	f7f7 f91d 	bl	8007384 <USBH_Init>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d001      	beq.n	8010154 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010150:	f7ff fe5c 	bl	800fe0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010154:	490b      	ldr	r1, [pc, #44]	; (8010184 <MX_USB_HOST_Init+0x48>)
 8010156:	480a      	ldr	r0, [pc, #40]	; (8010180 <MX_USB_HOST_Init+0x44>)
 8010158:	f7f7 f9a9 	bl	80074ae <USBH_RegisterClass>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010162:	f7ff fe53 	bl	800fe0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010166:	4806      	ldr	r0, [pc, #24]	; (8010180 <MX_USB_HOST_Init+0x44>)
 8010168:	f7f7 fa2e 	bl	80075c8 <USBH_Start>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d001      	beq.n	8010176 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010172:	f7ff fe4b 	bl	800fe0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010176:	bf00      	nop
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	0800fadd 	.word	0x0800fadd
 8010180:	2000de04 	.word	0x2000de04
 8010184:	20000404 	.word	0x20000404

08010188 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b08a      	sub	sp, #40	; 0x28
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010190:	f107 0314 	add.w	r3, r7, #20
 8010194:	2200      	movs	r2, #0
 8010196:	601a      	str	r2, [r3, #0]
 8010198:	605a      	str	r2, [r3, #4]
 801019a:	609a      	str	r2, [r3, #8]
 801019c:	60da      	str	r2, [r3, #12]
 801019e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101a8:	d147      	bne.n	801023a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101aa:	2300      	movs	r3, #0
 80101ac:	613b      	str	r3, [r7, #16]
 80101ae:	4b25      	ldr	r3, [pc, #148]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 80101b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b2:	4a24      	ldr	r2, [pc, #144]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 80101b4:	f043 0301 	orr.w	r3, r3, #1
 80101b8:	6313      	str	r3, [r2, #48]	; 0x30
 80101ba:	4b22      	ldr	r3, [pc, #136]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 80101bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101be:	f003 0301 	and.w	r3, r3, #1
 80101c2:	613b      	str	r3, [r7, #16]
 80101c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80101c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101cc:	2300      	movs	r3, #0
 80101ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101d0:	2300      	movs	r3, #0
 80101d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101d4:	f107 0314 	add.w	r3, r7, #20
 80101d8:	4619      	mov	r1, r3
 80101da:	481b      	ldr	r0, [pc, #108]	; (8010248 <HAL_HCD_MspInit+0xc0>)
 80101dc:	f7f1 f8d0 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80101e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80101e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101e6:	2302      	movs	r3, #2
 80101e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101ea:	2300      	movs	r3, #0
 80101ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101ee:	2303      	movs	r3, #3
 80101f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101f2:	230a      	movs	r3, #10
 80101f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101f6:	f107 0314 	add.w	r3, r7, #20
 80101fa:	4619      	mov	r1, r3
 80101fc:	4812      	ldr	r0, [pc, #72]	; (8010248 <HAL_HCD_MspInit+0xc0>)
 80101fe:	f7f1 f8bf 	bl	8001380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010202:	4b10      	ldr	r3, [pc, #64]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 8010204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010206:	4a0f      	ldr	r2, [pc, #60]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 8010208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801020c:	6353      	str	r3, [r2, #52]	; 0x34
 801020e:	2300      	movs	r3, #0
 8010210:	60fb      	str	r3, [r7, #12]
 8010212:	4b0c      	ldr	r3, [pc, #48]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 8010214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010216:	4a0b      	ldr	r2, [pc, #44]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 8010218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801021c:	6453      	str	r3, [r2, #68]	; 0x44
 801021e:	4b09      	ldr	r3, [pc, #36]	; (8010244 <HAL_HCD_MspInit+0xbc>)
 8010220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801022a:	2200      	movs	r2, #0
 801022c:	2105      	movs	r1, #5
 801022e:	2043      	movs	r0, #67	; 0x43
 8010230:	f7f0 fc96 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010234:	2043      	movs	r0, #67	; 0x43
 8010236:	f7f0 fcaf 	bl	8000b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801023a:	bf00      	nop
 801023c:	3728      	adds	r7, #40	; 0x28
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	40023800 	.word	0x40023800
 8010248:	40020000 	.word	0x40020000

0801024c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801025a:	4618      	mov	r0, r3
 801025c:	f7f7 fd07 	bl	8007c6e <USBH_LL_IncTimer>
}
 8010260:	bf00      	nop
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010276:	4618      	mov	r0, r3
 8010278:	f7f7 fd4c 	bl	8007d14 <USBH_LL_Connect>
}
 801027c:	bf00      	nop
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010292:	4618      	mov	r0, r3
 8010294:	f7f7 fd72 	bl	8007d7c <USBH_LL_Disconnect>
}
 8010298:	bf00      	nop
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	460b      	mov	r3, r1
 80102aa:	70fb      	strb	r3, [r7, #3]
 80102ac:	4613      	mov	r3, r2
 80102ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7f7 fdb2 	bl	8007e20 <USBH_LL_NotifyURBChange>
#endif
}
 80102bc:	bf00      	nop
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7f7 fcf5 	bl	8007cc2 <USBH_LL_PortEnabled>
} 
 80102d8:	bf00      	nop
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7f7 fcf5 	bl	8007cde <USBH_LL_PortDisabled>
} 
 80102f4:	bf00      	nop
 80102f6:	3708      	adds	r7, #8
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801030a:	2b01      	cmp	r3, #1
 801030c:	d12a      	bne.n	8010364 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801030e:	4a18      	ldr	r2, [pc, #96]	; (8010370 <USBH_LL_Init+0x74>)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4a15      	ldr	r2, [pc, #84]	; (8010370 <USBH_LL_Init+0x74>)
 801031a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801031e:	4b14      	ldr	r3, [pc, #80]	; (8010370 <USBH_LL_Init+0x74>)
 8010320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010324:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010326:	4b12      	ldr	r3, [pc, #72]	; (8010370 <USBH_LL_Init+0x74>)
 8010328:	2208      	movs	r2, #8
 801032a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801032c:	4b10      	ldr	r3, [pc, #64]	; (8010370 <USBH_LL_Init+0x74>)
 801032e:	2201      	movs	r2, #1
 8010330:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010332:	4b0f      	ldr	r3, [pc, #60]	; (8010370 <USBH_LL_Init+0x74>)
 8010334:	2200      	movs	r2, #0
 8010336:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010338:	4b0d      	ldr	r3, [pc, #52]	; (8010370 <USBH_LL_Init+0x74>)
 801033a:	2202      	movs	r2, #2
 801033c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801033e:	4b0c      	ldr	r3, [pc, #48]	; (8010370 <USBH_LL_Init+0x74>)
 8010340:	2200      	movs	r2, #0
 8010342:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010344:	480a      	ldr	r0, [pc, #40]	; (8010370 <USBH_LL_Init+0x74>)
 8010346:	f7f1 f9e9 	bl	800171c <HAL_HCD_Init>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d001      	beq.n	8010354 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010350:	f7ff fd5c 	bl	800fe0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010354:	4806      	ldr	r0, [pc, #24]	; (8010370 <USBH_LL_Init+0x74>)
 8010356:	f7f1 fde5 	bl	8001f24 <HAL_HCD_GetCurrentFrame>
 801035a:	4603      	mov	r3, r0
 801035c:	4619      	mov	r1, r3
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7f7 fc76 	bl	8007c50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	2000e1dc 	.word	0x2000e1dc

08010374 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801037c:	2300      	movs	r3, #0
 801037e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801038a:	4618      	mov	r0, r3
 801038c:	f7f1 fd52 	bl	8001e34 <HAL_HCD_Start>
 8010390:	4603      	mov	r3, r0
 8010392:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010394:	7bfb      	ldrb	r3, [r7, #15]
 8010396:	4618      	mov	r0, r3
 8010398:	f000 f990 	bl	80106bc <USBH_Get_USB_Status>
 801039c:	4603      	mov	r3, r0
 801039e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80103a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103b2:	2300      	movs	r3, #0
 80103b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7f1 fd5a 	bl	8001e7a <HAL_HCD_Stop>
 80103c6:	4603      	mov	r3, r0
 80103c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80103ca:	7bfb      	ldrb	r3, [r7, #15]
 80103cc:	4618      	mov	r0, r3
 80103ce:	f000 f975 	bl	80106bc <USBH_Get_USB_Status>
 80103d2:	4603      	mov	r3, r0
 80103d4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80103d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80103e8:	2301      	movs	r3, #1
 80103ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7f1 fda4 	bl	8001f40 <HAL_HCD_GetCurrentSpeed>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d007      	beq.n	801040e <USBH_LL_GetSpeed+0x2e>
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d302      	bcc.n	8010408 <USBH_LL_GetSpeed+0x28>
 8010402:	2b02      	cmp	r3, #2
 8010404:	d006      	beq.n	8010414 <USBH_LL_GetSpeed+0x34>
 8010406:	e008      	b.n	801041a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010408:	2300      	movs	r3, #0
 801040a:	73fb      	strb	r3, [r7, #15]
    break;
 801040c:	e008      	b.n	8010420 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801040e:	2301      	movs	r3, #1
 8010410:	73fb      	strb	r3, [r7, #15]
    break;
 8010412:	e005      	b.n	8010420 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010414:	2302      	movs	r3, #2
 8010416:	73fb      	strb	r3, [r7, #15]
    break;
 8010418:	e002      	b.n	8010420 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801041a:	2301      	movs	r3, #1
 801041c:	73fb      	strb	r3, [r7, #15]
    break;
 801041e:	bf00      	nop
  }
  return  speed;
 8010420:	7bfb      	ldrb	r3, [r7, #15]
}
 8010422:	4618      	mov	r0, r3
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b084      	sub	sp, #16
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010436:	2300      	movs	r3, #0
 8010438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010440:	4618      	mov	r0, r3
 8010442:	f7f1 fd37 	bl	8001eb4 <HAL_HCD_ResetPort>
 8010446:	4603      	mov	r3, r0
 8010448:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801044a:	7bfb      	ldrb	r3, [r7, #15]
 801044c:	4618      	mov	r0, r3
 801044e:	f000 f935 	bl	80106bc <USBH_Get_USB_Status>
 8010452:	4603      	mov	r3, r0
 8010454:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8010456:	7bbb      	ldrb	r3, [r7, #14]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3710      	adds	r7, #16
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010472:	78fa      	ldrb	r2, [r7, #3]
 8010474:	4611      	mov	r1, r2
 8010476:	4618      	mov	r0, r3
 8010478:	f7f1 fd3f 	bl	8001efa <HAL_HCD_HC_GetXferCount>
 801047c:	4603      	mov	r3, r0
}
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010486:	b590      	push	{r4, r7, lr}
 8010488:	b089      	sub	sp, #36	; 0x24
 801048a:	af04      	add	r7, sp, #16
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	4608      	mov	r0, r1
 8010490:	4611      	mov	r1, r2
 8010492:	461a      	mov	r2, r3
 8010494:	4603      	mov	r3, r0
 8010496:	70fb      	strb	r3, [r7, #3]
 8010498:	460b      	mov	r3, r1
 801049a:	70bb      	strb	r3, [r7, #2]
 801049c:	4613      	mov	r3, r2
 801049e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104a4:	2300      	movs	r3, #0
 80104a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80104ae:	787c      	ldrb	r4, [r7, #1]
 80104b0:	78ba      	ldrb	r2, [r7, #2]
 80104b2:	78f9      	ldrb	r1, [r7, #3]
 80104b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80104b6:	9302      	str	r3, [sp, #8]
 80104b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104bc:	9301      	str	r3, [sp, #4]
 80104be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	4623      	mov	r3, r4
 80104c6:	f7f1 f98b 	bl	80017e0 <HAL_HCD_HC_Init>
 80104ca:	4603      	mov	r3, r0
 80104cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f000 f8f3 	bl	80106bc <USBH_Get_USB_Status>
 80104d6:	4603      	mov	r3, r0
 80104d8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80104da:	7bbb      	ldrb	r3, [r7, #14]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3714      	adds	r7, #20
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd90      	pop	{r4, r7, pc}

080104e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	460b      	mov	r3, r1
 80104ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104f4:	2300      	movs	r3, #0
 80104f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80104fe:	78fa      	ldrb	r2, [r7, #3]
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7f1 fa04 	bl	8001910 <HAL_HCD_HC_Halt>
 8010508:	4603      	mov	r3, r0
 801050a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	4618      	mov	r0, r3
 8010510:	f000 f8d4 	bl	80106bc <USBH_Get_USB_Status>
 8010514:	4603      	mov	r3, r0
 8010516:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8010518:	7bbb      	ldrb	r3, [r7, #14]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010522:	b590      	push	{r4, r7, lr}
 8010524:	b089      	sub	sp, #36	; 0x24
 8010526:	af04      	add	r7, sp, #16
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	4608      	mov	r0, r1
 801052c:	4611      	mov	r1, r2
 801052e:	461a      	mov	r2, r3
 8010530:	4603      	mov	r3, r0
 8010532:	70fb      	strb	r3, [r7, #3]
 8010534:	460b      	mov	r3, r1
 8010536:	70bb      	strb	r3, [r7, #2]
 8010538:	4613      	mov	r3, r2
 801053a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801054a:	787c      	ldrb	r4, [r7, #1]
 801054c:	78ba      	ldrb	r2, [r7, #2]
 801054e:	78f9      	ldrb	r1, [r7, #3]
 8010550:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010554:	9303      	str	r3, [sp, #12]
 8010556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010558:	9302      	str	r3, [sp, #8]
 801055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	4623      	mov	r3, r4
 8010566:	f7f1 f9f7 	bl	8001958 <HAL_HCD_HC_SubmitRequest>
 801056a:	4603      	mov	r3, r0
 801056c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801056e:	7bfb      	ldrb	r3, [r7, #15]
 8010570:	4618      	mov	r0, r3
 8010572:	f000 f8a3 	bl	80106bc <USBH_Get_USB_Status>
 8010576:	4603      	mov	r3, r0
 8010578:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801057a:	7bbb      	ldrb	r3, [r7, #14]
}
 801057c:	4618      	mov	r0, r3
 801057e:	3714      	adds	r7, #20
 8010580:	46bd      	mov	sp, r7
 8010582:	bd90      	pop	{r4, r7, pc}

08010584 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010596:	78fa      	ldrb	r2, [r7, #3]
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f7f1 fc98 	bl	8001ed0 <HAL_HCD_HC_GetURBState>
 80105a0:	4603      	mov	r3, r0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b082      	sub	sp, #8
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	460b      	mov	r3, r1
 80105b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d103      	bne.n	80105c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80105c0:	78fb      	ldrb	r3, [r7, #3]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 f9b4 	bl	8010930 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80105c8:	20c8      	movs	r0, #200	; 0xc8
 80105ca:	f7f0 f9ef 	bl	80009ac <HAL_Delay>
  return USBH_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80105d8:	b480      	push	{r7}
 80105da:	b085      	sub	sp, #20
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70fb      	strb	r3, [r7, #3]
 80105e4:	4613      	mov	r3, r2
 80105e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80105ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80105f0:	78fa      	ldrb	r2, [r7, #3]
 80105f2:	68f9      	ldr	r1, [r7, #12]
 80105f4:	4613      	mov	r3, r2
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	4413      	add	r3, r2
 80105fa:	00db      	lsls	r3, r3, #3
 80105fc:	440b      	add	r3, r1
 80105fe:	333b      	adds	r3, #59	; 0x3b
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00a      	beq.n	801061c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010606:	78fa      	ldrb	r2, [r7, #3]
 8010608:	68f9      	ldr	r1, [r7, #12]
 801060a:	4613      	mov	r3, r2
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	4413      	add	r3, r2
 8010610:	00db      	lsls	r3, r3, #3
 8010612:	440b      	add	r3, r1
 8010614:	3350      	adds	r3, #80	; 0x50
 8010616:	78ba      	ldrb	r2, [r7, #2]
 8010618:	701a      	strb	r2, [r3, #0]
 801061a:	e009      	b.n	8010630 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801061c:	78fa      	ldrb	r2, [r7, #3]
 801061e:	68f9      	ldr	r1, [r7, #12]
 8010620:	4613      	mov	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	440b      	add	r3, r1
 801062a:	3351      	adds	r3, #81	; 0x51
 801062c:	78ba      	ldrb	r2, [r7, #2]
 801062e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr

0801063e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801063e:	b480      	push	{r7}
 8010640:	b085      	sub	sp, #20
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
 8010646:	460b      	mov	r3, r1
 8010648:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010654:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010656:	78fa      	ldrb	r2, [r7, #3]
 8010658:	68b9      	ldr	r1, [r7, #8]
 801065a:	4613      	mov	r3, r2
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	4413      	add	r3, r2
 8010660:	00db      	lsls	r3, r3, #3
 8010662:	440b      	add	r3, r1
 8010664:	333b      	adds	r3, #59	; 0x3b
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00a      	beq.n	8010682 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801066c:	78fa      	ldrb	r2, [r7, #3]
 801066e:	68b9      	ldr	r1, [r7, #8]
 8010670:	4613      	mov	r3, r2
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	4413      	add	r3, r2
 8010676:	00db      	lsls	r3, r3, #3
 8010678:	440b      	add	r3, r1
 801067a:	3350      	adds	r3, #80	; 0x50
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	73fb      	strb	r3, [r7, #15]
 8010680:	e009      	b.n	8010696 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010682:	78fa      	ldrb	r2, [r7, #3]
 8010684:	68b9      	ldr	r1, [r7, #8]
 8010686:	4613      	mov	r3, r2
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	4413      	add	r3, r2
 801068c:	00db      	lsls	r3, r3, #3
 801068e:	440b      	add	r3, r1
 8010690:	3351      	adds	r3, #81	; 0x51
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010696:	7bfb      	ldrb	r3, [r7, #15]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3714      	adds	r7, #20
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f7f0 f97d 	bl	80009ac <HAL_Delay>
}
 80106b2:	bf00      	nop
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
	...

080106bc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106bc:	b480      	push	{r7}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	4603      	mov	r3, r0
 80106c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106c6:	2300      	movs	r3, #0
 80106c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80106ca:	79fb      	ldrb	r3, [r7, #7]
 80106cc:	2b03      	cmp	r3, #3
 80106ce:	d817      	bhi.n	8010700 <USBH_Get_USB_Status+0x44>
 80106d0:	a201      	add	r2, pc, #4	; (adr r2, 80106d8 <USBH_Get_USB_Status+0x1c>)
 80106d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d6:	bf00      	nop
 80106d8:	080106e9 	.word	0x080106e9
 80106dc:	080106ef 	.word	0x080106ef
 80106e0:	080106f5 	.word	0x080106f5
 80106e4:	080106fb 	.word	0x080106fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80106e8:	2300      	movs	r3, #0
 80106ea:	73fb      	strb	r3, [r7, #15]
    break;
 80106ec:	e00b      	b.n	8010706 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80106ee:	2302      	movs	r3, #2
 80106f0:	73fb      	strb	r3, [r7, #15]
    break;
 80106f2:	e008      	b.n	8010706 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80106f4:	2301      	movs	r3, #1
 80106f6:	73fb      	strb	r3, [r7, #15]
    break;
 80106f8:	e005      	b.n	8010706 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80106fa:	2302      	movs	r3, #2
 80106fc:	73fb      	strb	r3, [r7, #15]
    break;
 80106fe:	e002      	b.n	8010706 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010700:	2302      	movs	r3, #2
 8010702:	73fb      	strb	r3, [r7, #15]
    break;
 8010704:	bf00      	nop
  }
  return usb_status;
 8010706:	7bfb      	ldrb	r3, [r7, #15]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3714      	adds	r7, #20
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	4603      	mov	r3, r0
 801071c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 801071e:	2300      	movs	r3, #0
}
 8010720:	4618      	mov	r0, r3
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	4603      	mov	r3, r0
 8010734:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8010736:	2301      	movs	r3, #1
 8010738:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	4619      	mov	r1, r3
 801073e:	4808      	ldr	r0, [pc, #32]	; (8010760 <USBH_status+0x34>)
 8010740:	f7f5 ff27 	bl	8006592 <USBH_MSC_UnitIsReady>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <USBH_status+0x24>
  {
    res = RES_OK;
 801074a:	2300      	movs	r3, #0
 801074c:	73fb      	strb	r3, [r7, #15]
 801074e:	e001      	b.n	8010754 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8010750:	2301      	movs	r3, #1
 8010752:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8010754:	7bfb      	ldrb	r3, [r7, #15]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	2000de04 	.word	0x2000de04

08010764 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b094      	sub	sp, #80	; 0x50
 8010768:	af02      	add	r7, sp, #8
 801076a:	60b9      	str	r1, [r7, #8]
 801076c:	607a      	str	r2, [r7, #4]
 801076e:	603b      	str	r3, [r7, #0]
 8010770:	4603      	mov	r3, r0
 8010772:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010774:	2301      	movs	r3, #1
 8010776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 801077a:	7bf9      	ldrb	r1, [r7, #15]
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	4812      	ldr	r0, [pc, #72]	; (80107d0 <USBH_read+0x6c>)
 8010786:	f7f5 ff4e 	bl	8006626 <USBH_MSC_Read>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d103      	bne.n	8010798 <USBH_read+0x34>
  {
    res = RES_OK;
 8010790:	2300      	movs	r3, #0
 8010792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010796:	e015      	b.n	80107c4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8010798:	f107 0210 	add.w	r2, r7, #16
 801079c:	7bfb      	ldrb	r3, [r7, #15]
 801079e:	4619      	mov	r1, r3
 80107a0:	480b      	ldr	r0, [pc, #44]	; (80107d0 <USBH_read+0x6c>)
 80107a2:	f7f5 ff1c 	bl	80065de <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80107a6:	7f7b      	ldrb	r3, [r7, #29]
 80107a8:	2b28      	cmp	r3, #40	; 0x28
 80107aa:	d003      	beq.n	80107b4 <USBH_read+0x50>
 80107ac:	2b3a      	cmp	r3, #58	; 0x3a
 80107ae:	d001      	beq.n	80107b4 <USBH_read+0x50>
 80107b0:	2b04      	cmp	r3, #4
 80107b2:	d103      	bne.n	80107bc <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80107b4:	2303      	movs	r3, #3
 80107b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80107ba:	e003      	b.n	80107c4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80107bc:	2301      	movs	r3, #1
 80107be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80107c2:	bf00      	nop
    }
  }

  return res;
 80107c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3748      	adds	r7, #72	; 0x48
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	2000de04 	.word	0x2000de04

080107d4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b094      	sub	sp, #80	; 0x50
 80107d8:	af02      	add	r7, sp, #8
 80107da:	60b9      	str	r1, [r7, #8]
 80107dc:	607a      	str	r2, [r7, #4]
 80107de:	603b      	str	r3, [r7, #0]
 80107e0:	4603      	mov	r3, r0
 80107e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80107e4:	2301      	movs	r3, #1
 80107e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80107ea:	7bf9      	ldrb	r1, [r7, #15]
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	4817      	ldr	r0, [pc, #92]	; (8010854 <USBH_write+0x80>)
 80107f6:	f7f5 ff7f 	bl	80066f8 <USBH_MSC_Write>
 80107fa:	4603      	mov	r3, r0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d103      	bne.n	8010808 <USBH_write+0x34>
  {
    res = RES_OK;
 8010800:	2300      	movs	r3, #0
 8010802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010806:	e01f      	b.n	8010848 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8010808:	f107 0210 	add.w	r2, r7, #16
 801080c:	7bfb      	ldrb	r3, [r7, #15]
 801080e:	4619      	mov	r1, r3
 8010810:	4810      	ldr	r0, [pc, #64]	; (8010854 <USBH_write+0x80>)
 8010812:	f7f5 fee4 	bl	80065de <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8010816:	7f7b      	ldrb	r3, [r7, #29]
 8010818:	2b27      	cmp	r3, #39	; 0x27
 801081a:	d009      	beq.n	8010830 <USBH_write+0x5c>
 801081c:	2b27      	cmp	r3, #39	; 0x27
 801081e:	dc02      	bgt.n	8010826 <USBH_write+0x52>
 8010820:	2b04      	cmp	r3, #4
 8010822:	d009      	beq.n	8010838 <USBH_write+0x64>
 8010824:	e00c      	b.n	8010840 <USBH_write+0x6c>
 8010826:	2b28      	cmp	r3, #40	; 0x28
 8010828:	d006      	beq.n	8010838 <USBH_write+0x64>
 801082a:	2b3a      	cmp	r3, #58	; 0x3a
 801082c:	d004      	beq.n	8010838 <USBH_write+0x64>
 801082e:	e007      	b.n	8010840 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8010830:	2302      	movs	r3, #2
 8010832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8010836:	e007      	b.n	8010848 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8010838:	2303      	movs	r3, #3
 801083a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 801083e:	e003      	b.n	8010848 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8010840:	2301      	movs	r3, #1
 8010842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8010846:	bf00      	nop
    }
  }

  return res;
 8010848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801084c:	4618      	mov	r0, r3
 801084e:	3748      	adds	r7, #72	; 0x48
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	2000de04 	.word	0x2000de04

08010858 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b090      	sub	sp, #64	; 0x40
 801085c:	af00      	add	r7, sp, #0
 801085e:	4603      	mov	r3, r0
 8010860:	603a      	str	r2, [r7, #0]
 8010862:	71fb      	strb	r3, [r7, #7]
 8010864:	460b      	mov	r3, r1
 8010866:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010868:	2301      	movs	r3, #1
 801086a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 801086e:	79bb      	ldrb	r3, [r7, #6]
 8010870:	2b03      	cmp	r3, #3
 8010872:	d852      	bhi.n	801091a <USBH_ioctl+0xc2>
 8010874:	a201      	add	r2, pc, #4	; (adr r2, 801087c <USBH_ioctl+0x24>)
 8010876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087a:	bf00      	nop
 801087c:	0801088d 	.word	0x0801088d
 8010880:	08010895 	.word	0x08010895
 8010884:	080108bf 	.word	0x080108bf
 8010888:	080108eb 	.word	0x080108eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 801088c:	2300      	movs	r3, #0
 801088e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8010892:	e045      	b.n	8010920 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8010894:	f107 0208 	add.w	r2, r7, #8
 8010898:	79fb      	ldrb	r3, [r7, #7]
 801089a:	4619      	mov	r1, r3
 801089c:	4823      	ldr	r0, [pc, #140]	; (801092c <USBH_ioctl+0xd4>)
 801089e:	f7f5 fe9e 	bl	80065de <USBH_MSC_GetLUNInfo>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d106      	bne.n	80108b6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80108a8:	68fa      	ldr	r2, [r7, #12]
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80108b4:	e034      	b.n	8010920 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80108bc:	e030      	b.n	8010920 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80108be:	f107 0208 	add.w	r2, r7, #8
 80108c2:	79fb      	ldrb	r3, [r7, #7]
 80108c4:	4619      	mov	r1, r3
 80108c6:	4819      	ldr	r0, [pc, #100]	; (801092c <USBH_ioctl+0xd4>)
 80108c8:	f7f5 fe89 	bl	80065de <USBH_MSC_GetLUNInfo>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d107      	bne.n	80108e2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80108d2:	8a3b      	ldrh	r3, [r7, #16]
 80108d4:	461a      	mov	r2, r3
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80108da:	2300      	movs	r3, #0
 80108dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80108e0:	e01e      	b.n	8010920 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80108e2:	2301      	movs	r3, #1
 80108e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80108e8:	e01a      	b.n	8010920 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80108ea:	f107 0208 	add.w	r2, r7, #8
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	4619      	mov	r1, r3
 80108f2:	480e      	ldr	r0, [pc, #56]	; (801092c <USBH_ioctl+0xd4>)
 80108f4:	f7f5 fe73 	bl	80065de <USBH_MSC_GetLUNInfo>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d109      	bne.n	8010912 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80108fe:	8a3b      	ldrh	r3, [r7, #16]
 8010900:	0a5b      	lsrs	r3, r3, #9
 8010902:	b29b      	uxth	r3, r3
 8010904:	461a      	mov	r2, r3
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801090a:	2300      	movs	r3, #0
 801090c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8010910:	e006      	b.n	8010920 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8010912:	2301      	movs	r3, #1
 8010914:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8010918:	e002      	b.n	8010920 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 801091a:	2304      	movs	r3, #4
 801091c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8010920:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010924:	4618      	mov	r0, r3
 8010926:	3740      	adds	r7, #64	; 0x40
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	2000de04 	.word	0x2000de04

08010930 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	4603      	mov	r3, r0
 8010938:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801093a:	79fb      	ldrb	r3, [r7, #7]
 801093c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801093e:	79fb      	ldrb	r3, [r7, #7]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d102      	bne.n	801094a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8010944:	2301      	movs	r3, #1
 8010946:	73fb      	strb	r3, [r7, #15]
 8010948:	e001      	b.n	801094e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801094a:	2300      	movs	r3, #0
 801094c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801094e:	7bfb      	ldrb	r3, [r7, #15]
 8010950:	461a      	mov	r2, r3
 8010952:	2101      	movs	r1, #1
 8010954:	4803      	ldr	r0, [pc, #12]	; (8010964 <MX_DriverVbusFS+0x34>)
 8010956:	f7f0 fead 	bl	80016b4 <HAL_GPIO_WritePin>
}
 801095a:	bf00      	nop
 801095c:	3710      	adds	r7, #16
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	40020800 	.word	0x40020800

08010968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80109a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801096c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801096e:	e003      	b.n	8010978 <LoopCopyDataInit>

08010970 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010970:	4b0c      	ldr	r3, [pc, #48]	; (80109a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010972:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010974:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010976:	3104      	adds	r1, #4

08010978 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010978:	480b      	ldr	r0, [pc, #44]	; (80109a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801097a:	4b0c      	ldr	r3, [pc, #48]	; (80109ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801097c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801097e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010980:	d3f6      	bcc.n	8010970 <CopyDataInit>
  ldr  r2, =_sbss
 8010982:	4a0b      	ldr	r2, [pc, #44]	; (80109b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010984:	e002      	b.n	801098c <LoopFillZerobss>

08010986 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010986:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010988:	f842 3b04 	str.w	r3, [r2], #4

0801098c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801098c:	4b09      	ldr	r3, [pc, #36]	; (80109b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801098e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010990:	d3f9      	bcc.n	8010986 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010992:	f7ff fb9d 	bl	80100d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010996:	f002 f8b1 	bl	8012afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801099a:	f7fe feeb 	bl	800f774 <main>
  bx  lr    
 801099e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80109a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80109a4:	080137dc 	.word	0x080137dc
  ldr  r0, =_sdata
 80109a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80109ac:	200004a4 	.word	0x200004a4
  ldr  r2, =_sbss
 80109b0:	200004a4 	.word	0x200004a4
  ldr  r3, = _ebss
 80109b4:	2000e4a0 	.word	0x2000e4a0

080109b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80109b8:	e7fe      	b.n	80109b8 <ADC_IRQHandler>
	...

080109bc <D16_GENERIC>:
 80109bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80109c2:	468b      	mov	fp, r1
 80109c4:	b085      	sub	sp, #20
 80109c6:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80109ca:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80109ce:	69d1      	ldr	r1, [r2, #28]
 80109d0:	6893      	ldr	r3, [r2, #8]
 80109d2:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
 80109d6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80109d8:	2c00      	cmp	r4, #0
 80109da:	d06a      	beq.n	8010ab2 <D16_GENERIC+0xf6>
 80109dc:	f005 0610 	and.w	r6, r5, #16
 80109e0:	f005 0520 	and.w	r5, r5, #32
 80109e4:	2400      	movs	r4, #0
 80109e6:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8010ac8 <D16_GENERIC+0x10c>
 80109ea:	9602      	str	r6, [sp, #8]
 80109ec:	9503      	str	r5, [sp, #12]
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	e054      	b.n	8010a9c <D16_GENERIC+0xe0>
 80109f2:	b2f6      	uxtb	r6, r6
 80109f4:	5d87      	ldrb	r7, [r0, r6]
 80109f6:	7803      	ldrb	r3, [r0, #0]
 80109f8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80109fc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8010a00:	b2de      	uxtb	r6, r3
 8010a02:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
 8010a06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010a0a:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8010a0e:	eb01 0907 	add.w	r9, r1, r7
 8010a12:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8010a16:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8010a1a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8010a1e:	ea41 4909 	orr.w	r9, r1, r9, lsl #16
 8010a22:	ea4f 4729 	mov.w	r7, r9, asr #16
 8010a26:	9901      	ldr	r1, [sp, #4]
 8010a28:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010a2c:	fa1f f589 	uxth.w	r5, r9
 8010a30:	4439      	add	r1, r7
 8010a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a36:	fa0f f789 	sxth.w	r7, r9
 8010a3a:	440f      	add	r7, r1
 8010a3c:	eb05 4519 	add.w	r5, r5, r9, lsr #16
 8010a40:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
 8010a44:	9501      	str	r5, [sp, #4]
 8010a46:	9d02      	ldr	r5, [sp, #8]
 8010a48:	0ab1      	lsrs	r1, r6, #10
 8010a4a:	eb07 0608 	add.w	r6, r7, r8
 8010a4e:	1c63      	adds	r3, r4, #1
 8010a50:	ebcc 0606 	rsb	r6, ip, r6
 8010a54:	b17d      	cbz	r5, 8010a76 <D16_GENERIC+0xba>
 8010a56:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8010a5a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8010a5e:	46bc      	mov	ip, r7
 8010a60:	fba6 6708 	umull	r6, r7, r6, r8
 8010a64:	fb08 7709 	mla	r7, r8, r9, r7
 8010a68:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8010a6c:	f147 0700 	adc.w	r7, r7, #0
 8010a70:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8010a74:	4647      	mov	r7, r8
 8010a76:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8010a7a:	2600      	movs	r6, #0
 8010a7c:	f8b2 9028 	ldrh.w	r9, [r2, #40]	; 0x28
 8010a80:	043f      	lsls	r7, r7, #16
 8010a82:	fb04 f409 	mul.w	r4, r4, r9
 8010a86:	fbca 5607 	smlal	r5, r6, sl, r7
 8010a8a:	10b6      	asrs	r6, r6, #2
 8010a8c:	f306 060f 	ssat	r6, #16, r6
 8010a90:	f82b 6014 	strh.w	r6, [fp, r4, lsl #1]
 8010a94:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8010a96:	b29c      	uxth	r4, r3
 8010a98:	42a6      	cmp	r6, r4
 8010a9a:	d909      	bls.n	8010ab0 <D16_GENERIC+0xf4>
 8010a9c:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8010a9e:	2e01      	cmp	r6, #1
 8010aa0:	d1a7      	bne.n	80109f2 <D16_GENERIC+0x36>
 8010aa2:	9d03      	ldr	r5, [sp, #12]
 8010aa4:	f850 3b02 	ldr.w	r3, [r0], #2
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	d0a9      	beq.n	8010a00 <D16_GENERIC+0x44>
 8010aac:	ba5b      	rev16	r3, r3
 8010aae:	e7a7      	b.n	8010a00 <D16_GENERIC+0x44>
 8010ab0:	9b01      	ldr	r3, [sp, #4]
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	6093      	str	r3, [r2, #8]
 8010ab6:	61d1      	str	r1, [r2, #28]
 8010ab8:	f8c2 8010 	str.w	r8, [r2, #16]
 8010abc:	f8c2 c014 	str.w	ip, [r2, #20]
 8010ac0:	b005      	add	sp, #20
 8010ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac6:	bf00      	nop
 8010ac8:	20000000 	.word	0x20000000

08010acc <D24_GENERIC>:
 8010acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	9101      	str	r1, [sp, #4]
 8010ad6:	6917      	ldr	r7, [r2, #16]
 8010ad8:	6956      	ldr	r6, [r2, #20]
 8010ada:	69d3      	ldr	r3, [r2, #28]
 8010adc:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8010ae0:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8010ae4:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8010ae8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8010aea:	2d00      	cmp	r5, #0
 8010aec:	f000 808e 	beq.w	8010c0c <D24_GENERIC+0x140>
 8010af0:	f004 0510 	and.w	r5, r4, #16
 8010af4:	f004 0420 	and.w	r4, r4, #32
 8010af8:	2100      	movs	r1, #0
 8010afa:	f8df e138 	ldr.w	lr, [pc, #312]	; 8010c34 <D24_GENERIC+0x168>
 8010afe:	9502      	str	r5, [sp, #8]
 8010b00:	9403      	str	r4, [sp, #12]
 8010b02:	9300      	str	r3, [sp, #0]
 8010b04:	e067      	b.n	8010bd6 <D24_GENERIC+0x10a>
 8010b06:	b2ed      	uxtb	r5, r5
 8010b08:	f810 4015 	ldrb.w	r4, [r0, r5, lsl #1]
 8010b0c:	f810 a005 	ldrb.w	sl, [r0, r5]
 8010b10:	f890 c000 	ldrb.w	ip, [r0]
 8010b14:	0424      	lsls	r4, r4, #16
 8010b16:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8010b1a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 8010b1e:	4464      	add	r4, ip
 8010b20:	4428      	add	r0, r5
 8010b22:	b2e5      	uxtb	r5, r4
 8010b24:	9b00      	ldr	r3, [sp, #0]
 8010b26:	f85e a025 	ldr.w	sl, [lr, r5, lsl #2]
 8010b2a:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8010b2e:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 8010b32:	eb0a 2a93 	add.w	sl, sl, r3, lsr #10
 8010b36:	eb05 2c9a 	add.w	ip, r5, sl, lsr #10
 8010b3a:	f3ca 0509 	ubfx	r5, sl, #0, #10
 8010b3e:	f3cc 0a09 	ubfx	sl, ip, #0, #10
 8010b42:	ea4a 4a05 	orr.w	sl, sl, r5, lsl #16
 8010b46:	0c24      	lsrs	r4, r4, #16
 8010b48:	ea4f 452a 	mov.w	r5, sl, asr #16
 8010b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b50:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
 8010b54:	44a9      	add	r9, r5
 8010b56:	fa0f f48a 	sxth.w	r4, sl
 8010b5a:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 8010b5e:	eb08 0845 	add.w	r8, r8, r5, lsl #1
 8010b62:	eb09 0504 	add.w	r5, r9, r4
 8010b66:	ebc4 09c4 	rsb	r9, r4, r4, lsl #3
 8010b6a:	44c1      	add	r9, r8
 8010b6c:	9300      	str	r3, [sp, #0]
 8010b6e:	f3c3 0809 	ubfx	r8, r3, #0, #10
 8010b72:	f5a5 55d8 	sub.w	r5, r5, #6912	; 0x1b00
 8010b76:	9b02      	ldr	r3, [sp, #8]
 8010b78:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8010b7c:	fa1f fa8a 	uxth.w	sl, sl
 8010b80:	19ec      	adds	r4, r5, r7
 8010b82:	eb09 0948 	add.w	r9, r9, r8, lsl #1
 8010b86:	f101 0c01 	add.w	ip, r1, #1
 8010b8a:	1ba4      	subs	r4, r4, r6
 8010b8c:	44d0      	add	r8, sl
 8010b8e:	b16b      	cbz	r3, 8010bac <D24_GENERIC+0xe0>
 8010b90:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8010b94:	17e7      	asrs	r7, r4, #31
 8010b96:	462e      	mov	r6, r5
 8010b98:	fba4 450a 	umull	r4, r5, r4, sl
 8010b9c:	fb0a 5507 	mla	r5, sl, r7, r5
 8010ba0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8010ba4:	f145 0500 	adc.w	r5, r5, #0
 8010ba8:	006f      	lsls	r7, r5, #1
 8010baa:	463d      	mov	r5, r7
 8010bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bb0:	2400      	movs	r4, #0
 8010bb2:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8010bb6:	03ad      	lsls	r5, r5, #14
 8010bb8:	fbcb 3405 	smlal	r3, r4, fp, r5
 8010bbc:	fb01 f10a 	mul.w	r1, r1, sl
 8010bc0:	9b01      	ldr	r3, [sp, #4]
 8010bc2:	10a4      	asrs	r4, r4, #2
 8010bc4:	f304 040f 	ssat	r4, #16, r4
 8010bc8:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
 8010bcc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8010bce:	fa1f f18c 	uxth.w	r1, ip
 8010bd2:	428c      	cmp	r4, r1
 8010bd4:	d919      	bls.n	8010c0a <D24_GENERIC+0x13e>
 8010bd6:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8010bd8:	2d01      	cmp	r5, #1
 8010bda:	d194      	bne.n	8010b06 <D24_GENERIC+0x3a>
 8010bdc:	9b03      	ldr	r3, [sp, #12]
 8010bde:	b15b      	cbz	r3, 8010bf8 <D24_GENERIC+0x12c>
 8010be0:	07cb      	lsls	r3, r1, #31
 8010be2:	d41e      	bmi.n	8010c22 <D24_GENERIC+0x156>
 8010be4:	7805      	ldrb	r5, [r0, #0]
 8010be6:	78c4      	ldrb	r4, [r0, #3]
 8010be8:	f890 c001 	ldrb.w	ip, [r0, #1]
 8010bec:	022d      	lsls	r5, r5, #8
 8010bee:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 8010bf2:	4464      	add	r4, ip
 8010bf4:	3002      	adds	r0, #2
 8010bf6:	e794      	b.n	8010b22 <D24_GENERIC+0x56>
 8010bf8:	7845      	ldrb	r5, [r0, #1]
 8010bfa:	7884      	ldrb	r4, [r0, #2]
 8010bfc:	022d      	lsls	r5, r5, #8
 8010bfe:	f810 ab03 	ldrb.w	sl, [r0], #3
 8010c02:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 8010c06:	4454      	add	r4, sl
 8010c08:	e78b      	b.n	8010b22 <D24_GENERIC+0x56>
 8010c0a:	9b00      	ldr	r3, [sp, #0]
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	f8c2 8008 	str.w	r8, [r2, #8]
 8010c12:	f8c2 900c 	str.w	r9, [r2, #12]
 8010c16:	61d3      	str	r3, [r2, #28]
 8010c18:	6117      	str	r7, [r2, #16]
 8010c1a:	6156      	str	r6, [r2, #20]
 8010c1c:	b005      	add	sp, #20
 8010c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c22:	78c5      	ldrb	r5, [r0, #3]
 8010c24:	7884      	ldrb	r4, [r0, #2]
 8010c26:	022d      	lsls	r5, r5, #8
 8010c28:	f810 cb04 	ldrb.w	ip, [r0], #4
 8010c2c:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 8010c30:	4464      	add	r4, ip
 8010c32:	e776      	b.n	8010b22 <D24_GENERIC+0x56>
 8010c34:	20000000 	.word	0x20000000

08010c38 <D32_GENERIC>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	6913      	ldr	r3, [r2, #16]
 8010c3e:	b087      	sub	sp, #28
 8010c40:	9103      	str	r1, [sp, #12]
 8010c42:	9300      	str	r3, [sp, #0]
 8010c44:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8010c46:	6953      	ldr	r3, [r2, #20]
 8010c48:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8010c4a:	9301      	str	r3, [sp, #4]
 8010c4c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8010c50:	69d3      	ldr	r3, [r2, #28]
 8010c52:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8010c56:	9102      	str	r1, [sp, #8]
 8010c58:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8010c5a:	2d00      	cmp	r5, #0
 8010c5c:	f000 80a3 	beq.w	8010da6 <D32_GENERIC+0x16e>
 8010c60:	f004 0510 	and.w	r5, r4, #16
 8010c64:	f004 0420 	and.w	r4, r4, #32
 8010c68:	2100      	movs	r1, #0
 8010c6a:	f8df e154 	ldr.w	lr, [pc, #340]	; 8010dc0 <D32_GENERIC+0x188>
 8010c6e:	9504      	str	r5, [sp, #16]
 8010c70:	9405      	str	r4, [sp, #20]
 8010c72:	e082      	b.n	8010d7a <D32_GENERIC+0x142>
 8010c74:	f81a c00c 	ldrb.w	ip, [sl, ip]
 8010c78:	5dc7      	ldrb	r7, [r0, r7]
 8010c7a:	5d04      	ldrb	r4, [r0, r4]
 8010c7c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8010c80:	eb0c 6c07 	add.w	ip, ip, r7, lsl #24
 8010c84:	7800      	ldrb	r0, [r0, #0]
 8010c86:	eb0c 2c04 	add.w	ip, ip, r4, lsl #8
 8010c8a:	eb0c 0700 	add.w	r7, ip, r0
 8010c8e:	19a8      	adds	r0, r5, r6
 8010c90:	b2fc      	uxtb	r4, r7
 8010c92:	f3c7 2507 	ubfx	r5, r7, #8, #8
 8010c96:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8010c9a:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8010c9e:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 8010ca2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8010ca6:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 8010caa:	0e3f      	lsrs	r7, r7, #24
 8010cac:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8010cb0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8010cb4:	f3c5 0309 	ubfx	r3, r5, #0, #10
 8010cb8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8010cbc:	eb06 2595 	add.w	r5, r6, r5, lsr #10
 8010cc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8010cc4:	eb07 2395 	add.w	r3, r7, r5, lsr #10
 8010cc8:	ea4f 4a24 	mov.w	sl, r4, asr #16
 8010ccc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8010cd0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8010cd4:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8010cd8:	b227      	sxth	r7, r4
 8010cda:	eb0a 054a 	add.w	r5, sl, sl, lsl #1
 8010cde:	ea4f 4b26 	mov.w	fp, r6, asr #16
 8010ce2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8010ce6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010cea:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8010cee:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8010cf2:	44b9      	add	r9, r7
 8010cf4:	fa0f f886 	sxth.w	r8, r6
 8010cf8:	b2a4      	uxth	r4, r4
 8010cfa:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8010cfe:	44d9      	add	r9, fp
 8010d00:	eb0a 0787 	add.w	r7, sl, r7, lsl #2
 8010d04:	eb06 0b04 	add.w	fp, r6, r4
 8010d08:	9c00      	ldr	r4, [sp, #0]
 8010d0a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8010d0e:	f5a9 4580 	sub.w	r5, r9, #16384	; 0x4000
 8010d12:	9e01      	ldr	r6, [sp, #4]
 8010d14:	192c      	adds	r4, r5, r4
 8010d16:	1ba4      	subs	r4, r4, r6
 8010d18:	9e04      	ldr	r6, [sp, #16]
 8010d1a:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
 8010d1e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8010d22:	f101 0c01 	add.w	ip, r1, #1
 8010d26:	eb07 094a 	add.w	r9, r7, sl, lsl #1
 8010d2a:	eb0b 0848 	add.w	r8, fp, r8, lsl #1
 8010d2e:	b16e      	cbz	r6, 8010d4c <D32_GENERIC+0x114>
 8010d30:	6a16      	ldr	r6, [r2, #32]
 8010d32:	17e7      	asrs	r7, r4, #31
 8010d34:	9501      	str	r5, [sp, #4]
 8010d36:	fba4 4506 	umull	r4, r5, r4, r6
 8010d3a:	fb06 5507 	mla	r5, r6, r7, r5
 8010d3e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8010d42:	f145 0500 	adc.w	r5, r5, #0
 8010d46:	006c      	lsls	r4, r5, #1
 8010d48:	4625      	mov	r5, r4
 8010d4a:	9400      	str	r4, [sp, #0]
 8010d4c:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8010d50:	f04f 0b00 	mov.w	fp, #0
 8010d54:	9f02      	ldr	r7, [sp, #8]
 8010d56:	036d      	lsls	r5, r5, #13
 8010d58:	fbc7 ab05 	smlal	sl, fp, r7, r5
 8010d5c:	465d      	mov	r5, fp
 8010d5e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8010d60:	10ac      	asrs	r4, r5, #2
 8010d62:	fb01 f106 	mul.w	r1, r1, r6
 8010d66:	f304 040f 	ssat	r4, #16, r4
 8010d6a:	9d03      	ldr	r5, [sp, #12]
 8010d6c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
 8010d70:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8010d72:	fa1f f18c 	uxth.w	r1, ip
 8010d76:	428c      	cmp	r4, r1
 8010d78:	d915      	bls.n	8010da6 <D32_GENERIC+0x16e>
 8010d7a:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8010d7c:	b2ec      	uxtb	r4, r5
 8010d7e:	0066      	lsls	r6, r4, #1
 8010d80:	1937      	adds	r7, r6, r4
 8010d82:	eb00 0a07 	add.w	sl, r0, r7
 8010d86:	f1c4 0c00 	rsb	ip, r4, #0
 8010d8a:	2d01      	cmp	r5, #1
 8010d8c:	eb0a 050c 	add.w	r5, sl, ip
 8010d90:	f47f af70 	bne.w	8010c74 <D32_GENERIC+0x3c>
 8010d94:	1d04      	adds	r4, r0, #4
 8010d96:	6807      	ldr	r7, [r0, #0]
 8010d98:	9805      	ldr	r0, [sp, #20]
 8010d9a:	b110      	cbz	r0, 8010da2 <D32_GENERIC+0x16a>
 8010d9c:	ba7f      	rev16	r7, r7
 8010d9e:	4620      	mov	r0, r4
 8010da0:	e776      	b.n	8010c90 <D32_GENERIC+0x58>
 8010da2:	4620      	mov	r0, r4
 8010da4:	e774      	b.n	8010c90 <D32_GENERIC+0x58>
 8010da6:	2000      	movs	r0, #0
 8010da8:	61d3      	str	r3, [r2, #28]
 8010daa:	9b00      	ldr	r3, [sp, #0]
 8010dac:	f8c2 8008 	str.w	r8, [r2, #8]
 8010db0:	6113      	str	r3, [r2, #16]
 8010db2:	9b01      	ldr	r3, [sp, #4]
 8010db4:	f8c2 900c 	str.w	r9, [r2, #12]
 8010db8:	6153      	str	r3, [r2, #20]
 8010dba:	b007      	add	sp, #28
 8010dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc0:	20000000 	.word	0x20000000

08010dc4 <D48_GENERIC>:
 8010dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc8:	6913      	ldr	r3, [r2, #16]
 8010dca:	68d5      	ldr	r5, [r2, #12]
 8010dcc:	b089      	sub	sp, #36	; 0x24
 8010dce:	9302      	str	r3, [sp, #8]
 8010dd0:	9500      	str	r5, [sp, #0]
 8010dd2:	6953      	ldr	r3, [r2, #20]
 8010dd4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8010dd6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8010dd8:	9105      	str	r1, [sp, #20]
 8010dda:	9303      	str	r3, [sp, #12]
 8010ddc:	6891      	ldr	r1, [r2, #8]
 8010dde:	69d3      	ldr	r3, [r2, #28]
 8010de0:	9504      	str	r5, [sp, #16]
 8010de2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8010de4:	2c00      	cmp	r4, #0
 8010de6:	f000 80e5 	beq.w	8010fb4 <D48_GENERIC+0x1f0>
 8010dea:	f006 0710 	and.w	r7, r6, #16
 8010dee:	f006 0620 	and.w	r6, r6, #32
 8010df2:	2500      	movs	r5, #0
 8010df4:	4c75      	ldr	r4, [pc, #468]	; (8010fcc <D48_GENERIC+0x208>)
 8010df6:	9706      	str	r7, [sp, #24]
 8010df8:	9607      	str	r6, [sp, #28]
 8010dfa:	9101      	str	r1, [sp, #4]
 8010dfc:	e0c8      	b.n	8010f90 <D48_GENERIC+0x1cc>
 8010dfe:	fa5f f989 	uxtb.w	r9, r9
 8010e02:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8010e06:	eb08 0c09 	add.w	ip, r8, r9
 8010e0a:	f1c9 0700 	rsb	r7, r9, #0
 8010e0e:	eb00 0e0c 	add.w	lr, r0, ip
 8010e12:	f81e 6007 	ldrb.w	r6, [lr, r7]
 8010e16:	f810 b00c 	ldrb.w	fp, [r0, ip]
 8010e1a:	44be      	add	lr, r7
 8010e1c:	f810 a009 	ldrb.w	sl, [r0, r9]
 8010e20:	0436      	lsls	r6, r6, #16
 8010e22:	eb0e 090c 	add.w	r9, lr, ip
 8010e26:	7800      	ldrb	r0, [r0, #0]
 8010e28:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8010e2c:	eb06 660b 	add.w	r6, r6, fp, lsl #24
 8010e30:	f819 e007 	ldrb.w	lr, [r9, r7]
 8010e34:	eb06 260a 	add.w	r6, r6, sl, lsl #8
 8010e38:	444f      	add	r7, r9
 8010e3a:	4406      	add	r6, r0
 8010e3c:	eb0e 2c0c 	add.w	ip, lr, ip, lsl #8
 8010e40:	eb07 0008 	add.w	r0, r7, r8
 8010e44:	b2f7      	uxtb	r7, r6
 8010e46:	f854 8027 	ldr.w	r8, [r4, r7, lsl #2]
 8010e4a:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8010e4e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8010e52:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8010e56:	eb08 2393 	add.w	r3, r8, r3, lsr #10
 8010e5a:	0e36      	lsrs	r6, r6, #24
 8010e5c:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8010e60:	f854 b026 	ldr.w	fp, [r4, r6, lsl #2]
 8010e64:	eb07 2e93 	add.w	lr, r7, r3, lsr #10
 8010e68:	fa5f f68c 	uxtb.w	r6, ip
 8010e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e70:	f3ce 0709 	ubfx	r7, lr, #0, #10
 8010e74:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8010e78:	eb08 2e9e 	add.w	lr, r8, lr, lsr #10
 8010e7c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8010e80:	eb0b 2b9e 	add.w	fp, fp, lr, lsr #10
 8010e84:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8010e88:	f3cb 0809 	ubfx	r8, fp, #0, #10
 8010e8c:	9900      	ldr	r1, [sp, #0]
 8010e8e:	eb06 2b9b 	add.w	fp, r6, fp, lsr #10
 8010e92:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 8010e96:	143e      	asrs	r6, r7, #16
 8010e98:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8010e9c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8010ea0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8010ea4:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 8010ea8:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8010eac:	fa0f fa87 	sxth.w	sl, r7
 8010eb0:	440e      	add	r6, r1
 8010eb2:	9901      	ldr	r1, [sp, #4]
 8010eb4:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8010eb8:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8010ebc:	ea4f 482e 	mov.w	r8, lr, asr #16
 8010ec0:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8010ec4:	f3c3 0c09 	ubfx	ip, r3, #0, #10
 8010ec8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8010ecc:	4449      	add	r1, r9
 8010ece:	ea4c 4c0b 	orr.w	ip, ip, fp, lsl #16
 8010ed2:	eb0a 098a 	add.w	r9, sl, sl, lsl #2
 8010ed6:	fa0f fe8e 	sxth.w	lr, lr
 8010eda:	ea4f 4b2c 	mov.w	fp, ip, asr #16
 8010ede:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8010ee2:	eb06 064a 	add.w	r6, r6, sl, lsl #1
 8010ee6:	4489      	add	r9, r1
 8010ee8:	b2bf      	uxth	r7, r7
 8010eea:	eb08 01c8 	add.w	r1, r8, r8, lsl #3
 8010eee:	fa0f fc8c 	sxth.w	ip, ip
 8010ef2:	eb0b 0a8b 	add.w	sl, fp, fp, lsl #2
 8010ef6:	eb06 0648 	add.w	r6, r6, r8, lsl #1
 8010efa:	4489      	add	r9, r1
 8010efc:	44b8      	add	r8, r7
 8010efe:	eb0e 07ce 	add.w	r7, lr, lr, lsl #3
 8010f02:	4476      	add	r6, lr
 8010f04:	44b9      	add	r9, r7
 8010f06:	eb08 0e4e 	add.w	lr, r8, lr, lsl #1
 8010f0a:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
 8010f0e:	eb0a 088a 	add.w	r8, sl, sl, lsl #2
 8010f12:	44c1      	add	r9, r8
 8010f14:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8010f18:	eb09 0107 	add.w	r1, r9, r7
 8010f1c:	eb0e 0e4a 	add.w	lr, lr, sl, lsl #1
 8010f20:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8010f24:	9100      	str	r1, [sp, #0]
 8010f26:	eb0e 010c 	add.w	r1, lr, ip
 8010f2a:	9101      	str	r1, [sp, #4]
 8010f2c:	9906      	ldr	r1, [sp, #24]
 8010f2e:	445e      	add	r6, fp
 8010f30:	f5a6 4658 	sub.w	r6, r6, #55296	; 0xd800
 8010f34:	b1a1      	cbz	r1, 8010f60 <D48_GENERIC+0x19c>
 8010f36:	9902      	ldr	r1, [sp, #8]
 8010f38:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8010f3c:	4431      	add	r1, r6
 8010f3e:	460f      	mov	r7, r1
 8010f40:	9903      	ldr	r1, [sp, #12]
 8010f42:	9603      	str	r6, [sp, #12]
 8010f44:	1a7f      	subs	r7, r7, r1
 8010f46:	ea4f 79e7 	mov.w	r9, r7, asr #31
 8010f4a:	fba7 670e 	umull	r6, r7, r7, lr
 8010f4e:	fb0e 7709 	mla	r7, lr, r9, r7
 8010f52:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8010f56:	f147 0700 	adc.w	r7, r7, #0
 8010f5a:	0079      	lsls	r1, r7, #1
 8010f5c:	460e      	mov	r6, r1
 8010f5e:	9102      	str	r1, [sp, #8]
 8010f60:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010f64:	f04f 0800 	mov.w	r8, #0
 8010f68:	9904      	ldr	r1, [sp, #16]
 8010f6a:	02f6      	lsls	r6, r6, #11
 8010f6c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8010f70:	4647      	mov	r7, r8
 8010f72:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8010f76:	9905      	ldr	r1, [sp, #20]
 8010f78:	fb05 fe0e 	mul.w	lr, r5, lr
 8010f7c:	10be      	asrs	r6, r7, #2
 8010f7e:	f306 060f 	ssat	r6, #16, r6
 8010f82:	f821 601e 	strh.w	r6, [r1, lr, lsl #1]
 8010f86:	3501      	adds	r5, #1
 8010f88:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8010f8a:	b2ad      	uxth	r5, r5
 8010f8c:	42ae      	cmp	r6, r5
 8010f8e:	d910      	bls.n	8010fb2 <D48_GENERIC+0x1ee>
 8010f90:	f8b2 902a 	ldrh.w	r9, [r2, #42]	; 0x2a
 8010f94:	f1b9 0f01 	cmp.w	r9, #1
 8010f98:	f47f af31 	bne.w	8010dfe <D48_GENERIC+0x3a>
 8010f9c:	e890 1040 	ldmia.w	r0, {r6, ip}
 8010fa0:	9907      	ldr	r1, [sp, #28]
 8010fa2:	3006      	adds	r0, #6
 8010fa4:	2900      	cmp	r1, #0
 8010fa6:	f43f af4d 	beq.w	8010e44 <D48_GENERIC+0x80>
 8010faa:	ba76      	rev16	r6, r6
 8010fac:	fa9c fc9c 	rev16.w	ip, ip
 8010fb0:	e748      	b.n	8010e44 <D48_GENERIC+0x80>
 8010fb2:	9901      	ldr	r1, [sp, #4]
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	61d3      	str	r3, [r2, #28]
 8010fb8:	9b02      	ldr	r3, [sp, #8]
 8010fba:	6091      	str	r1, [r2, #8]
 8010fbc:	6113      	str	r3, [r2, #16]
 8010fbe:	9900      	ldr	r1, [sp, #0]
 8010fc0:	9b03      	ldr	r3, [sp, #12]
 8010fc2:	60d1      	str	r1, [r2, #12]
 8010fc4:	6153      	str	r3, [r2, #20]
 8010fc6:	b009      	add	sp, #36	; 0x24
 8010fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fcc:	20000000 	.word	0x20000000

08010fd0 <D64_GENERIC>:
 8010fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	b08b      	sub	sp, #44	; 0x2c
 8010fd6:	9108      	str	r1, [sp, #32]
 8010fd8:	4611      	mov	r1, r2
 8010fda:	9201      	str	r2, [sp, #4]
 8010fdc:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8010fde:	6912      	ldr	r2, [r2, #16]
 8010fe0:	9000      	str	r0, [sp, #0]
 8010fe2:	9205      	str	r2, [sp, #20]
 8010fe4:	460a      	mov	r2, r1
 8010fe6:	6949      	ldr	r1, [r1, #20]
 8010fe8:	69d0      	ldr	r0, [r2, #28]
 8010fea:	9106      	str	r1, [sp, #24]
 8010fec:	4611      	mov	r1, r2
 8010fee:	6892      	ldr	r2, [r2, #8]
 8010ff0:	9203      	str	r2, [sp, #12]
 8010ff2:	460a      	mov	r2, r1
 8010ff4:	68c9      	ldr	r1, [r1, #12]
 8010ff6:	4614      	mov	r4, r2
 8010ff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010ffa:	9102      	str	r1, [sp, #8]
 8010ffc:	9207      	str	r2, [sp, #28]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 8115 	beq.w	801122e <D64_GENERIC+0x25e>
 8011004:	2300      	movs	r3, #0
 8011006:	9304      	str	r3, [sp, #16]
 8011008:	6a23      	ldr	r3, [r4, #32]
 801100a:	f8df b240 	ldr.w	fp, [pc, #576]	; 801124c <D64_GENERIC+0x27c>
 801100e:	9309      	str	r3, [sp, #36]	; 0x24
 8011010:	e0f9      	b.n	8011206 <D64_GENERIC+0x236>
 8011012:	9b00      	ldr	r3, [sp, #0]
 8011014:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8011018:	4275      	negs	r5, r6
 801101a:	19dc      	adds	r4, r3, r7
 801101c:	eb04 0e45 	add.w	lr, r4, r5, lsl #1
 8011020:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011024:	f814 8005 	ldrb.w	r8, [r4, r5]
 8011028:	5d4a      	ldrb	r2, [r1, r5]
 801102a:	f81e c017 	ldrb.w	ip, [lr, r7, lsl #1]
 801102e:	f813 e007 	ldrb.w	lr, [r3, r7]
 8011032:	f814 7015 	ldrb.w	r7, [r4, r5, lsl #1]
 8011036:	9c00      	ldr	r4, [sp, #0]
 8011038:	0412      	lsls	r2, r2, #16
 801103a:	ea4f 4308 	mov.w	r3, r8, lsl #16
 801103e:	f811 8015 	ldrb.w	r8, [r1, r5, lsl #1]
 8011042:	4429      	add	r1, r5
 8011044:	f811 9015 	ldrb.w	r9, [r1, r5, lsl #1]
 8011048:	7824      	ldrb	r4, [r4, #0]
 801104a:	eb02 6c0c 	add.w	ip, r2, ip, lsl #24
 801104e:	eb03 630e 	add.w	r3, r3, lr, lsl #24
 8011052:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8011056:	eb0c 2208 	add.w	r2, ip, r8, lsl #8
 801105a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 801105e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8011062:	444a      	add	r2, r9
 8011064:	9100      	str	r1, [sp, #0]
 8011066:	191f      	adds	r7, r3, r4
 8011068:	b2fb      	uxtb	r3, r7
 801106a:	f85b 4023 	ldr.w	r4, [fp, r3, lsl #2]
 801106e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8011072:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8011076:	4420      	add	r0, r4
 8011078:	f3c7 4407 	ubfx	r4, r7, #16, #8
 801107c:	eb03 2190 	add.w	r1, r3, r0, lsr #10
 8011080:	0e3f      	lsrs	r7, r7, #24
 8011082:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8011086:	f85b 5027 	ldr.w	r5, [fp, r7, lsl #2]
 801108a:	b2d6      	uxtb	r6, r2
 801108c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8011090:	f3c1 0409 	ubfx	r4, r1, #0, #10
 8011094:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8011098:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 801109c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80110a0:	f85b 1026 	ldr.w	r1, [fp, r6, lsl #2]
 80110a4:	1427      	asrs	r7, r4, #16
 80110a6:	eb05 2893 	add.w	r8, r5, r3, lsr #10
 80110aa:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 80110ae:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80110b2:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80110b6:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80110ba:	f85b 6025 	ldr.w	r6, [fp, r5, lsl #2]
 80110be:	0e12      	lsrs	r2, r2, #24
 80110c0:	9d03      	ldr	r5, [sp, #12]
 80110c2:	eb00 2a91 	add.w	sl, r0, r1, lsr #10
 80110c6:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 80110ca:	eb09 0207 	add.w	r2, r9, r7
 80110ce:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80110d2:	252a      	movs	r5, #42	; 0x2a
 80110d4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80110d8:	fa0f fe84 	sxth.w	lr, r4
 80110dc:	ebc7 0909 	rsb	r9, r7, r9
 80110e0:	9f02      	ldr	r7, [sp, #8]
 80110e2:	fb05 220e 	mla	r2, r5, lr, r2
 80110e6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80110ea:	eb07 0989 	add.w	r9, r7, r9, lsl #2
 80110ee:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 80110f2:	eb09 070e 	add.w	r7, r9, lr
 80110f6:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
 80110fa:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 80110fe:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8011102:	f3c0 0509 	ubfx	r5, r0, #0, #10
 8011106:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801110a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801110e:	1435      	asrs	r5, r6, #16
 8011110:	fb0c 2c05 	mla	ip, ip, r5, r2
 8011114:	b236      	sxth	r6, r6
 8011116:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801111a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801111e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011122:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8011126:	eb08 0206 	add.w	r2, r8, r6
 801112a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 801112e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011132:	fb0e 220c 	mla	r2, lr, ip, r2
 8011136:	b2a4      	uxth	r4, r4
 8011138:	b21b      	sxth	r3, r3
 801113a:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 801113e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8011142:	44a4      	add	ip, r4
 8011144:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8011148:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801114c:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 8011150:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8011154:	222e      	movs	r2, #46	; 0x2e
 8011156:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801115a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801115e:	ea4a 4101 	orr.w	r1, sl, r1, lsl #16
 8011162:	44be      	add	lr, r7
 8011164:	140f      	asrs	r7, r1, #16
 8011166:	eb0e 0e44 	add.w	lr, lr, r4, lsl #1
 801116a:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 801116e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8011172:	b209      	sxth	r1, r1
 8011174:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8011178:	fb02 3301 	mla	r3, r2, r1, r3
 801117c:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
 8011180:	ebc1 1901 	rsb	r9, r1, r1, lsl #4
 8011184:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8011188:	444c      	add	r4, r9
 801118a:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 801118e:	ebc6 0608 	rsb	r6, r6, r8
 8011192:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 8011196:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
 801119a:	4464      	add	r4, ip
 801119c:	44d6      	add	lr, sl
 801119e:	9302      	str	r3, [sp, #8]
 80111a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80111a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80111a6:	44ae      	add	lr, r5
 80111a8:	0a80      	lsrs	r0, r0, #10
 80111aa:	9303      	str	r3, [sp, #12]
 80111ac:	f5ae 3e00 	sub.w	lr, lr, #131072	; 0x20000
 80111b0:	b18e      	cbz	r6, 80111d6 <D64_GENERIC+0x206>
 80111b2:	9a05      	ldr	r2, [sp, #20]
 80111b4:	9906      	ldr	r1, [sp, #24]
 80111b6:	4472      	add	r2, lr
 80111b8:	1a52      	subs	r2, r2, r1
 80111ba:	17d5      	asrs	r5, r2, #31
 80111bc:	fba2 2306 	umull	r2, r3, r2, r6
 80111c0:	fb06 3305 	mla	r3, r6, r5, r3
 80111c4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80111c8:	f143 0300 	adc.w	r3, r3, #0
 80111cc:	005b      	lsls	r3, r3, #1
 80111ce:	f8cd e018 	str.w	lr, [sp, #24]
 80111d2:	469e      	mov	lr, r3
 80111d4:	9305      	str	r3, [sp, #20]
 80111d6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80111da:	2600      	movs	r6, #0
 80111dc:	9c01      	ldr	r4, [sp, #4]
 80111de:	9b07      	ldr	r3, [sp, #28]
 80111e0:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80111e4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80111e6:	fbc3 560e 	smlal	r5, r6, r3, lr
 80111ea:	9d04      	ldr	r5, [sp, #16]
 80111ec:	9a08      	ldr	r2, [sp, #32]
 80111ee:	fb05 f101 	mul.w	r1, r5, r1
 80111f2:	10b3      	asrs	r3, r6, #2
 80111f4:	f303 030f 	ssat	r3, #16, r3
 80111f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80111fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80111fe:	1c6a      	adds	r2, r5, #1
 8011200:	4293      	cmp	r3, r2
 8011202:	9204      	str	r2, [sp, #16]
 8011204:	dd13      	ble.n	801122e <D64_GENERIC+0x25e>
 8011206:	9b01      	ldr	r3, [sp, #4]
 8011208:	8d5e      	ldrh	r6, [r3, #42]	; 0x2a
 801120a:	2e01      	cmp	r6, #1
 801120c:	f47f af01 	bne.w	8011012 <D64_GENERIC+0x42>
 8011210:	9c00      	ldr	r4, [sp, #0]
 8011212:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011214:	4623      	mov	r3, r4
 8011216:	0689      	lsls	r1, r1, #26
 8011218:	f103 0308 	add.w	r3, r3, #8
 801121c:	6827      	ldr	r7, [r4, #0]
 801121e:	6862      	ldr	r2, [r4, #4]
 8011220:	d503      	bpl.n	801122a <D64_GENERIC+0x25a>
 8011222:	ba7f      	rev16	r7, r7
 8011224:	ba52      	rev16	r2, r2
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	e71e      	b.n	8011068 <D64_GENERIC+0x98>
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	e71c      	b.n	8011068 <D64_GENERIC+0x98>
 801122e:	9a01      	ldr	r2, [sp, #4]
 8011230:	9903      	ldr	r1, [sp, #12]
 8011232:	4613      	mov	r3, r2
 8011234:	61d0      	str	r0, [r2, #28]
 8011236:	2000      	movs	r0, #0
 8011238:	6091      	str	r1, [r2, #8]
 801123a:	9902      	ldr	r1, [sp, #8]
 801123c:	60d1      	str	r1, [r2, #12]
 801123e:	9a05      	ldr	r2, [sp, #20]
 8011240:	611a      	str	r2, [r3, #16]
 8011242:	9a06      	ldr	r2, [sp, #24]
 8011244:	615a      	str	r2, [r3, #20]
 8011246:	b00b      	add	sp, #44	; 0x2c
 8011248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124c:	20000000 	.word	0x20000000

08011250 <D80_GENERIC>:
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011254:	b08d      	sub	sp, #52	; 0x34
 8011256:	910a      	str	r1, [sp, #40]	; 0x28
 8011258:	4611      	mov	r1, r2
 801125a:	9203      	str	r2, [sp, #12]
 801125c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801125e:	6912      	ldr	r2, [r2, #16]
 8011260:	9001      	str	r0, [sp, #4]
 8011262:	9207      	str	r2, [sp, #28]
 8011264:	460a      	mov	r2, r1
 8011266:	4610      	mov	r0, r2
 8011268:	6949      	ldr	r1, [r1, #20]
 801126a:	69d4      	ldr	r4, [r2, #28]
 801126c:	6892      	ldr	r2, [r2, #8]
 801126e:	9108      	str	r1, [sp, #32]
 8011270:	9205      	str	r2, [sp, #20]
 8011272:	68c1      	ldr	r1, [r0, #12]
 8011274:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011276:	9104      	str	r1, [sp, #16]
 8011278:	9209      	str	r2, [sp, #36]	; 0x24
 801127a:	2b00      	cmp	r3, #0
 801127c:	f000 816c 	beq.w	8011558 <D80_GENERIC+0x308>
 8011280:	2300      	movs	r3, #0
 8011282:	9306      	str	r3, [sp, #24]
 8011284:	6a03      	ldr	r3, [r0, #32]
 8011286:	930b      	str	r3, [sp, #44]	; 0x2c
 8011288:	e14e      	b.n	8011528 <D80_GENERIC+0x2d8>
 801128a:	fa5f f888 	uxtb.w	r8, r8
 801128e:	9f01      	ldr	r7, [sp, #4]
 8011290:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8011294:	eb06 0108 	add.w	r1, r6, r8
 8011298:	f1c8 0000 	rsb	r0, r8, #0
 801129c:	187a      	adds	r2, r7, r1
 801129e:	eb08 0588 	add.w	r5, r8, r8, lsl #2
 80112a2:	1813      	adds	r3, r2, r0
 80112a4:	eb03 0905 	add.w	r9, r3, r5
 80112a8:	5c12      	ldrb	r2, [r2, r0]
 80112aa:	f817 c001 	ldrb.w	ip, [r7, r1]
 80112ae:	5d5f      	ldrb	r7, [r3, r5]
 80112b0:	9901      	ldr	r1, [sp, #4]
 80112b2:	f819 3000 	ldrb.w	r3, [r9, r0]
 80112b6:	0412      	lsls	r2, r2, #16
 80112b8:	eb09 0e00 	add.w	lr, r9, r0
 80112bc:	f811 8008 	ldrb.w	r8, [r1, r8]
 80112c0:	041b      	lsls	r3, r3, #16
 80112c2:	eb02 610c 	add.w	r1, r2, ip, lsl #24
 80112c6:	9a01      	ldr	r2, [sp, #4]
 80112c8:	eb03 6307 	add.w	r3, r3, r7, lsl #24
 80112cc:	eb0e 0740 	add.w	r7, lr, r0, lsl #1
 80112d0:	f819 9010 	ldrb.w	r9, [r9, r0, lsl #1]
 80112d4:	f892 c000 	ldrb.w	ip, [r2]
 80112d8:	eb01 2208 	add.w	r2, r1, r8, lsl #8
 80112dc:	1979      	adds	r1, r7, r5
 80112de:	f81e e010 	ldrb.w	lr, [lr, r0, lsl #1]
 80112e2:	f817 8005 	ldrb.w	r8, [r7, r5]
 80112e6:	5c0d      	ldrb	r5, [r1, r0]
 80112e8:	4408      	add	r0, r1
 80112ea:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 80112ee:	1981      	adds	r1, r0, r6
 80112f0:	eb05 2808 	add.w	r8, r5, r8, lsl #8
 80112f4:	4462      	add	r2, ip
 80112f6:	9101      	str	r1, [sp, #4]
 80112f8:	eb03 050e 	add.w	r5, r3, lr
 80112fc:	499e      	ldr	r1, [pc, #632]	; (8011578 <D80_GENERIC+0x328>)
 80112fe:	b2d3      	uxtb	r3, r2
 8011300:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8011304:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011308:	eb04 0b00 	add.w	fp, r4, r0
 801130c:	489a      	ldr	r0, [pc, #616]	; (8011578 <D80_GENERIC+0x328>)
 801130e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011312:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8011316:	0e12      	lsrs	r2, r2, #24
 8011318:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 801131c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011320:	4a95      	ldr	r2, [pc, #596]	; (8011578 <D80_GENERIC+0x328>)
 8011322:	eb03 249b 	add.w	r4, r3, fp, lsr #10
 8011326:	b2eb      	uxtb	r3, r5
 8011328:	f3c4 0909 	ubfx	r9, r4, #0, #10
 801132c:	eb01 2494 	add.w	r4, r1, r4, lsr #10
 8011330:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011334:	eb00 2094 	add.w	r0, r0, r4, lsr #10
 8011338:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801133c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8011340:	f3c0 0209 	ubfx	r2, r0, #0, #10
 8011344:	eb01 2090 	add.w	r0, r1, r0, lsr #10
 8011348:	498b      	ldr	r1, [pc, #556]	; (8011578 <D80_GENERIC+0x328>)
 801134a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801134e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8011352:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8011356:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 801135a:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
 801135e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011362:	4a85      	ldr	r2, [pc, #532]	; (8011578 <D80_GENERIC+0x328>)
 8011364:	ea4f 4c29 	mov.w	ip, r9, asr #16
 8011368:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 801136c:	ea4f 6e15 	mov.w	lr, r5, lsr #24
 8011370:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
 8011374:	f3c7 0b09 	ubfx	fp, r7, #0, #10
 8011378:	1422      	asrs	r2, r4, #16
 801137a:	eb03 2797 	add.w	r7, r3, r7, lsr #10
 801137e:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8011382:	b223      	sxth	r3, r4
 8011384:	9c04      	ldr	r4, [sp, #16]
 8011386:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801138a:	4421      	add	r1, r4
 801138c:	4c7a      	ldr	r4, [pc, #488]	; (8011578 <D80_GENERIC+0x328>)
 801138e:	fa5f fe88 	uxtb.w	lr, r8
 8011392:	f854 402e 	ldr.w	r4, [r4, lr, lsl #2]
 8011396:	9302      	str	r3, [sp, #8]
 8011398:	9404      	str	r4, [sp, #16]
 801139a:	9c02      	ldr	r4, [sp, #8]
 801139c:	ebcc 06cc 	rsb	r6, ip, ip, lsl #3
 80113a0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80113a4:	ebcc 0cc6 	rsb	ip, ip, r6, lsl #3
 80113a8:	ea4b 4000 	orr.w	r0, fp, r0, lsl #16
 80113ac:	fa0f f689 	sxth.w	r6, r9
 80113b0:	fa1f fb89 	uxth.w	fp, r9
 80113b4:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 80113b8:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 80113bc:	4c6e      	ldr	r4, [pc, #440]	; (8011578 <D80_GENERIC+0x328>)
 80113be:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80113c2:	9b05      	ldr	r3, [sp, #20]
 80113c4:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
 80113c8:	eb02 1a02 	add.w	sl, r2, r2, lsl #4
 80113cc:	4463      	add	r3, ip
 80113ce:	eb05 2597 	add.w	r5, r5, r7, lsr #10
 80113d2:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80113d6:	9405      	str	r4, [sp, #20]
 80113d8:	ebc2 08c2 	rsb	r8, r2, r2, lsl #3
 80113dc:	ebc6 1c86 	rsb	ip, r6, r6, lsl #6
 80113e0:	9c02      	ldr	r4, [sp, #8]
 80113e2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 80113e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80113ea:	449c      	add	ip, r3
 80113ec:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80113f0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80113f4:	1401      	asrs	r1, r0, #16
 80113f6:	f3c5 0309 	ubfx	r3, r5, #0, #10
 80113fa:	445a      	add	r2, fp
 80113fc:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 8011400:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011404:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 8011408:	9f04      	ldr	r7, [sp, #16]
 801140a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801140e:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8011412:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 8011416:	9102      	str	r1, [sp, #8]
 8011418:	eb07 2595 	add.w	r5, r7, r5, lsr #10
 801141c:	9204      	str	r2, [sp, #16]
 801141e:	ebc9 07c9 	rsb	r7, r9, r9, lsl #3
 8011422:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8011426:	9905      	ldr	r1, [sp, #20]
 8011428:	9a02      	ldr	r2, [sp, #8]
 801142a:	44d4      	add	ip, sl
 801142c:	b200      	sxth	r0, r0
 801142e:	443e      	add	r6, r7
 8011430:	eb00 0a80 	add.w	sl, r0, r0, lsl #2
 8011434:	ea4f 4823 	mov.w	r8, r3, asr #16
 8011438:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 801143c:	44a4      	add	ip, r4
 801143e:	4416      	add	r6, r2
 8011440:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 8011444:	9a04      	ldr	r2, [sp, #16]
 8011446:	b21b      	sxth	r3, r3
 8011448:	eb08 0b48 	add.w	fp, r8, r8, lsl #1
 801144c:	ebca 190a 	rsb	r9, sl, sl, lsl #4
 8011450:	44a4      	add	ip, r4
 8011452:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8011456:	eb08 04c8 	add.w	r4, r8, r8, lsl #3
 801145a:	f3c1 0709 	ubfx	r7, r1, #0, #10
 801145e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8011462:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8011466:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 801146a:	44cc      	add	ip, r9
 801146c:	eb03 1e03 	add.w	lr, r3, r3, lsl #4
 8011470:	4402      	add	r2, r0
 8011472:	ebcb 00cb 	rsb	r0, fp, fp, lsl #3
 8011476:	ea4f 4925 	mov.w	r9, r5, asr #16
 801147a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 801147e:	b22d      	sxth	r5, r5
 8011480:	eb06 064a 	add.w	r6, r6, sl, lsl #1
 8011484:	44c4      	add	ip, r8
 8011486:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 801148a:	4402      	add	r2, r0
 801148c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011490:	eb06 064b 	add.w	r6, r6, fp, lsl #1
 8011494:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8011498:	44f4      	add	ip, lr
 801149a:	ebc9 1789 	rsb	r7, r9, r9, lsl #6
 801149e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80114a2:	ebc5 0bc5 	rsb	fp, r5, r5, lsl #3
 80114a6:	eb09 08c9 	add.w	r8, r9, r9, lsl #3
 80114aa:	eb0c 0e07 	add.w	lr, ip, r7
 80114ae:	eb02 0388 	add.w	r3, r2, r8, lsl #2
 80114b2:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
 80114b6:	44b2      	add	sl, r6
 80114b8:	ebc5 05cb 	rsb	r5, r5, fp, lsl #3
 80114bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80114be:	eb0a 0609 	add.w	r6, sl, r9
 80114c2:	eb0e 0205 	add.w	r2, lr, r5
 80114c6:	4463      	add	r3, ip
 80114c8:	0a8c      	lsrs	r4, r1, #10
 80114ca:	9204      	str	r2, [sp, #16]
 80114cc:	f5a6 367a 	sub.w	r6, r6, #256000	; 0x3e800
 80114d0:	9305      	str	r3, [sp, #20]
 80114d2:	b187      	cbz	r7, 80114f6 <D80_GENERIC+0x2a6>
 80114d4:	9a07      	ldr	r2, [sp, #28]
 80114d6:	9908      	ldr	r1, [sp, #32]
 80114d8:	4432      	add	r2, r6
 80114da:	1a52      	subs	r2, r2, r1
 80114dc:	17d1      	asrs	r1, r2, #31
 80114de:	fba2 2307 	umull	r2, r3, r2, r7
 80114e2:	fb07 3301 	mla	r3, r7, r1, r3
 80114e6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80114ea:	f143 0300 	adc.w	r3, r3, #0
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	9608      	str	r6, [sp, #32]
 80114f2:	461e      	mov	r6, r3
 80114f4:	9307      	str	r3, [sp, #28]
 80114f6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80114fa:	f04f 0800 	mov.w	r8, #0
 80114fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011500:	0276      	lsls	r6, r6, #9
 8011502:	fbc3 7806 	smlal	r7, r8, r3, r6
 8011506:	4643      	mov	r3, r8
 8011508:	9803      	ldr	r0, [sp, #12]
 801150a:	9d06      	ldr	r5, [sp, #24]
 801150c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 801150e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011510:	fb05 f101 	mul.w	r1, r5, r1
 8011514:	109b      	asrs	r3, r3, #2
 8011516:	f303 030f 	ssat	r3, #16, r3
 801151a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 801151e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8011520:	1c6a      	adds	r2, r5, #1
 8011522:	4293      	cmp	r3, r2
 8011524:	9206      	str	r2, [sp, #24]
 8011526:	dd17      	ble.n	8011558 <D80_GENERIC+0x308>
 8011528:	9b03      	ldr	r3, [sp, #12]
 801152a:	f8b3 802a 	ldrh.w	r8, [r3, #42]	; 0x2a
 801152e:	f1b8 0f01 	cmp.w	r8, #1
 8011532:	f47f aeaa 	bne.w	801128a <D80_GENERIC+0x3a>
 8011536:	9801      	ldr	r0, [sp, #4]
 8011538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801153a:	f100 030a 	add.w	r3, r0, #10
 801153e:	9301      	str	r3, [sp, #4]
 8011540:	068b      	lsls	r3, r1, #26
 8011542:	6802      	ldr	r2, [r0, #0]
 8011544:	6845      	ldr	r5, [r0, #4]
 8011546:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801154a:	f57f aed7 	bpl.w	80112fc <D80_GENERIC+0xac>
 801154e:	ba52      	rev16	r2, r2
 8011550:	ba6d      	rev16	r5, r5
 8011552:	fa98 f898 	rev16.w	r8, r8
 8011556:	e6d1      	b.n	80112fc <D80_GENERIC+0xac>
 8011558:	9a03      	ldr	r2, [sp, #12]
 801155a:	2000      	movs	r0, #0
 801155c:	4613      	mov	r3, r2
 801155e:	9905      	ldr	r1, [sp, #20]
 8011560:	61d4      	str	r4, [r2, #28]
 8011562:	6091      	str	r1, [r2, #8]
 8011564:	9904      	ldr	r1, [sp, #16]
 8011566:	60d1      	str	r1, [r2, #12]
 8011568:	9a07      	ldr	r2, [sp, #28]
 801156a:	611a      	str	r2, [r3, #16]
 801156c:	9a08      	ldr	r2, [sp, #32]
 801156e:	615a      	str	r2, [r3, #20]
 8011570:	b00d      	add	sp, #52	; 0x34
 8011572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011576:	bf00      	nop
 8011578:	20000000 	.word	0x20000000

0801157c <D128_GENERIC>:
 801157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011580:	b08f      	sub	sp, #60	; 0x3c
 8011582:	910c      	str	r1, [sp, #48]	; 0x30
 8011584:	4611      	mov	r1, r2
 8011586:	9207      	str	r2, [sp, #28]
 8011588:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801158a:	6912      	ldr	r2, [r2, #16]
 801158c:	9002      	str	r0, [sp, #8]
 801158e:	9209      	str	r2, [sp, #36]	; 0x24
 8011590:	460a      	mov	r2, r1
 8011592:	6949      	ldr	r1, [r1, #20]
 8011594:	4610      	mov	r0, r2
 8011596:	910a      	str	r1, [sp, #40]	; 0x28
 8011598:	4611      	mov	r1, r2
 801159a:	69d2      	ldr	r2, [r2, #28]
 801159c:	4614      	mov	r4, r2
 801159e:	688a      	ldr	r2, [r1, #8]
 80115a0:	68c9      	ldr	r1, [r1, #12]
 80115a2:	9201      	str	r2, [sp, #4]
 80115a4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80115a6:	9104      	str	r1, [sp, #16]
 80115a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f000 8222 	beq.w	80119f4 <D128_GENERIC+0x478>
 80115b0:	2300      	movs	r3, #0
 80115b2:	9308      	str	r3, [sp, #32]
 80115b4:	6a03      	ldr	r3, [r0, #32]
 80115b6:	46a3      	mov	fp, r4
 80115b8:	930d      	str	r3, [sp, #52]	; 0x34
 80115ba:	e1fd      	b.n	80119b8 <D128_GENERIC+0x43c>
 80115bc:	fa5f fa8a 	uxtb.w	sl, sl
 80115c0:	9f02      	ldr	r7, [sp, #8]
 80115c2:	eb0a 064a 	add.w	r6, sl, sl, lsl #1
 80115c6:	f1ca 0100 	rsb	r1, sl, #0
 80115ca:	19ba      	adds	r2, r7, r6
 80115cc:	ea4f 0e8a 	mov.w	lr, sl, lsl #2
 80115d0:	1855      	adds	r5, r2, r1
 80115d2:	eb0e 030a 	add.w	r3, lr, sl
 80115d6:	eb05 0903 	add.w	r9, r5, r3
 80115da:	eb09 0801 	add.w	r8, r9, r1
 80115de:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
 80115e2:	9303      	str	r3, [sp, #12]
 80115e4:	eb08 0341 	add.w	r3, r8, r1, lsl #1
 80115e8:	181c      	adds	r4, r3, r0
 80115ea:	eb04 0c01 	add.w	ip, r4, r1
 80115ee:	9405      	str	r4, [sp, #20]
 80115f0:	5c52      	ldrb	r2, [r2, r1]
 80115f2:	9c03      	ldr	r4, [sp, #12]
 80115f4:	5dbe      	ldrb	r6, [r7, r6]
 80115f6:	5d2d      	ldrb	r5, [r5, r4]
 80115f8:	0412      	lsls	r2, r2, #16
 80115fa:	eb0c 0441 	add.w	r4, ip, r1, lsl #1
 80115fe:	5c1b      	ldrb	r3, [r3, r0]
 8011600:	eb02 6206 	add.w	r2, r2, r6, lsl #24
 8011604:	1826      	adds	r6, r4, r0
 8011606:	5c24      	ldrb	r4, [r4, r0]
 8011608:	f819 0001 	ldrb.w	r0, [r9, r1]
 801160c:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8011610:	0400      	lsls	r0, r0, #16
 8011612:	9f02      	ldr	r7, [sp, #8]
 8011614:	eb00 6505 	add.w	r5, r0, r5, lsl #24
 8011618:	5c70      	ldrb	r0, [r6, r1]
 801161a:	f8cd a00c 	str.w	sl, [sp, #12]
 801161e:	f819 a011 	ldrb.w	sl, [r9, r1, lsl #1]
 8011622:	f897 9000 	ldrb.w	r9, [r7]
 8011626:	9f05      	ldr	r7, [sp, #20]
 8011628:	0400      	lsls	r0, r0, #16
 801162a:	eb00 6004 	add.w	r0, r0, r4, lsl #24
 801162e:	5c7c      	ldrb	r4, [r7, r1]
 8011630:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8011634:	0424      	lsls	r4, r4, #16
 8011636:	eb04 6303 	add.w	r3, r4, r3, lsl #24
 801163a:	9c03      	ldr	r4, [sp, #12]
 801163c:	eb06 0a01 	add.w	sl, r6, r1
 8011640:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 8011644:	f816 4011 	ldrb.w	r4, [r6, r1, lsl #1]
 8011648:	f818 8011 	ldrb.w	r8, [r8, r1, lsl #1]
 801164c:	f81c c011 	ldrb.w	ip, [ip, r1, lsl #1]
 8011650:	f817 7011 	ldrb.w	r7, [r7, r1, lsl #1]
 8011654:	f81a 6011 	ldrb.w	r6, [sl, r1, lsl #1]
 8011658:	eb0a 0141 	add.w	r1, sl, r1, lsl #1
 801165c:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8011660:	4471      	add	r1, lr
 8011662:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8011666:	9102      	str	r1, [sp, #8]
 8011668:	1981      	adds	r1, r0, r6
 801166a:	444a      	add	r2, r9
 801166c:	eb05 0408 	add.w	r4, r5, r8
 8011670:	9105      	str	r1, [sp, #20]
 8011672:	4463      	add	r3, ip
 8011674:	48cf      	ldr	r0, [pc, #828]	; (80119b4 <D128_GENERIC+0x438>)
 8011676:	b2d1      	uxtb	r1, r2
 8011678:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 801167c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8011680:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8011684:	eb0b 0e05 	add.w	lr, fp, r5
 8011688:	eb01 2a9e 	add.w	sl, r1, lr, lsr #10
 801168c:	f3ca 0509 	ubfx	r5, sl, #0, #10
 8011690:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8011694:	ea45 410e 	orr.w	r1, r5, lr, lsl #16
 8011698:	460e      	mov	r6, r1
 801169a:	48c6      	ldr	r0, [pc, #792]	; (80119b4 <D128_GENERIC+0x438>)
 801169c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80116a0:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 80116a4:	0e12      	lsrs	r2, r2, #24
 80116a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80116aa:	eb07 2a9a 	add.w	sl, r7, sl, lsr #10
 80116ae:	eb02 2b9a 	add.w	fp, r2, sl, lsr #10
 80116b2:	2296      	movs	r2, #150	; 0x96
 80116b4:	ea4f 4e26 	mov.w	lr, r6, asr #16
 80116b8:	9901      	ldr	r1, [sp, #4]
 80116ba:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 80116be:	eb0c 050e 	add.w	r5, ip, lr
 80116c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80116c6:	21a2      	movs	r1, #162	; 0xa2
 80116c8:	9603      	str	r6, [sp, #12]
 80116ca:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80116ce:	f3cb 0709 	ubfx	r7, fp, #0, #10
 80116d2:	fb02 5506 	mla	r5, r2, r6, r5
 80116d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80116da:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80116de:	ea4f 402a 	mov.w	r0, sl, asr #16
 80116e2:	fb01 5500 	mla	r5, r1, r0, r5
 80116e6:	49b3      	ldr	r1, [pc, #716]	; (80119b4 <D128_GENERIC+0x438>)
 80116e8:	b2e2      	uxtb	r2, r4
 80116ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80116ee:	4fb1      	ldr	r7, [pc, #708]	; (80119b4 <D128_GENERIC+0x438>)
 80116f0:	eb02 2b9b 	add.w	fp, r2, fp, lsr #10
 80116f4:	22ac      	movs	r2, #172	; 0xac
 80116f6:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80116fa:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80116fe:	27b4      	movs	r7, #180	; 0xb4
 8011700:	fa0f fa8a 	sxth.w	sl, sl
 8011704:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8011708:	fb02 550a 	mla	r5, r2, sl, r5
 801170c:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8011710:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8011714:	ea42 4b0b 	orr.w	fp, r2, fp, lsl #16
 8011718:	ea4f 482b 	mov.w	r8, fp, asr #16
 801171c:	fb07 5508 	mla	r5, r7, r8, r5
 8011720:	4fa4      	ldr	r7, [pc, #656]	; (80119b4 <D128_GENERIC+0x438>)
 8011722:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8011726:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801172a:	4aa2      	ldr	r2, [pc, #648]	; (80119b4 <D128_GENERIC+0x438>)
 801172c:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8011730:	21ba      	movs	r1, #186	; 0xba
 8011732:	0e24      	lsrs	r4, r4, #24
 8011734:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8011738:	fa0f fb8b 	sxth.w	fp, fp
 801173c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8011740:	fb01 590b 	mla	r9, r1, fp, r5
 8011744:	f3c7 0109 	ubfx	r1, r7, #0, #10
 8011748:	4d9a      	ldr	r5, [pc, #616]	; (80119b4 <D128_GENERIC+0x438>)
 801174a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 801174e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8011752:	b2dc      	uxtb	r4, r3
 8011754:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011758:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801175c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8011760:	25be      	movs	r5, #190	; 0xbe
 8011762:	eb04 2292 	add.w	r2, r4, r2, lsr #10
 8011766:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 801176a:	143c      	asrs	r4, r7, #16
 801176c:	b23f      	sxth	r7, r7
 801176e:	fb05 9904 	mla	r9, r5, r4, r9
 8011772:	9701      	str	r7, [sp, #4]
 8011774:	4d8f      	ldr	r5, [pc, #572]	; (80119b4 <D128_GENERIC+0x438>)
 8011776:	f3c1 0709 	ubfx	r7, r1, #0, #10
 801177a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801177e:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 8011782:	f3c3 4707 	ubfx	r7, r3, #16, #8
 8011786:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801178a:	0e1b      	lsrs	r3, r3, #24
 801178c:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8011790:	9f01      	ldr	r7, [sp, #4]
 8011792:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8011796:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801179a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 801179e:	ea4f 4922 	mov.w	r9, r2, asr #16
 80117a2:	ebce 0e0c 	rsb	lr, lr, ip
 80117a6:	eb09 0c49 	add.w	ip, r9, r9, lsl #1
 80117aa:	eb05 1c8c 	add.w	ip, r5, ip, lsl #6
 80117ae:	25be      	movs	r5, #190	; 0xbe
 80117b0:	b212      	sxth	r2, r2
 80117b2:	fb05 cc02 	mla	ip, r5, r2, ip
 80117b6:	9d04      	ldr	r5, [sp, #16]
 80117b8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80117bc:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 80117c0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80117c4:	eb0e 0706 	add.w	r7, lr, r6
 80117c8:	26ba      	movs	r6, #186	; 0xba
 80117ca:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 80117ce:	f3c3 0509 	ubfx	r5, r3, #0, #10
 80117d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80117d6:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 80117da:	140d      	asrs	r5, r1, #16
 80117dc:	fb06 cc05 	mla	ip, r6, r5, ip
 80117e0:	265b      	movs	r6, #91	; 0x5b
 80117e2:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 80117e6:	9503      	str	r5, [sp, #12]
 80117e8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80117ec:	4475      	add	r5, lr
 80117ee:	eb0a 0e4a 	add.w	lr, sl, sl, lsl #1
 80117f2:	eb05 054e 	add.w	r5, r5, lr, lsl #1
 80117f6:	eb08 0e88 	add.w	lr, r8, r8, lsl #2
 80117fa:	eb05 054e 	add.w	r5, r5, lr, lsl #1
 80117fe:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 8011802:	fb06 7700 	mla	r7, r6, r0, r7
 8011806:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801180a:	4e6a      	ldr	r6, [pc, #424]	; (80119b4 <D128_GENERIC+0x438>)
 801180c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011810:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8011814:	9e05      	ldr	r6, [sp, #20]
 8011816:	9406      	str	r4, [sp, #24]
 8011818:	4c66      	ldr	r4, [pc, #408]	; (80119b4 <D128_GENERIC+0x438>)
 801181a:	eb00 2393 	add.w	r3, r0, r3, lsr #10
 801181e:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8011822:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011826:	24b4      	movs	r4, #180	; 0xb4
 8011828:	fb0e 770a 	mla	r7, lr, sl, r7
 801182c:	eb08 1848 	add.w	r8, r8, r8, lsl #5
 8011830:	eb07 0e48 	add.w	lr, r7, r8, lsl #1
 8011834:	f04f 08ac 	mov.w	r8, #172	; 0xac
 8011838:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 801183c:	b209      	sxth	r1, r1
 801183e:	9005      	str	r0, [sp, #20]
 8011840:	ebcb 100b 	rsb	r0, fp, fp, lsl #4
 8011844:	fb04 c401 	mla	r4, r4, r1, ip
 8011848:	4405      	add	r5, r0
 801184a:	9104      	str	r1, [sp, #16]
 801184c:	9806      	ldr	r0, [sp, #24]
 801184e:	9901      	ldr	r1, [sp, #4]
 8011850:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8011854:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8011858:	4428      	add	r0, r5
 801185a:	ea4f 0cc9 	mov.w	ip, r9, lsl #3
 801185e:	ebc1 050a 	rsb	r5, r1, sl
 8011862:	eb0c 0709 	add.w	r7, ip, r9
 8011866:	9903      	ldr	r1, [sp, #12]
 8011868:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801186c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011870:	9805      	ldr	r0, [sp, #20]
 8011872:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8011876:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 801187a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801187e:	443d      	add	r5, r7
 8011880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011884:	ebc1 07c1 	rsb	r7, r1, r1, lsl #3
 8011888:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 801188c:	ebc1 07c7 	rsb	r7, r1, r7, lsl #3
 8011890:	ebcb 00cb 	rsb	r0, fp, fp, lsl #3
 8011894:	ebcb 00c0 	rsb	r0, fp, r0, lsl #3
 8011898:	443d      	add	r5, r7
 801189a:	141f      	asrs	r7, r3, #16
 801189c:	fb08 4807 	mla	r8, r8, r7, r4
 80118a0:	4470      	add	r0, lr
 80118a2:	4c44      	ldr	r4, [pc, #272]	; (80119b4 <D128_GENERIC+0x438>)
 80118a4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80118a8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80118ac:	4e41      	ldr	r6, [pc, #260]	; (80119b4 <D128_GENERIC+0x438>)
 80118ae:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 80118b2:	9c06      	ldr	r4, [sp, #24]
 80118b4:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 80118b8:	264e      	movs	r6, #78	; 0x4e
 80118ba:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 80118be:	4404      	add	r4, r0
 80118c0:	9801      	ldr	r0, [sp, #4]
 80118c2:	9904      	ldr	r1, [sp, #16]
 80118c4:	4482      	add	sl, r0
 80118c6:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80118ca:	ebc9 0c0c 	rsb	ip, r9, ip
 80118ce:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80118d2:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80118d6:	eb01 1041 	add.w	r0, r1, r1, lsl #5
 80118da:	4414      	add	r4, r2
 80118dc:	9903      	ldr	r1, [sp, #12]
 80118de:	9a04      	ldr	r2, [sp, #16]
 80118e0:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 80118e4:	fb06 5507 	mla	r5, r6, r7, r5
 80118e8:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 80118ec:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80118f0:	225b      	movs	r2, #91	; 0x5b
 80118f2:	9805      	ldr	r0, [sp, #20]
 80118f4:	b21b      	sxth	r3, r3
 80118f6:	eb0e 2e90 	add.w	lr, lr, r0, lsr #10
 80118fa:	20a2      	movs	r0, #162	; 0xa2
 80118fc:	fb02 5503 	mla	r5, r2, r3, r5
 8011900:	2296      	movs	r2, #150	; 0x96
 8011902:	fb00 8803 	mla	r8, r0, r3, r8
 8011906:	eb0b 2b9e 	add.w	fp, fp, lr, lsr #10
 801190a:	f3cb 0009 	ubfx	r0, fp, #0, #10
 801190e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8011912:	ea40 4e0e 	orr.w	lr, r0, lr, lsl #16
 8011916:	ea4f 492e 	mov.w	r9, lr, asr #16
 801191a:	4426      	add	r6, r4
 801191c:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8011920:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8011924:	fb02 8809 	mla	r8, r2, r9, r8
 8011928:	eb06 0147 	add.w	r1, r6, r7, lsl #1
 801192c:	fa0f f08e 	sxth.w	r0, lr
 8011930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011934:	18cc      	adds	r4, r1, r3
 8011936:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 801193a:	0103      	lsls	r3, r0, #4
 801193c:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8011940:	181f      	adds	r7, r3, r0
 8011942:	ebc0 0e03 	rsb	lr, r0, r3
 8011946:	4455      	add	r5, sl
 8011948:	eb08 03c7 	add.w	r3, r8, r7, lsl #3
 801194c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801194e:	444c      	add	r4, r9
 8011950:	9304      	str	r3, [sp, #16]
 8011952:	eb05 03ce 	add.w	r3, r5, lr, lsl #3
 8011956:	ea4f 2b9b 	mov.w	fp, fp, lsr #10
 801195a:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 801195e:	9301      	str	r3, [sp, #4]
 8011960:	b186      	cbz	r6, 8011984 <D128_GENERIC+0x408>
 8011962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011964:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011966:	4422      	add	r2, r4
 8011968:	1a52      	subs	r2, r2, r1
 801196a:	17d1      	asrs	r1, r2, #31
 801196c:	fba2 2306 	umull	r2, r3, r2, r6
 8011970:	fb06 3301 	mla	r3, r6, r1, r3
 8011974:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8011978:	f143 0300 	adc.w	r3, r3, #0
 801197c:	005b      	lsls	r3, r3, #1
 801197e:	940a      	str	r4, [sp, #40]	; 0x28
 8011980:	461c      	mov	r4, r3
 8011982:	9309      	str	r3, [sp, #36]	; 0x24
 8011984:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8011988:	2600      	movs	r6, #0
 801198a:	9807      	ldr	r0, [sp, #28]
 801198c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801198e:	01e4      	lsls	r4, r4, #7
 8011990:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8011992:	fbc3 5604 	smlal	r5, r6, r3, r4
 8011996:	9c08      	ldr	r4, [sp, #32]
 8011998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801199a:	fb04 f101 	mul.w	r1, r4, r1
 801199e:	10b3      	asrs	r3, r6, #2
 80119a0:	f303 030f 	ssat	r3, #16, r3
 80119a4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80119a8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80119aa:	1c62      	adds	r2, r4, #1
 80119ac:	4293      	cmp	r3, r2
 80119ae:	9208      	str	r2, [sp, #32]
 80119b0:	dd1f      	ble.n	80119f2 <D128_GENERIC+0x476>
 80119b2:	e001      	b.n	80119b8 <D128_GENERIC+0x43c>
 80119b4:	20000000 	.word	0x20000000
 80119b8:	9b07      	ldr	r3, [sp, #28]
 80119ba:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 80119be:	f1ba 0f01 	cmp.w	sl, #1
 80119c2:	f47f adfb 	bne.w	80115bc <D128_GENERIC+0x40>
 80119c6:	9802      	ldr	r0, [sp, #8]
 80119c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80119ca:	4605      	mov	r5, r0
 80119cc:	4603      	mov	r3, r0
 80119ce:	68ed      	ldr	r5, [r5, #12]
 80119d0:	0689      	lsls	r1, r1, #26
 80119d2:	6802      	ldr	r2, [r0, #0]
 80119d4:	6844      	ldr	r4, [r0, #4]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	f100 0010 	add.w	r0, r0, #16
 80119dc:	9505      	str	r5, [sp, #20]
 80119de:	d506      	bpl.n	80119ee <D128_GENERIC+0x472>
 80119e0:	ba52      	rev16	r2, r2
 80119e2:	ba64      	rev16	r4, r4
 80119e4:	ba5b      	rev16	r3, r3
 80119e6:	ba69      	rev16	r1, r5
 80119e8:	9105      	str	r1, [sp, #20]
 80119ea:	9002      	str	r0, [sp, #8]
 80119ec:	e642      	b.n	8011674 <D128_GENERIC+0xf8>
 80119ee:	9002      	str	r0, [sp, #8]
 80119f0:	e640      	b.n	8011674 <D128_GENERIC+0xf8>
 80119f2:	465c      	mov	r4, fp
 80119f4:	9a07      	ldr	r2, [sp, #28]
 80119f6:	9901      	ldr	r1, [sp, #4]
 80119f8:	2000      	movs	r0, #0
 80119fa:	6091      	str	r1, [r2, #8]
 80119fc:	9904      	ldr	r1, [sp, #16]
 80119fe:	60d1      	str	r1, [r2, #12]
 8011a00:	4611      	mov	r1, r2
 8011a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a04:	61cc      	str	r4, [r1, #28]
 8011a06:	610a      	str	r2, [r1, #16]
 8011a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a0a:	614a      	str	r2, [r1, #20]
 8011a0c:	b00f      	add	sp, #60	; 0x3c
 8011a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a12:	bf00      	nop

08011a14 <D16_1CH_HTONS_VOL_HP>:
 8011a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a18:	4692      	mov	sl, r2
 8011a1a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8011a1c:	6914      	ldr	r4, [r2, #16]
 8011a1e:	6957      	ldr	r7, [r2, #20]
 8011a20:	b083      	sub	sp, #12
 8011a22:	69d2      	ldr	r2, [r2, #28]
 8011a24:	f8da 5008 	ldr.w	r5, [sl, #8]
 8011a28:	f8da 9030 	ldr.w	r9, [sl, #48]	; 0x30
 8011a2c:	f8da e020 	ldr.w	lr, [sl, #32]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d054      	beq.n	8011ade <D16_1CH_HTONS_VOL_HP+0xca>
 8011a34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011a38:	f8cd a004 	str.w	sl, [sp, #4]
 8011a3c:	469a      	mov	sl, r3
 8011a3e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8011ae4 <D16_1CH_HTONS_VOL_HP+0xd0>
 8011a42:	f1a1 0802 	sub.w	r8, r1, #2
 8011a46:	f850 1b02 	ldr.w	r1, [r0], #2
 8011a4a:	ba49      	rev16	r1, r1
 8011a4c:	b2cb      	uxtb	r3, r1
 8011a4e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8011a52:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011a56:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8011a60:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8011a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011a6c:	1419      	asrs	r1, r3, #16
 8011a6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011a72:	440d      	add	r5, r1
 8011a74:	b219      	sxth	r1, r3
 8011a76:	440d      	add	r5, r1
 8011a78:	f5a5 6100 	sub.w	r1, r5, #2048	; 0x800
 8011a7c:	440c      	add	r4, r1
 8011a7e:	1be4      	subs	r4, r4, r7
 8011a80:	17e7      	asrs	r7, r4, #31
 8011a82:	fba4 450e 	umull	r4, r5, r4, lr
 8011a86:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011a8a:	fb0e 5507 	mla	r5, lr, r7, r5
 8011a8e:	2700      	movs	r7, #0
 8011a90:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8011a94:	f145 0500 	adc.w	r5, r5, #0
 8011a98:	046c      	lsls	r4, r5, #17
 8011a9a:	fbc4 6709 	smlal	r6, r7, r4, r9
 8011a9e:	b29e      	uxth	r6, r3
 8011aa0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011aa4:	4550      	cmp	r0, sl
 8011aa6:	ea4f 0ba7 	mov.w	fp, r7, asr #2
 8011aaa:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8011aae:	f30b 0b0f 	ssat	fp, #16, fp
 8011ab2:	ea4f 2292 	mov.w	r2, r2, lsr #10
 8011ab6:	460f      	mov	r7, r1
 8011ab8:	eb06 4513 	add.w	r5, r6, r3, lsr #16
 8011abc:	f828 bf02 	strh.w	fp, [r8, #2]!
 8011ac0:	d1c1      	bne.n	8011a46 <D16_1CH_HTONS_VOL_HP+0x32>
 8011ac2:	f8dd a004 	ldr.w	sl, [sp, #4]
 8011ac6:	2000      	movs	r0, #0
 8011ac8:	f8ca 5008 	str.w	r5, [sl, #8]
 8011acc:	f8ca 201c 	str.w	r2, [sl, #28]
 8011ad0:	f8ca 4010 	str.w	r4, [sl, #16]
 8011ad4:	f8ca 1014 	str.w	r1, [sl, #20]
 8011ad8:	b003      	add	sp, #12
 8011ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ade:	4639      	mov	r1, r7
 8011ae0:	e7f1      	b.n	8011ac6 <D16_1CH_HTONS_VOL_HP+0xb2>
 8011ae2:	bf00      	nop
 8011ae4:	20000000 	.word	0x20000000

08011ae8 <D24_1CH_HTONS_VOL_HP>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8011aee:	b089      	sub	sp, #36	; 0x24
 8011af0:	9304      	str	r3, [sp, #16]
 8011af2:	4613      	mov	r3, r2
 8011af4:	4617      	mov	r7, r2
 8011af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011af8:	6a3f      	ldr	r7, [r7, #32]
 8011afa:	9305      	str	r3, [sp, #20]
 8011afc:	9b04      	ldr	r3, [sp, #16]
 8011afe:	9207      	str	r2, [sp, #28]
 8011b00:	6915      	ldr	r5, [r2, #16]
 8011b02:	6956      	ldr	r6, [r2, #20]
 8011b04:	69d4      	ldr	r4, [r2, #28]
 8011b06:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8011b0a:	9706      	str	r7, [sp, #24]
 8011b0c:	68d2      	ldr	r2, [r2, #12]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f000 8084 	beq.w	8011c1c <D24_1CH_HTONS_VOL_HP+0x134>
 8011b14:	f04f 0e00 	mov.w	lr, #0
 8011b18:	1e8b      	subs	r3, r1, #2
 8011b1a:	9301      	str	r3, [sp, #4]
 8011b1c:	f8df a100 	ldr.w	sl, [pc, #256]	; 8011c20 <D24_1CH_HTONS_VOL_HP+0x138>
 8011b20:	4633      	mov	r3, r6
 8011b22:	465e      	mov	r6, fp
 8011b24:	46f3      	mov	fp, lr
 8011b26:	e05f      	b.n	8011be8 <D24_1CH_HTONS_VOL_HP+0x100>
 8011b28:	7801      	ldrb	r1, [r0, #0]
 8011b2a:	f890 8003 	ldrb.w	r8, [r0, #3]
 8011b2e:	7847      	ldrb	r7, [r0, #1]
 8011b30:	0209      	lsls	r1, r1, #8
 8011b32:	eb01 4808 	add.w	r8, r1, r8, lsl #16
 8011b36:	44b8      	add	r8, r7
 8011b38:	3002      	adds	r0, #2
 8011b3a:	fa5f f188 	uxtb.w	r1, r8
 8011b3e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011b42:	f3c8 2707 	ubfx	r7, r8, #8, #8
 8011b46:	f85a 7027 	ldr.w	r7, [sl, r7, lsl #2]
 8011b4a:	eb01 2494 	add.w	r4, r1, r4, lsr #10
 8011b4e:	eb07 2994 	add.w	r9, r7, r4, lsr #10
 8011b52:	f3c9 0109 	ubfx	r1, r9, #0, #10
 8011b56:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8011b5a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011b5e:	ea4f 4e21 	mov.w	lr, r1, asr #16
 8011b62:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8011b66:	eb0e 0c02 	add.w	ip, lr, r2
 8011b6a:	b20f      	sxth	r7, r1
 8011b6c:	44bc      	add	ip, r7
 8011b6e:	f5ac 5cd8 	sub.w	ip, ip, #6912	; 0x1b00
 8011b72:	eb0c 0205 	add.w	r2, ip, r5
 8011b76:	1ad2      	subs	r2, r2, r3
 8011b78:	4613      	mov	r3, r2
 8011b7a:	17d4      	asrs	r4, r2, #31
 8011b7c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011b80:	9c06      	ldr	r4, [sp, #24]
 8011b82:	9d03      	ldr	r5, [sp, #12]
 8011b84:	fba2 2304 	umull	r2, r3, r2, r4
 8011b88:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8011b8c:	fb04 3305 	mla	r3, r4, r5, r3
 8011b90:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
 8011b94:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8011b98:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8011b9c:	f04f 0900 	mov.w	r9, #0
 8011ba0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8011ba4:	f143 0300 	adc.w	r3, r3, #0
 8011ba8:	eb06 0e4e 	add.w	lr, r6, lr, lsl #1
 8011bac:	9e05      	ldr	r6, [sp, #20]
 8011bae:	03dd      	lsls	r5, r3, #15
 8011bb0:	fbc6 8905 	smlal	r8, r9, r6, r5
 8011bb4:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 8011bb8:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8011bbc:	b289      	uxth	r1, r1
 8011bbe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011bc2:	4472      	add	r2, lr
 8011bc4:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8011bc8:	440e      	add	r6, r1
 8011bca:	9901      	ldr	r1, [sp, #4]
 8011bcc:	005d      	lsls	r5, r3, #1
 8011bce:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8011bd2:	f303 030f 	ssat	r3, #16, r3
 8011bd6:	f821 3f02 	strh.w	r3, [r1, #2]!
 8011bda:	9b04      	ldr	r3, [sp, #16]
 8011bdc:	f10b 0b01 	add.w	fp, fp, #1
 8011be0:	459b      	cmp	fp, r3
 8011be2:	9101      	str	r1, [sp, #4]
 8011be4:	d00d      	beq.n	8011c02 <D24_1CH_HTONS_VOL_HP+0x11a>
 8011be6:	4663      	mov	r3, ip
 8011be8:	f01b 0f01 	tst.w	fp, #1
 8011bec:	d09c      	beq.n	8011b28 <D24_1CH_HTONS_VOL_HP+0x40>
 8011bee:	78c1      	ldrb	r1, [r0, #3]
 8011bf0:	f890 8002 	ldrb.w	r8, [r0, #2]
 8011bf4:	0209      	lsls	r1, r1, #8
 8011bf6:	f810 7b04 	ldrb.w	r7, [r0], #4
 8011bfa:	eb01 4808 	add.w	r8, r1, r8, lsl #16
 8011bfe:	44b8      	add	r8, r7
 8011c00:	e79b      	b.n	8011b3a <D24_1CH_HTONS_VOL_HP+0x52>
 8011c02:	46b3      	mov	fp, r6
 8011c04:	2000      	movs	r0, #0
 8011c06:	9907      	ldr	r1, [sp, #28]
 8011c08:	f8c1 b008 	str.w	fp, [r1, #8]
 8011c0c:	60ca      	str	r2, [r1, #12]
 8011c0e:	61cc      	str	r4, [r1, #28]
 8011c10:	610d      	str	r5, [r1, #16]
 8011c12:	f8c1 c014 	str.w	ip, [r1, #20]
 8011c16:	b009      	add	sp, #36	; 0x24
 8011c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c1c:	46b4      	mov	ip, r6
 8011c1e:	e7f1      	b.n	8011c04 <D24_1CH_HTONS_VOL_HP+0x11c>
 8011c20:	20000000 	.word	0x20000000

08011c24 <D32_1CH_HTONS_VOL_HP>:
 8011c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c28:	b089      	sub	sp, #36	; 0x24
 8011c2a:	9001      	str	r0, [sp, #4]
 8011c2c:	4610      	mov	r0, r2
 8011c2e:	9207      	str	r2, [sp, #28]
 8011c30:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8011c32:	6915      	ldr	r5, [r2, #16]
 8011c34:	6957      	ldr	r7, [r2, #20]
 8011c36:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8011c3a:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8011c3e:	68d6      	ldr	r6, [r2, #12]
 8011c40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011c42:	9204      	str	r2, [sp, #16]
 8011c44:	6a02      	ldr	r2, [r0, #32]
 8011c46:	9205      	str	r2, [sp, #20]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f000 8088 	beq.w	8011d5e <D32_1CH_HTONS_VOL_HP+0x13a>
 8011c4e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011c52:	9306      	str	r3, [sp, #24]
 8011c54:	46c1      	mov	r9, r8
 8011c56:	462b      	mov	r3, r5
 8011c58:	460d      	mov	r5, r1
 8011c5a:	f8df e108 	ldr.w	lr, [pc, #264]	; 8011d64 <D32_1CH_HTONS_VOL_HP+0x140>
 8011c5e:	9a01      	ldr	r2, [sp, #4]
 8011c60:	f852 0b04 	ldr.w	r0, [r2], #4
 8011c64:	9201      	str	r2, [sp, #4]
 8011c66:	ba40      	rev16	r0, r0
 8011c68:	b2c2      	uxtb	r2, r0
 8011c6a:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
 8011c6e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8011c72:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8011c76:	eb04 2999 	add.w	r9, r4, r9, lsr #10
 8011c7a:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8011c7e:	eb02 2299 	add.w	r2, r2, r9, lsr #10
 8011c82:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
 8011c86:	0e00      	lsrs	r0, r0, #24
 8011c88:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8011c8c:	f3c2 0409 	ubfx	r4, r2, #0, #10
 8011c90:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8011c94:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8011c98:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8011c9c:	ea4f 4a24 	mov.w	sl, r4, asr #16
 8011ca0:	eb00 2991 	add.w	r9, r0, r1, lsr #10
 8011ca4:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
 8011ca8:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8011cac:	fa0f f884 	sxth.w	r8, r4
 8011cb0:	f3c9 0109 	ubfx	r1, r9, #0, #10
 8011cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011cb8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8011cbc:	eb06 064c 	add.w	r6, r6, ip, lsl #1
 8011cc0:	4446      	add	r6, r8
 8011cc2:	1408      	asrs	r0, r1, #16
 8011cc4:	eb06 0c00 	add.w	ip, r6, r0
 8011cc8:	f5ac 4c80 	sub.w	ip, ip, #16384	; 0x4000
 8011ccc:	eb0c 0203 	add.w	r2, ip, r3
 8011cd0:	1bd2      	subs	r2, r2, r7
 8011cd2:	4616      	mov	r6, r2
 8011cd4:	17d7      	asrs	r7, r2, #31
 8011cd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011cda:	9e05      	ldr	r6, [sp, #20]
 8011cdc:	9f03      	ldr	r7, [sp, #12]
 8011cde:	fba2 2306 	umull	r2, r3, r2, r6
 8011ce2:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8011ce6:	fb06 3307 	mla	r3, r6, r7, r3
 8011cea:	eb0b 064a 	add.w	r6, fp, sl, lsl #1
 8011cee:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8011cf2:	f04f 0b00 	mov.w	fp, #0
 8011cf6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8011cfa:	f143 0300 	adc.w	r3, r3, #0
 8011cfe:	9f04      	ldr	r7, [sp, #16]
 8011d00:	039a      	lsls	r2, r3, #14
 8011d02:	fbc2 ab07 	smlal	sl, fp, r2, r7
 8011d06:	ea4f 02ab 	mov.w	r2, fp, asr #2
 8011d0a:	f302 020f 	ssat	r2, #16, r2
 8011d0e:	f825 2b02 	strh.w	r2, [r5], #2
 8011d12:	9a06      	ldr	r2, [sp, #24]
 8011d14:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8011d18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011d1c:	b209      	sxth	r1, r1
 8011d1e:	b2a4      	uxth	r4, r4
 8011d20:	eb01 0881 	add.w	r8, r1, r1, lsl #2
 8011d24:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8011d28:	4404      	add	r4, r0
 8011d2a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011d2e:	4295      	cmp	r5, r2
 8011d30:	eb06 0648 	add.w	r6, r6, r8, lsl #1
 8011d34:	eb04 0b41 	add.w	fp, r4, r1, lsl #1
 8011d38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011d3c:	4667      	mov	r7, ip
 8011d3e:	d18e      	bne.n	8011c5e <D32_1CH_HTONS_VOL_HP+0x3a>
 8011d40:	46c8      	mov	r8, r9
 8011d42:	461d      	mov	r5, r3
 8011d44:	2000      	movs	r0, #0
 8011d46:	9a07      	ldr	r2, [sp, #28]
 8011d48:	f8c2 b008 	str.w	fp, [r2, #8]
 8011d4c:	60d6      	str	r6, [r2, #12]
 8011d4e:	f8c2 801c 	str.w	r8, [r2, #28]
 8011d52:	6115      	str	r5, [r2, #16]
 8011d54:	f8c2 c014 	str.w	ip, [r2, #20]
 8011d58:	b009      	add	sp, #36	; 0x24
 8011d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d5e:	46bc      	mov	ip, r7
 8011d60:	e7f0      	b.n	8011d44 <D32_1CH_HTONS_VOL_HP+0x120>
 8011d62:	bf00      	nop
 8011d64:	20000000 	.word	0x20000000

08011d68 <D48_1CH_HTONS_VOL_HP>:
 8011d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6c:	b089      	sub	sp, #36	; 0x24
 8011d6e:	9001      	str	r0, [sp, #4]
 8011d70:	4610      	mov	r0, r2
 8011d72:	9207      	str	r2, [sp, #28]
 8011d74:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8011d76:	6915      	ldr	r5, [r2, #16]
 8011d78:	6956      	ldr	r6, [r2, #20]
 8011d7a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8011d7e:	6892      	ldr	r2, [r2, #8]
 8011d80:	68c4      	ldr	r4, [r0, #12]
 8011d82:	9200      	str	r2, [sp, #0]
 8011d84:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011d86:	9204      	str	r2, [sp, #16]
 8011d88:	6a02      	ldr	r2, [r0, #32]
 8011d8a:	9205      	str	r2, [sp, #20]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	f000 80b2 	beq.w	8011ef6 <D48_1CH_HTONS_VOL_HP+0x18e>
 8011d92:	46b0      	mov	r8, r6
 8011d94:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011d98:	f8df a160 	ldr.w	sl, [pc, #352]	; 8011efc <D48_1CH_HTONS_VOL_HP+0x194>
 8011d9c:	9102      	str	r1, [sp, #8]
 8011d9e:	9306      	str	r3, [sp, #24]
 8011da0:	9a01      	ldr	r2, [sp, #4]
 8011da2:	1d93      	adds	r3, r2, #6
 8011da4:	6811      	ldr	r1, [r2, #0]
 8011da6:	6850      	ldr	r0, [r2, #4]
 8011da8:	9301      	str	r3, [sp, #4]
 8011daa:	ba49      	rev16	r1, r1
 8011dac:	ba40      	rev16	r0, r0
 8011dae:	b2cb      	uxtb	r3, r1
 8011db0:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 8011db4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011db8:	f3c1 4607 	ubfx	r6, r1, #16, #8
 8011dbc:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8011dc0:	eb02 2b9b 	add.w	fp, r2, fp, lsr #10
 8011dc4:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 8011dc8:	0e09      	lsrs	r1, r1, #24
 8011dca:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8011dce:	f85a 6021 	ldr.w	r6, [sl, r1, lsl #2]
 8011dd2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8011dd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8011dda:	b2c1      	uxtb	r1, r0
 8011ddc:	eb07 2393 	add.w	r3, r7, r3, lsr #10
 8011de0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8011de4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8011de8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011dec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8011df0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011df4:	f3c3 0709 	ubfx	r7, r3, #0, #10
 8011df8:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 8011dfc:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8011e00:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8011e04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011e08:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 8011e0c:	b216      	sxth	r6, r2
 8011e0e:	eb00 2b91 	add.w	fp, r0, r1, lsr #10
 8011e12:	44a4      	add	ip, r4
 8011e14:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8011e18:	1418      	asrs	r0, r3, #16
 8011e1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011e1e:	eb0c 0c46 	add.w	ip, ip, r6, lsl #1
 8011e22:	f3cb 0409 	ubfx	r4, fp, #0, #10
 8011e26:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8011e2a:	b21b      	sxth	r3, r3
 8011e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8011e30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011e34:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 8011e38:	140f      	asrs	r7, r1, #16
 8011e3a:	449c      	add	ip, r3
 8011e3c:	44bc      	add	ip, r7
 8011e3e:	f5ac 4c58 	sub.w	ip, ip, #55296	; 0xd800
 8011e42:	9103      	str	r1, [sp, #12]
 8011e44:	eb0c 0405 	add.w	r4, ip, r5
 8011e48:	9905      	ldr	r1, [sp, #20]
 8011e4a:	ebc8 0404 	rsb	r4, r8, r4
 8011e4e:	ea4f 79e4 	mov.w	r9, r4, asr #31
 8011e52:	fba4 4501 	umull	r4, r5, r4, r1
 8011e56:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8011e5a:	fb01 5509 	mla	r5, r1, r9, r5
 8011e5e:	f04f 0900 	mov.w	r9, #0
 8011e62:	9900      	ldr	r1, [sp, #0]
 8011e64:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8011e68:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8011e6c:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 8011e70:	f145 0500 	adc.w	r5, r5, #0
 8011e74:	448e      	add	lr, r1
 8011e76:	9904      	ldr	r1, [sp, #16]
 8011e78:	032c      	lsls	r4, r5, #12
 8011e7a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8011e7e:	b292      	uxth	r2, r2
 8011e80:	fbc1 8904 	smlal	r8, r9, r1, r4
 8011e84:	44b6      	add	lr, r6
 8011e86:	4402      	add	r2, r0
 8011e88:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8011e8c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8011e90:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8011e94:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8011e98:	4470      	add	r0, lr
 8011e9a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011e9e:	4418      	add	r0, r3
 8011ea0:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 8011ea4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8011ea8:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8011eac:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8011eb0:	9e02      	ldr	r6, [sp, #8]
 8011eb2:	440a      	add	r2, r1
 8011eb4:	9200      	str	r2, [sp, #0]
 8011eb6:	9a06      	ldr	r2, [sp, #24]
 8011eb8:	4418      	add	r0, r3
 8011eba:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8011ebe:	f303 030f 	ssat	r3, #16, r3
 8011ec2:	f826 3b02 	strh.w	r3, [r6], #2
 8011ec6:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8011eca:	4296      	cmp	r6, r2
 8011ecc:	9602      	str	r6, [sp, #8]
 8011ece:	eb00 0407 	add.w	r4, r0, r7
 8011ed2:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8011ed6:	46e0      	mov	r8, ip
 8011ed8:	f47f af62 	bne.w	8011da0 <D48_1CH_HTONS_VOL_HP+0x38>
 8011edc:	2000      	movs	r0, #0
 8011ede:	9a07      	ldr	r2, [sp, #28]
 8011ee0:	9900      	ldr	r1, [sp, #0]
 8011ee2:	60d4      	str	r4, [r2, #12]
 8011ee4:	6091      	str	r1, [r2, #8]
 8011ee6:	f8c2 b01c 	str.w	fp, [r2, #28]
 8011eea:	6115      	str	r5, [r2, #16]
 8011eec:	f8c2 c014 	str.w	ip, [r2, #20]
 8011ef0:	b009      	add	sp, #36	; 0x24
 8011ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef6:	46b4      	mov	ip, r6
 8011ef8:	e7f0      	b.n	8011edc <D48_1CH_HTONS_VOL_HP+0x174>
 8011efa:	bf00      	nop
 8011efc:	20000000 	.word	0x20000000

08011f00 <D64_1CH_HTONS_VOL_HP>:
 8011f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f04:	b08f      	sub	sp, #60	; 0x3c
 8011f06:	9005      	str	r0, [sp, #20]
 8011f08:	4610      	mov	r0, r2
 8011f0a:	920d      	str	r2, [sp, #52]	; 0x34
 8011f0c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8011f0e:	6912      	ldr	r2, [r2, #16]
 8011f10:	9200      	str	r2, [sp, #0]
 8011f12:	4602      	mov	r2, r0
 8011f14:	4614      	mov	r4, r2
 8011f16:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8011f1a:	6892      	ldr	r2, [r2, #8]
 8011f1c:	6940      	ldr	r0, [r0, #20]
 8011f1e:	9203      	str	r2, [sp, #12]
 8011f20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011f22:	4606      	mov	r6, r0
 8011f24:	920a      	str	r2, [sp, #40]	; 0x28
 8011f26:	6a22      	ldr	r2, [r4, #32]
 8011f28:	68e5      	ldr	r5, [r4, #12]
 8011f2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f000 80ef 	beq.w	8012110 <D64_1CH_HTONS_VOL_HP+0x210>
 8011f32:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011f36:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8012114 <D64_1CH_HTONS_VOL_HP+0x214>
 8011f3a:	9106      	str	r1, [sp, #24]
 8011f3c:	930c      	str	r3, [sp, #48]	; 0x30
 8011f3e:	9b05      	ldr	r3, [sp, #20]
 8011f40:	f853 2b08 	ldr.w	r2, [r3], #8
 8011f44:	9305      	str	r3, [sp, #20]
 8011f46:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8011f4a:	ba52      	rev16	r2, r2
 8011f4c:	ba64      	rev16	r4, r4
 8011f4e:	b2d3      	uxtb	r3, r2
 8011f50:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8011f54:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8011f58:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8011f5c:	449a      	add	sl, r3
 8011f5e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8011f62:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8011f66:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8011f6a:	0e12      	lsrs	r2, r2, #24
 8011f6c:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
 8011f70:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8011f74:	f3c1 0709 	ubfx	r7, r1, #0, #10
 8011f78:	b2e2      	uxtb	r2, r4
 8011f7a:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8011f7e:	eb00 2191 	add.w	r1, r0, r1, lsr #10
 8011f82:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8011f86:	ea4f 4c27 	mov.w	ip, r7, asr #16
 8011f8a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8011f8e:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 8011f92:	9702      	str	r7, [sp, #8]
 8011f94:	eb02 2893 	add.w	r8, r2, r3, lsr #10
 8011f98:	f85e 7020 	ldr.w	r7, [lr, r0, lsl #2]
 8011f9c:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8011fa0:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8011fa4:	ebcc 0b00 	rsb	fp, ip, r0
 8011fa8:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8011fac:	9009      	str	r0, [sp, #36]	; 0x24
 8011fae:	0e24      	lsrs	r4, r4, #24
 8011fb0:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8011fb4:	eb07 2798 	add.w	r7, r7, r8, lsr #10
 8011fb8:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8011fbc:	eb05 058b 	add.w	r5, r5, fp, lsl #2
 8011fc0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8011fc4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8011fc8:	eb0a 0b4a 	add.w	fp, sl, sl, lsl #1
 8011fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011fd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011fd4:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
 8011fd8:	eb04 2190 	add.w	r1, r4, r0, lsr #10
 8011fdc:	44ab      	add	fp, r5
 8011fde:	460d      	mov	r5, r1
 8011fe0:	ea4f 4923 	mov.w	r9, r3, asr #16
 8011fe4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8011fe8:	f3c7 0209 	ubfx	r2, r7, #0, #10
 8011fec:	b21b      	sxth	r3, r3
 8011fee:	ebc9 1109 	rsb	r1, r9, r9, lsl #4
 8011ff2:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8011ff6:	448b      	add	fp, r1
 8011ff8:	ea4f 4822 	mov.w	r8, r2, asr #16
 8011ffc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8012000:	b212      	sxth	r2, r2
 8012002:	f3c5 0409 	ubfx	r4, r5, #0, #10
 8012006:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 801200a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801200e:	eb08 0b48 	add.w	fp, r8, r8, lsl #1
 8012012:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 8012016:	eb01 014b 	add.w	r1, r1, fp, lsl #1
 801201a:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 801201e:	440c      	add	r4, r1
 8012020:	1401      	asrs	r1, r0, #16
 8012022:	440c      	add	r4, r1
 8012024:	9308      	str	r3, [sp, #32]
 8012026:	f5a4 3300 	sub.w	r3, r4, #131072	; 0x20000
 801202a:	461c      	mov	r4, r3
 801202c:	9b00      	ldr	r3, [sp, #0]
 801202e:	9404      	str	r4, [sp, #16]
 8012030:	4423      	add	r3, r4
 8012032:	1b9c      	subs	r4, r3, r6
 8012034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012036:	9507      	str	r5, [sp, #28]
 8012038:	17e7      	asrs	r7, r4, #31
 801203a:	fba4 4503 	umull	r4, r5, r4, r3
 801203e:	f114 4600 	adds.w	r6, r4, #2147483648	; 0x80000000
 8012042:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012044:	fb03 5507 	mla	r5, r3, r7, r5
 8012048:	9b03      	ldr	r3, [sp, #12]
 801204a:	44a4      	add	ip, r4
 801204c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8012050:	f04f 032a 	mov.w	r3, #42	; 0x2a
 8012054:	f145 0700 	adc.w	r7, r5, #0
 8012058:	e9cd 6700 	strd	r6, r7, [sp]
 801205c:	272e      	movs	r7, #46	; 0x2e
 801205e:	fb03 ca0a 	mla	sl, r3, sl, ip
 8012062:	fb03 aa01 	mla	sl, r3, r1, sl
 8012066:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 801206a:	b200      	sxth	r0, r0
 801206c:	00c6      	lsls	r6, r0, #3
 801206e:	eb09 0449 	add.w	r4, r9, r9, lsl #1
 8012072:	442c      	add	r4, r5
 8012074:	1835      	adds	r5, r6, r0
 8012076:	eb0a 0a85 	add.w	sl, sl, r5, lsl #2
 801207a:	fb07 a709 	mla	r7, r7, r9, sl
 801207e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8012082:	f04f 0a00 	mov.w	sl, #0
 8012086:	9b08      	ldr	r3, [sp, #32]
 8012088:	9702      	str	r7, [sp, #8]
 801208a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801208e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012092:	9f01      	ldr	r7, [sp, #4]
 8012094:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8012098:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 801209c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801209e:	02ff      	lsls	r7, r7, #11
 80120a0:	fbc4 9a07 	smlal	r9, sl, r4, r7
 80120a4:	4655      	mov	r5, sl
 80120a6:	9f02      	ldr	r7, [sp, #8]
 80120a8:	10ac      	asrs	r4, r5, #2
 80120aa:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80120ae:	9f06      	ldr	r7, [sp, #24]
 80120b0:	f304 040f 	ssat	r4, #16, r4
 80120b4:	f827 4b02 	strh.w	r4, [r7], #2
 80120b8:	9c07      	ldr	r4, [sp, #28]
 80120ba:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 80120be:	ea4f 2a94 	mov.w	sl, r4, lsr #10
 80120c2:	242e      	movs	r4, #46	; 0x2e
 80120c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80120c8:	44e0      	add	r8, ip
 80120ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80120ce:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 80120d2:	1a30      	subs	r0, r6, r0
 80120d4:	4441      	add	r1, r8
 80120d6:	fb04 3502 	mla	r5, r4, r2, r3
 80120da:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80120de:	9303      	str	r3, [sp, #12]
 80120e0:	9b01      	ldr	r3, [sp, #4]
 80120e2:	9706      	str	r7, [sp, #24]
 80120e4:	005b      	lsls	r3, r3, #1
 80120e6:	9300      	str	r3, [sp, #0]
 80120e8:	9e04      	ldr	r6, [sp, #16]
 80120ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120ec:	429f      	cmp	r7, r3
 80120ee:	f47f af26 	bne.w	8011f3e <D64_1CH_HTONS_VOL_HP+0x3e>
 80120f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120f4:	2000      	movs	r0, #0
 80120f6:	4613      	mov	r3, r2
 80120f8:	9903      	ldr	r1, [sp, #12]
 80120fa:	60d5      	str	r5, [r2, #12]
 80120fc:	6091      	str	r1, [r2, #8]
 80120fe:	f8c2 a01c 	str.w	sl, [r2, #28]
 8012102:	9a00      	ldr	r2, [sp, #0]
 8012104:	611a      	str	r2, [r3, #16]
 8012106:	9a04      	ldr	r2, [sp, #16]
 8012108:	615a      	str	r2, [r3, #20]
 801210a:	b00f      	add	sp, #60	; 0x3c
 801210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012110:	9004      	str	r0, [sp, #16]
 8012112:	e7ee      	b.n	80120f2 <D64_1CH_HTONS_VOL_HP+0x1f2>
 8012114:	20000000 	.word	0x20000000

08012118 <D80_1CH_HTONS_VOL_HP>:
 8012118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801211c:	b093      	sub	sp, #76	; 0x4c
 801211e:	9005      	str	r0, [sp, #20]
 8012120:	4610      	mov	r0, r2
 8012122:	9211      	str	r2, [sp, #68]	; 0x44
 8012124:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8012126:	6912      	ldr	r2, [r2, #16]
 8012128:	9200      	str	r2, [sp, #0]
 801212a:	4602      	mov	r2, r0
 801212c:	4614      	mov	r4, r2
 801212e:	6940      	ldr	r0, [r0, #20]
 8012130:	68e6      	ldr	r6, [r4, #12]
 8012132:	9004      	str	r0, [sp, #16]
 8012134:	69d0      	ldr	r0, [r2, #28]
 8012136:	6892      	ldr	r2, [r2, #8]
 8012138:	9202      	str	r2, [sp, #8]
 801213a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801213c:	920e      	str	r2, [sp, #56]	; 0x38
 801213e:	6a22      	ldr	r2, [r4, #32]
 8012140:	920f      	str	r2, [sp, #60]	; 0x3c
 8012142:	2b00      	cmp	r3, #0
 8012144:	f000 8137 	beq.w	80123b6 <D80_1CH_HTONS_VOL_HP+0x29e>
 8012148:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801214c:	9106      	str	r1, [sp, #24]
 801214e:	4682      	mov	sl, r0
 8012150:	4631      	mov	r1, r6
 8012152:	f8df c268 	ldr.w	ip, [pc, #616]	; 80123bc <D80_1CH_HTONS_VOL_HP+0x2a4>
 8012156:	9310      	str	r3, [sp, #64]	; 0x40
 8012158:	9805      	ldr	r0, [sp, #20]
 801215a:	6802      	ldr	r2, [r0, #0]
 801215c:	6847      	ldr	r7, [r0, #4]
 801215e:	6883      	ldr	r3, [r0, #8]
 8012160:	300a      	adds	r0, #10
 8012162:	9005      	str	r0, [sp, #20]
 8012164:	ba52      	rev16	r2, r2
 8012166:	ba7f      	rev16	r7, r7
 8012168:	fa93 f893 	rev16.w	r8, r3
 801216c:	b2d3      	uxtb	r3, r2
 801216e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8012172:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8012176:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 801217a:	4453      	add	r3, sl
 801217c:	eb00 2593 	add.w	r5, r0, r3, lsr #10
 8012180:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8012184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012188:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801218c:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8012190:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8012194:	461c      	mov	r4, r3
 8012196:	0e12      	lsrs	r2, r2, #24
 8012198:	fa5f fe87 	uxtb.w	lr, r7
 801219c:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80121a0:	9403      	str	r4, [sp, #12]
 80121a2:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 80121a6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80121aa:	f85c 502e 	ldr.w	r5, [ip, lr, lsl #2]
 80121ae:	ea4f 4a24 	mov.w	sl, r4, asr #16
 80121b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80121b6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80121ba:	f3c7 4407 	ubfx	r4, r7, #16, #8
 80121be:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80121c2:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 80121c6:	eb0a 064a 	add.w	r6, sl, sl, lsl #1
 80121ca:	eb05 2292 	add.w	r2, r5, r2, lsr #10
 80121ce:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80121d2:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80121d6:	ea4e 4000 	orr.w	r0, lr, r0, lsl #16
 80121da:	fa0f f48b 	sxth.w	r4, fp
 80121de:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80121e2:	0e3f      	lsrs	r7, r7, #24
 80121e4:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80121e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80121ea:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 80121ee:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80121f2:	eb05 2393 	add.w	r3, r5, r3, lsr #10
 80121f6:	440e      	add	r6, r1
 80121f8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80121fc:	1401      	asrs	r1, r0, #16
 80121fe:	fa5f f588 	uxtb.w	r5, r8
 8012202:	b200      	sxth	r0, r0
 8012204:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8012208:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 801220c:	900a      	str	r0, [sp, #40]	; 0x28
 801220e:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8012212:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012216:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 801221a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801221e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8012222:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 8012226:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801222a:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801222e:	f85c 8028 	ldr.w	r8, [ip, r8, lsl #2]
 8012232:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
 8012236:	4426      	add	r6, r4
 8012238:	b212      	sxth	r2, r2
 801223a:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 801223e:	eb05 2597 	add.w	r5, r5, r7, lsr #10
 8012242:	f3c3 0909 	ubfx	r9, r3, #0, #10
 8012246:	4434      	add	r4, r6
 8012248:	f3c7 0309 	ubfx	r3, r7, #0, #10
 801224c:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 8012250:	eb08 2795 	add.w	r7, r8, r5, lsr #10
 8012254:	900c      	str	r0, [sp, #48]	; 0x30
 8012256:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801225a:	4630      	mov	r0, r6
 801225c:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8012260:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8012264:	462e      	mov	r6, r5
 8012266:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
 801226a:	141d      	asrs	r5, r3, #16
 801226c:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 8012270:	b21b      	sxth	r3, r3
 8012272:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 8012276:	9509      	str	r5, [sp, #36]	; 0x24
 8012278:	eb04 0449 	add.w	r4, r4, r9, lsl #1
 801227c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8012280:	ea4f 4826 	mov.w	r8, r6, asr #16
 8012284:	442c      	add	r4, r5
 8012286:	4444      	add	r4, r8
 8012288:	f5a4 347a 	sub.w	r4, r4, #256000	; 0x3e800
 801228c:	4625      	mov	r5, r4
 801228e:	9c00      	ldr	r4, [sp, #0]
 8012290:	9608      	str	r6, [sp, #32]
 8012292:	9e04      	ldr	r6, [sp, #16]
 8012294:	900d      	str	r0, [sp, #52]	; 0x34
 8012296:	442c      	add	r4, r5
 8012298:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801229a:	1ba4      	subs	r4, r4, r6
 801229c:	9707      	str	r7, [sp, #28]
 801229e:	9503      	str	r5, [sp, #12]
 80122a0:	17e7      	asrs	r7, r4, #31
 80122a2:	fba4 4500 	umull	r4, r5, r4, r0
 80122a6:	fb00 5507 	mla	r5, r0, r7, r5
 80122aa:	f114 4600 	adds.w	r6, r4, #2147483648	; 0x80000000
 80122ae:	f145 0700 	adc.w	r7, r5, #0
 80122b2:	e9cd 6700 	strd	r6, r7, [sp]
 80122b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80122b8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80122bc:	ebc6 1586 	rsb	r5, r6, r6, lsl #6
 80122c0:	fa1f f68b 	uxth.w	r6, fp
 80122c4:	4434      	add	r4, r6
 80122c6:	ebca 06ca 	rsb	r6, sl, sl, lsl #3
 80122ca:	ebca 06c6 	rsb	r6, sl, r6, lsl #3
 80122ce:	f04f 0b00 	mov.w	fp, #0
 80122d2:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80122d6:	9f02      	ldr	r7, [sp, #8]
 80122d8:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80122dc:	443e      	add	r6, r7
 80122de:	4435      	add	r5, r6
 80122e0:	eb01 1601 	add.w	r6, r1, r1, lsl #4
 80122e4:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80122e8:	440d      	add	r5, r1
 80122ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80122ec:	ebce 170e 	rsb	r7, lr, lr, lsl #4
 80122f0:	eb01 06c1 	add.w	r6, r1, r1, lsl #3
 80122f4:	eb01 00c6 	add.w	r0, r1, r6, lsl #3
 80122f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80122fa:	4405      	add	r5, r0
 80122fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80122fe:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8012302:	9901      	ldr	r1, [sp, #4]
 8012304:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 8012308:	ebc0 1e00 	rsb	lr, r0, r0, lsl #4
 801230c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801230e:	0289      	lsls	r1, r1, #10
 8012310:	fbc0 ab01 	smlal	sl, fp, r0, r1
 8012314:	4659      	mov	r1, fp
 8012316:	443d      	add	r5, r7
 8012318:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801231a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801231e:	eb07 06c7 	add.w	r6, r7, r7, lsl #3
 8012322:	eb07 0bc6 	add.w	fp, r7, r6, lsl #3
 8012326:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 801232a:	4414      	add	r4, r2
 801232c:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 8012330:	4475      	add	r5, lr
 8012332:	eb03 1003 	add.w	r0, r3, r3, lsl #4
 8012336:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 801233a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801233e:	ebc7 07c2 	rsb	r7, r7, r2, lsl #3
 8012342:	9a06      	ldr	r2, [sp, #24]
 8012344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012348:	445d      	add	r5, fp
 801234a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801234e:	444c      	add	r4, r9
 8012350:	4405      	add	r5, r0
 8012352:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012356:	ebc8 1088 	rsb	r0, r8, r8, lsl #6
 801235a:	108b      	asrs	r3, r1, #2
 801235c:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8012360:	f303 030f 	ssat	r3, #16, r3
 8012364:	f822 3b02 	strh.w	r3, [r2], #2
 8012368:	9b07      	ldr	r3, [sp, #28]
 801236a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801236e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8012372:	ea4f 2a93 	mov.w	sl, r3, lsr #10
 8012376:	eb08 030e 	add.w	r3, r8, lr
 801237a:	9302      	str	r3, [sp, #8]
 801237c:	9b01      	ldr	r3, [sp, #4]
 801237e:	4428      	add	r0, r5
 8012380:	005b      	lsls	r3, r3, #1
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012386:	9d03      	ldr	r5, [sp, #12]
 8012388:	429a      	cmp	r2, r3
 801238a:	9206      	str	r2, [sp, #24]
 801238c:	eb00 0107 	add.w	r1, r0, r7
 8012390:	9504      	str	r5, [sp, #16]
 8012392:	f47f aee1 	bne.w	8012158 <D80_1CH_HTONS_VOL_HP+0x40>
 8012396:	4650      	mov	r0, sl
 8012398:	460e      	mov	r6, r1
 801239a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801239c:	9902      	ldr	r1, [sp, #8]
 801239e:	4613      	mov	r3, r2
 80123a0:	61d0      	str	r0, [r2, #28]
 80123a2:	2000      	movs	r0, #0
 80123a4:	6091      	str	r1, [r2, #8]
 80123a6:	60d6      	str	r6, [r2, #12]
 80123a8:	9a00      	ldr	r2, [sp, #0]
 80123aa:	611a      	str	r2, [r3, #16]
 80123ac:	9a03      	ldr	r2, [sp, #12]
 80123ae:	615a      	str	r2, [r3, #20]
 80123b0:	b013      	add	sp, #76	; 0x4c
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	9b04      	ldr	r3, [sp, #16]
 80123b8:	9303      	str	r3, [sp, #12]
 80123ba:	e7ee      	b.n	801239a <D80_1CH_HTONS_VOL_HP+0x282>
 80123bc:	20000000 	.word	0x20000000

080123c0 <D128_1CH_HTONS_VOL_HP>:
 80123c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123c4:	4614      	mov	r4, r2
 80123c6:	b097      	sub	sp, #92	; 0x5c
 80123c8:	9215      	str	r2, [sp, #84]	; 0x54
 80123ca:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80123cc:	6912      	ldr	r2, [r2, #16]
 80123ce:	920a      	str	r2, [sp, #40]	; 0x28
 80123d0:	4622      	mov	r2, r4
 80123d2:	4615      	mov	r5, r2
 80123d4:	462e      	mov	r6, r5
 80123d6:	6964      	ldr	r4, [r4, #20]
 80123d8:	940d      	str	r4, [sp, #52]	; 0x34
 80123da:	69d4      	ldr	r4, [r2, #28]
 80123dc:	6892      	ldr	r2, [r2, #8]
 80123de:	9202      	str	r2, [sp, #8]
 80123e0:	68ea      	ldr	r2, [r5, #12]
 80123e2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80123e4:	9512      	str	r5, [sp, #72]	; 0x48
 80123e6:	6a35      	ldr	r5, [r6, #32]
 80123e8:	9513      	str	r5, [sp, #76]	; 0x4c
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f000 81c9 	beq.w	8012782 <D128_1CH_HTONS_VOL_HP+0x3c2>
 80123f0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80123f4:	9314      	str	r3, [sp, #80]	; 0x50
 80123f6:	f100 0310 	add.w	r3, r0, #16
 80123fa:	469a      	mov	sl, r3
 80123fc:	f8df b388 	ldr.w	fp, [pc, #904]	; 8012788 <D128_1CH_HTONS_VOL_HP+0x3c8>
 8012400:	910e      	str	r1, [sp, #56]	; 0x38
 8012402:	f85a 3c10 	ldr.w	r3, [sl, #-16]
 8012406:	f85a 1c0c 	ldr.w	r1, [sl, #-12]
 801240a:	f85a 7c08 	ldr.w	r7, [sl, #-8]
 801240e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012412:	ba5b      	rev16	r3, r3
 8012414:	ba49      	rev16	r1, r1
 8012416:	ba7f      	rev16	r7, r7
 8012418:	fa90 f990 	rev16.w	r9, r0
 801241c:	b2d8      	uxtb	r0, r3
 801241e:	f85b 5020 	ldr.w	r5, [fp, r0, lsl #2]
 8012422:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8012426:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 801242a:	442c      	add	r4, r5
 801242c:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8012430:	f3cc 0509 	ubfx	r5, ip, #0, #10
 8012434:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8012438:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801243c:	f85b 6020 	ldr.w	r6, [fp, r0, lsl #2]
 8012440:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
 8012444:	4604      	mov	r4, r0
 8012446:	0e1b      	lsrs	r3, r3, #24
 8012448:	9401      	str	r4, [sp, #4]
 801244a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801244e:	f85b 5023 	ldr.w	r5, [fp, r3, lsl #2]
 8012452:	1400      	asrs	r0, r0, #16
 8012454:	eb06 2c9c 	add.w	ip, r6, ip, lsr #10
 8012458:	265b      	movs	r6, #91	; 0x5b
 801245a:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 801245e:	eb05 239c 	add.w	r3, r5, ip, lsr #10
 8012462:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
 8012466:	ebc0 050e 	rsb	r5, r0, lr
 801246a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801246e:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8012472:	4442      	add	r2, r8
 8012474:	f04f 084e 	mov.w	r8, #78	; 0x4e
 8012478:	9403      	str	r4, [sp, #12]
 801247a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801247e:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8012482:	ea44 4c0c 	orr.w	ip, r4, ip, lsl #16
 8012486:	b2cc      	uxtb	r4, r1
 8012488:	f85b 5024 	ldr.w	r5, [fp, r4, lsl #2]
 801248c:	ea4f 442c 	mov.w	r4, ip, asr #16
 8012490:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8012494:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012498:	fb06 2204 	mla	r2, r6, r4, r2
 801249c:	9406      	str	r4, [sp, #24]
 801249e:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80124a2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80124a6:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 80124aa:	0e09      	lsrs	r1, r1, #24
 80124ac:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80124b0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 80124b4:	fa0f f68c 	sxth.w	r6, ip
 80124b8:	eb04 2c93 	add.w	ip, r4, r3, lsr #10
 80124bc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80124c0:	fb08 2406 	mla	r4, r8, r6, r2
 80124c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80124c8:	eb01 229c 	add.w	r2, r1, ip, lsr #10
 80124cc:	b2f9      	uxtb	r1, r7
 80124ce:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80124d2:	f85b 5021 	ldr.w	r5, [fp, r1, lsl #2]
 80124d6:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80124da:	eb05 2892 	add.w	r8, r5, r2, lsr #10
 80124de:	f3c7 2207 	ubfx	r2, r7, #8, #8
 80124e2:	f85b 5022 	ldr.w	r5, [fp, r2, lsl #2]
 80124e6:	f3c7 4207 	ubfx	r2, r7, #16, #8
 80124ea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80124ee:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 80124f2:	0e3f      	lsrs	r7, r7, #24
 80124f4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80124f8:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 80124fc:	eb05 2c98 	add.w	ip, r5, r8, lsr #10
 8012500:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8012504:	f3cc 0509 	ubfx	r5, ip, #0, #10
 8012508:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801250c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8012510:	9607      	str	r6, [sp, #28]
 8012512:	4470      	add	r0, lr
 8012514:	b21e      	sxth	r6, r3
 8012516:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 801251a:	eb0c 124c 	add.w	r2, ip, ip, lsl #5
 801251e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8012522:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 8012526:	ebc6 04c4 	rsb	r4, r6, r4, lsl #3
 801252a:	4414      	add	r4, r2
 801252c:	140a      	asrs	r2, r1, #16
 801252e:	9605      	str	r6, [sp, #20]
 8012530:	4616      	mov	r6, r2
 8012532:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8012536:	9308      	str	r3, [sp, #32]
 8012538:	2396      	movs	r3, #150	; 0x96
 801253a:	b20a      	sxth	r2, r1
 801253c:	9200      	str	r2, [sp, #0]
 801253e:	fa5f f289 	uxtb.w	r2, r9
 8012542:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
 8012546:	9a02      	ldr	r2, [sp, #8]
 8012548:	9610      	str	r6, [sp, #64]	; 0x40
 801254a:	9e03      	ldr	r6, [sp, #12]
 801254c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8012550:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8012554:	f3c7 0209 	ubfx	r2, r7, #0, #10
 8012558:	f3c9 2707 	ubfx	r7, r9, #8, #8
 801255c:	fb03 0606 	mla	r6, r3, r6, r0
 8012560:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 8012564:	9808      	ldr	r0, [sp, #32]
 8012566:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801256a:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 801256e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8012572:	f3c1 0809 	ubfx	r8, r1, #0, #10
 8012576:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 801257a:	440c      	add	r4, r1
 801257c:	9900      	ldr	r1, [sp, #0]
 801257e:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8012582:	00c8      	lsls	r0, r1, #3
 8012584:	1841      	adds	r1, r0, r1
 8012586:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801258a:	f3c9 4107 	ubfx	r1, r9, #16, #8
 801258e:	9011      	str	r0, [sp, #68]	; 0x44
 8012590:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8012594:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
 8012598:	ea4f 4e25 	mov.w	lr, r5, asr #16
 801259c:	b22b      	sxth	r3, r5
 801259e:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
 80125a2:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80125a6:	9304      	str	r3, [sp, #16]
 80125a8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80125ac:	9309      	str	r3, [sp, #36]	; 0x24
 80125ae:	eb05 2390 	add.w	r3, r5, r0, lsr #10
 80125b2:	9302      	str	r3, [sp, #8]
 80125b4:	f3c7 0109 	ubfx	r1, r7, #0, #10
 80125b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80125ba:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80125be:	ebce 0507 	rsb	r5, lr, r7
 80125c2:	9f04      	ldr	r7, [sp, #16]
 80125c4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80125c8:	eb07 0847 	add.w	r8, r7, r7, lsl #1
 80125cc:	ebc8 05c8 	rsb	r5, r8, r8, lsl #3
 80125d0:	442c      	add	r4, r5
 80125d2:	b215      	sxth	r5, r2
 80125d4:	ea4f 4922 	mov.w	r9, r2, asr #16
 80125d8:	462a      	mov	r2, r5
 80125da:	ebc9 1509 	rsb	r5, r9, r9, lsl #4
 80125de:	140f      	asrs	r7, r1, #16
 80125e0:	442c      	add	r4, r5
 80125e2:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80125e6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80125ea:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 80125ee:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80125f2:	9d02      	ldr	r5, [sp, #8]
 80125f4:	b209      	sxth	r1, r1
 80125f6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80125fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80125fe:	9203      	str	r2, [sp, #12]
 8012600:	ea45 4200 	orr.w	r2, r5, r0, lsl #16
 8012604:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012608:	4404      	add	r4, r0
 801260a:	1410      	asrs	r0, r2, #16
 801260c:	4404      	add	r4, r0
 801260e:	920f      	str	r2, [sp, #60]	; 0x3c
 8012610:	f5a4 1280 	sub.w	r2, r4, #1048576	; 0x100000
 8012614:	4615      	mov	r5, r2
 8012616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012618:	950c      	str	r5, [sp, #48]	; 0x30
 801261a:	442a      	add	r2, r5
 801261c:	4614      	mov	r4, r2
 801261e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012620:	9d06      	ldr	r5, [sp, #24]
 8012622:	1aa4      	subs	r4, r4, r2
 8012624:	4622      	mov	r2, r4
 8012626:	17e3      	asrs	r3, r4, #31
 8012628:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801262c:	22a2      	movs	r2, #162	; 0xa2
 801262e:	fb02 6605 	mla	r6, r2, r5, r6
 8012632:	22ac      	movs	r2, #172	; 0xac
 8012634:	23b4      	movs	r3, #180	; 0xb4
 8012636:	9d07      	ldr	r5, [sp, #28]
 8012638:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 801263c:	fb02 6605 	mla	r6, r2, r5, r6
 8012640:	fb03 660c 	mla	r6, r3, ip, r6
 8012644:	23ba      	movs	r3, #186	; 0xba
 8012646:	9a05      	ldr	r2, [sp, #20]
 8012648:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801264c:	fb03 6602 	mla	r6, r3, r2, r6
 8012650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012654:	fba4 4502 	umull	r4, r5, r4, r2
 8012658:	fb02 5503 	mla	r5, r2, r3, r5
 801265c:	f114 4200 	adds.w	r2, r4, #2147483648	; 0x80000000
 8012660:	f145 0300 	adc.w	r3, r5, #0
 8012664:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012668:	22be      	movs	r2, #190	; 0xbe
 801266a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801266c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8012670:	fb02 6604 	mla	r6, r2, r4, r6
 8012674:	9c06      	ldr	r4, [sp, #24]
 8012676:	9b05      	ldr	r3, [sp, #20]
 8012678:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801267c:	4425      	add	r5, r4
 801267e:	9c07      	ldr	r4, [sp, #28]
 8012680:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8012684:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012688:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 801268c:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 8012690:	f04f 0cba 	mov.w	ip, #186	; 0xba
 8012694:	9d00      	ldr	r5, [sp, #0]
 8012696:	441c      	add	r4, r3
 8012698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801269c:	eb06 1685 	add.w	r6, r6, r5, lsl #6
 80126a0:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 80126a4:	eb06 1685 	add.w	r6, r6, r5, lsl #6
 80126a8:	9d04      	ldr	r5, [sp, #16]
 80126aa:	f10a 0a10 	add.w	sl, sl, #16
 80126ae:	fb02 6605 	mla	r6, r2, r5, r6
 80126b2:	fb0c 6509 	mla	r5, ip, r9, r6
 80126b6:	9e08      	ldr	r6, [sp, #32]
 80126b8:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
 80126bc:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 80126c0:	441c      	add	r4, r3
 80126c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80126c4:	9b00      	ldr	r3, [sp, #0]
 80126c6:	9a03      	ldr	r2, [sp, #12]
 80126c8:	1af3      	subs	r3, r6, r3
 80126ca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80126ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126d0:	26ac      	movs	r6, #172	; 0xac
 80126d2:	449e      	add	lr, r3
 80126d4:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80126d8:	ebc9 09c3 	rsb	r9, r9, r3, lsl #3
 80126dc:	234e      	movs	r3, #78	; 0x4e
 80126de:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 80126e2:	4444      	add	r4, r8
 80126e4:	fb0c 5502 	mla	r5, ip, r2, r5
 80126e8:	444c      	add	r4, r9
 80126ea:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80126ee:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80126f2:	fb03 4207 	mla	r2, r3, r7, r4
 80126f6:	23a2      	movs	r3, #162	; 0xa2
 80126f8:	245b      	movs	r4, #91	; 0x5b
 80126fa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80126fe:	f04f 0900 	mov.w	r9, #0
 8012702:	fb06 5507 	mla	r5, r6, r7, r5
 8012706:	fb03 5501 	mla	r5, r3, r1, r5
 801270a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801270c:	fb04 2101 	mla	r1, r4, r1, r2
 8012710:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012712:	021b      	lsls	r3, r3, #8
 8012714:	fbc2 8903 	smlal	r8, r9, r2, r3
 8012718:	2396      	movs	r3, #150	; 0x96
 801271a:	fb03 5500 	mla	r5, r3, r0, r5
 801271e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8012722:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012724:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8012728:	011f      	lsls	r7, r3, #4
 801272a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801272e:	18fa      	adds	r2, r7, r3
 8012730:	4401      	add	r1, r0
 8012732:	1af8      	subs	r0, r7, r3
 8012734:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8012738:	f303 030f 	ssat	r3, #16, r3
 801273c:	f824 3b02 	strh.w	r3, [r4], #2
 8012740:	4623      	mov	r3, r4
 8012742:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012746:	940e      	str	r4, [sp, #56]	; 0x38
 8012748:	9f02      	ldr	r7, [sp, #8]
 801274a:	9102      	str	r1, [sp, #8]
 801274c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801274e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8012752:	0049      	lsls	r1, r1, #1
 8012754:	910a      	str	r1, [sp, #40]	; 0x28
 8012756:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012758:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801275a:	428b      	cmp	r3, r1
 801275c:	ea4f 2497 	mov.w	r4, r7, lsr #10
 8012760:	950d      	str	r5, [sp, #52]	; 0x34
 8012762:	f47f ae4e 	bne.w	8012402 <D128_1CH_HTONS_VOL_HP+0x42>
 8012766:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012768:	9802      	ldr	r0, [sp, #8]
 801276a:	460b      	mov	r3, r1
 801276c:	6088      	str	r0, [r1, #8]
 801276e:	2000      	movs	r0, #0
 8012770:	60ca      	str	r2, [r1, #12]
 8012772:	61cc      	str	r4, [r1, #28]
 8012774:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012776:	6119      	str	r1, [r3, #16]
 8012778:	990c      	ldr	r1, [sp, #48]	; 0x30
 801277a:	6159      	str	r1, [r3, #20]
 801277c:	b017      	add	sp, #92	; 0x5c
 801277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012784:	930c      	str	r3, [sp, #48]	; 0x30
 8012786:	e7ee      	b.n	8012766 <D128_1CH_HTONS_VOL_HP+0x3a6>
 8012788:	20000000 	.word	0x20000000

0801278c <PDM_Filter_Init>:
 801278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278e:	4604      	mov	r4, r0
 8012790:	2240      	movs	r2, #64	; 0x40
 8012792:	2100      	movs	r1, #0
 8012794:	300c      	adds	r0, #12
 8012796:	f000 f9e0 	bl	8012b5a <memset>
 801279a:	4a41      	ldr	r2, [pc, #260]	; (80128a0 <PDM_Filter_Init+0x114>)
 801279c:	4941      	ldr	r1, [pc, #260]	; (80128a4 <PDM_Filter_Init+0x118>)
 801279e:	6813      	ldr	r3, [r2, #0]
 80127a0:	f023 0301 	bic.w	r3, r3, #1
 80127a4:	6013      	str	r3, [r2, #0]
 80127a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80127a8:	428b      	cmp	r3, r1
 80127aa:	d010      	beq.n	80127ce <PDM_Filter_Init+0x42>
 80127ac:	4b3e      	ldr	r3, [pc, #248]	; (80128a8 <PDM_Filter_Init+0x11c>)
 80127ae:	2201      	movs	r2, #1
 80127b0:	4619      	mov	r1, r3
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	680b      	ldr	r3, [r1, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d1fc      	bne.n	80127b4 <PDM_Filter_Init+0x28>
 80127ba:	4a3c      	ldr	r2, [pc, #240]	; (80128ac <PDM_Filter_Init+0x120>)
 80127bc:	483c      	ldr	r0, [pc, #240]	; (80128b0 <PDM_Filter_Init+0x124>)
 80127be:	4939      	ldr	r1, [pc, #228]	; (80128a4 <PDM_Filter_Init+0x118>)
 80127c0:	6010      	str	r0, [r2, #0]
 80127c2:	6812      	ldr	r2, [r2, #0]
 80127c4:	428a      	cmp	r2, r1
 80127c6:	d001      	beq.n	80127cc <PDM_Filter_Init+0x40>
 80127c8:	6463      	str	r3, [r4, #68]	; 0x44
 80127ca:	e7fe      	b.n	80127ca <PDM_Filter_Init+0x3e>
 80127cc:	6462      	str	r2, [r4, #68]	; 0x44
 80127ce:	2300      	movs	r3, #0
 80127d0:	8822      	ldrh	r2, [r4, #0]
 80127d2:	8960      	ldrh	r0, [r4, #10]
 80127d4:	8921      	ldrh	r1, [r4, #8]
 80127d6:	2a01      	cmp	r2, #1
 80127d8:	61a3      	str	r3, [r4, #24]
 80127da:	6123      	str	r3, [r4, #16]
 80127dc:	6163      	str	r3, [r4, #20]
 80127de:	60e3      	str	r3, [r4, #12]
 80127e0:	6263      	str	r3, [r4, #36]	; 0x24
 80127e2:	61e3      	str	r3, [r4, #28]
 80127e4:	6223      	str	r3, [r4, #32]
 80127e6:	6423      	str	r3, [r4, #64]	; 0x40
 80127e8:	86a0      	strh	r0, [r4, #52]	; 0x34
 80127ea:	86e1      	strh	r1, [r4, #54]	; 0x36
 80127ec:	d91d      	bls.n	801282a <PDM_Filter_Init+0x9e>
 80127ee:	2203      	movs	r2, #3
 80127f0:	2002      	movs	r0, #2
 80127f2:	8861      	ldrh	r1, [r4, #2]
 80127f4:	2901      	cmp	r1, #1
 80127f6:	d914      	bls.n	8012822 <PDM_Filter_Init+0x96>
 80127f8:	4610      	mov	r0, r2
 80127fa:	2140      	movs	r1, #64	; 0x40
 80127fc:	2200      	movs	r2, #0
 80127fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012800:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8012804:	bf04      	itt	eq
 8012806:	460a      	moveq	r2, r1
 8012808:	6421      	streq	r1, [r4, #64]	; 0x40
 801280a:	6861      	ldr	r1, [r4, #4]
 801280c:	b119      	cbz	r1, 8012816 <PDM_Filter_Init+0x8a>
 801280e:	f042 0210 	orr.w	r2, r2, #16
 8012812:	6422      	str	r2, [r4, #64]	; 0x40
 8012814:	62e1      	str	r1, [r4, #44]	; 0x2c
 8012816:	2100      	movs	r1, #0
 8012818:	8721      	strh	r1, [r4, #56]	; 0x38
 801281a:	b908      	cbnz	r0, 8012820 <PDM_Filter_Init+0x94>
 801281c:	3280      	adds	r2, #128	; 0x80
 801281e:	6422      	str	r2, [r4, #64]	; 0x40
 8012820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012822:	d00a      	beq.n	801283a <PDM_Filter_Init+0xae>
 8012824:	2140      	movs	r1, #64	; 0x40
 8012826:	2200      	movs	r2, #0
 8012828:	e7e9      	b.n	80127fe <PDM_Filter_Init+0x72>
 801282a:	4922      	ldr	r1, [pc, #136]	; (80128b4 <PDM_Filter_Init+0x128>)
 801282c:	d01f      	beq.n	801286e <PDM_Filter_Init+0xe2>
 801282e:	780a      	ldrb	r2, [r1, #0]
 8012830:	2a01      	cmp	r2, #1
 8012832:	d006      	beq.n	8012842 <PDM_Filter_Init+0xb6>
 8012834:	4618      	mov	r0, r3
 8012836:	2201      	movs	r2, #1
 8012838:	e7db      	b.n	80127f2 <PDM_Filter_Init+0x66>
 801283a:	2220      	movs	r2, #32
 801283c:	2160      	movs	r1, #96	; 0x60
 801283e:	6422      	str	r2, [r4, #64]	; 0x40
 8012840:	e7dd      	b.n	80127fe <PDM_Filter_Init+0x72>
 8012842:	4b1d      	ldr	r3, [pc, #116]	; (80128b8 <PDM_Filter_Init+0x12c>)
 8012844:	f503 6780 	add.w	r7, r3, #1024	; 0x400
 8012848:	f853 5f04 	ldr.w	r5, [r3, #4]!
 801284c:	4e1b      	ldr	r6, [pc, #108]	; (80128bc <PDM_Filter_Init+0x130>)
 801284e:	0528      	lsls	r0, r5, #20
 8012850:	4a1b      	ldr	r2, [pc, #108]	; (80128c0 <PDM_Filter_Init+0x134>)
 8012852:	4006      	ands	r6, r0
 8012854:	f3c5 5009 	ubfx	r0, r5, #20, #10
 8012858:	4430      	add	r0, r6
 801285a:	402a      	ands	r2, r5
 801285c:	4402      	add	r2, r0
 801285e:	429f      	cmp	r7, r3
 8012860:	601a      	str	r2, [r3, #0]
 8012862:	d1f1      	bne.n	8012848 <PDM_Filter_Init+0xbc>
 8012864:	2300      	movs	r3, #0
 8012866:	2201      	movs	r2, #1
 8012868:	700b      	strb	r3, [r1, #0]
 801286a:	4618      	mov	r0, r3
 801286c:	e7c1      	b.n	80127f2 <PDM_Filter_Init+0x66>
 801286e:	7808      	ldrb	r0, [r1, #0]
 8012870:	b9a0      	cbnz	r0, 801289c <PDM_Filter_Init+0x110>
 8012872:	4b11      	ldr	r3, [pc, #68]	; (80128b8 <PDM_Filter_Init+0x12c>)
 8012874:	f503 6780 	add.w	r7, r3, #1024	; 0x400
 8012878:	f853 5f04 	ldr.w	r5, [r3, #4]!
 801287c:	4e0f      	ldr	r6, [pc, #60]	; (80128bc <PDM_Filter_Init+0x130>)
 801287e:	0528      	lsls	r0, r5, #20
 8012880:	4a0f      	ldr	r2, [pc, #60]	; (80128c0 <PDM_Filter_Init+0x134>)
 8012882:	4006      	ands	r6, r0
 8012884:	f3c5 5009 	ubfx	r0, r5, #20, #10
 8012888:	4430      	add	r0, r6
 801288a:	402a      	ands	r2, r5
 801288c:	4402      	add	r2, r0
 801288e:	429f      	cmp	r7, r3
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	d1f1      	bne.n	8012878 <PDM_Filter_Init+0xec>
 8012894:	2201      	movs	r2, #1
 8012896:	2000      	movs	r0, #0
 8012898:	700a      	strb	r2, [r1, #0]
 801289a:	e7aa      	b.n	80127f2 <PDM_Filter_Init+0x66>
 801289c:	4618      	mov	r0, r3
 801289e:	e7a8      	b.n	80127f2 <PDM_Filter_Init+0x66>
 80128a0:	e0002000 	.word	0xe0002000
 80128a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80128a8:	40023008 	.word	0x40023008
 80128ac:	40023000 	.word	0x40023000
 80128b0:	f407a5c2 	.word	0xf407a5c2
 80128b4:	200004c0 	.word	0x200004c0
 80128b8:	1ffffffc 	.word	0x1ffffffc
 80128bc:	3ff00000 	.word	0x3ff00000
 80128c0:	000ffc00 	.word	0x000ffc00

080128c4 <PDM_Filter_setConfig>:
 80128c4:	4b6a      	ldr	r3, [pc, #424]	; (8012a70 <PDM_Filter_setConfig+0x1ac>)
 80128c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d001      	beq.n	80128d0 <PDM_Filter_setConfig+0xc>
 80128cc:	2004      	movs	r0, #4
 80128ce:	4770      	bx	lr
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	4605      	mov	r5, r0
 80128d4:	880a      	ldrh	r2, [r1, #0]
 80128d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80128d8:	460e      	mov	r6, r1
 80128da:	1e51      	subs	r1, r2, #1
 80128dc:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 80128e0:	2906      	cmp	r1, #6
 80128e2:	ed2d 8b04 	vpush	{d8-d9}
 80128e6:	6428      	str	r0, [r5, #64]	; 0x40
 80128e8:	d91b      	bls.n	8012922 <PDM_Filter_setConfig+0x5e>
 80128ea:	2408      	movs	r4, #8
 80128ec:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 80128f0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80128f4:	4299      	cmp	r1, r3
 80128f6:	f000 8086 	beq.w	8012a06 <PDM_Filter_setConfig+0x142>
 80128fa:	f113 0f0c 	cmn.w	r3, #12
 80128fe:	da2a      	bge.n	8012956 <PDM_Filter_setConfig+0x92>
 8012900:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8012904:	3440      	adds	r4, #64	; 0x40
 8012906:	80b3      	strh	r3, [r6, #4]
 8012908:	862a      	strh	r2, [r5, #48]	; 0x30
 801290a:	8873      	ldrh	r3, [r6, #2]
 801290c:	866b      	strh	r3, [r5, #50]	; 0x32
 801290e:	2c00      	cmp	r4, #0
 8012910:	d15b      	bne.n	80129ca <PDM_Filter_setConfig+0x106>
 8012912:	2000      	movs	r0, #0
 8012914:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8012916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801291a:	642b      	str	r3, [r5, #64]	; 0x40
 801291c:	ecbd 8b04 	vpop	{d8-d9}
 8012920:	bd70      	pop	{r4, r5, r6, pc}
 8012922:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8012924:	4291      	cmp	r1, r2
 8012926:	d073      	beq.n	8012a10 <PDM_Filter_setConfig+0x14c>
 8012928:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 801292c:	f023 0301 	bic.w	r3, r3, #1
 8012930:	4313      	orrs	r3, r2
 8012932:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8012936:	642b      	str	r3, [r5, #64]	; 0x40
 8012938:	2970      	cmp	r1, #112	; 0x70
 801293a:	f003 030f 	and.w	r3, r3, #15
 801293e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012942:	d06d      	beq.n	8012a20 <PDM_Filter_setConfig+0x15c>
 8012944:	2b06      	cmp	r3, #6
 8012946:	f200 8090 	bhi.w	8012a6a <PDM_Filter_setConfig+0x1a6>
 801294a:	e8df f003 	tbb	[pc, r3]
 801294e:	5659      	.short	0x5659
 8012950:	444a5053 	.word	0x444a5053
 8012954:	4d          	.byte	0x4d
 8012955:	00          	.byte	0x00
 8012956:	2b33      	cmp	r3, #51	; 0x33
 8012958:	dc39      	bgt.n	80129ce <PDM_Filter_setConfig+0x10a>
 801295a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 801295c:	f002 020f 	and.w	r2, r2, #15
 8012960:	3a01      	subs	r2, #1
 8012962:	2a06      	cmp	r2, #6
 8012964:	d879      	bhi.n	8012a5a <PDM_Filter_setConfig+0x196>
 8012966:	4943      	ldr	r1, [pc, #268]	; (8012a74 <PDM_Filter_setConfig+0x1b0>)
 8012968:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801296c:	ed92 9a00 	vldr	s18, [r2]
 8012970:	ed92 8a07 	vldr	s16, [r2, #28]
 8012974:	ee07 3a90 	vmov	s15, r3
 8012978:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 801297c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012980:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012984:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8012988:	f000 f93a 	bl	8012c00 <powf>
 801298c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8012a78 <PDM_Filter_setConfig+0x1b4>
 8012990:	eef0 8a40 	vmov.f32	s17, s0
 8012994:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8012998:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801299c:	f000 f930 	bl	8012c00 <powf>
 80129a0:	ee28 8a28 	vmul.f32	s16, s16, s17
 80129a4:	ee68 7a00 	vmul.f32	s15, s16, s0
 80129a8:	ee17 0a90 	vmov	r0, s15
 80129ac:	f7ed fd74 	bl	8000498 <__aeabi_f2d>
 80129b0:	ec41 0b10 	vmov	d0, r0, r1
 80129b4:	f000 f8da 	bl	8012b6c <round>
 80129b8:	ec51 0b10 	vmov	r0, r1, d0
 80129bc:	f7ed fdc4 	bl	8000548 <__aeabi_d2uiz>
 80129c0:	88b3      	ldrh	r3, [r6, #4]
 80129c2:	8832      	ldrh	r2, [r6, #0]
 80129c4:	63e8      	str	r0, [r5, #60]	; 0x3c
 80129c6:	872b      	strh	r3, [r5, #56]	; 0x38
 80129c8:	e79e      	b.n	8012908 <PDM_Filter_setConfig+0x44>
 80129ca:	4620      	mov	r0, r4
 80129cc:	e7a6      	b.n	801291c <PDM_Filter_setConfig+0x58>
 80129ce:	2333      	movs	r3, #51	; 0x33
 80129d0:	3440      	adds	r4, #64	; 0x40
 80129d2:	80b3      	strh	r3, [r6, #4]
 80129d4:	e798      	b.n	8012908 <PDM_Filter_setConfig+0x44>
 80129d6:	4b29      	ldr	r3, [pc, #164]	; (8012a7c <PDM_Filter_setConfig+0x1b8>)
 80129d8:	64ab      	str	r3, [r5, #72]	; 0x48
 80129da:	2400      	movs	r4, #0
 80129dc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80129e0:	e78b      	b.n	80128fa <PDM_Filter_setConfig+0x36>
 80129e2:	4b27      	ldr	r3, [pc, #156]	; (8012a80 <PDM_Filter_setConfig+0x1bc>)
 80129e4:	64ab      	str	r3, [r5, #72]	; 0x48
 80129e6:	e7f8      	b.n	80129da <PDM_Filter_setConfig+0x116>
 80129e8:	4b26      	ldr	r3, [pc, #152]	; (8012a84 <PDM_Filter_setConfig+0x1c0>)
 80129ea:	64ab      	str	r3, [r5, #72]	; 0x48
 80129ec:	e7f5      	b.n	80129da <PDM_Filter_setConfig+0x116>
 80129ee:	4b26      	ldr	r3, [pc, #152]	; (8012a88 <PDM_Filter_setConfig+0x1c4>)
 80129f0:	64ab      	str	r3, [r5, #72]	; 0x48
 80129f2:	e7f2      	b.n	80129da <PDM_Filter_setConfig+0x116>
 80129f4:	4b25      	ldr	r3, [pc, #148]	; (8012a8c <PDM_Filter_setConfig+0x1c8>)
 80129f6:	64ab      	str	r3, [r5, #72]	; 0x48
 80129f8:	e7ef      	b.n	80129da <PDM_Filter_setConfig+0x116>
 80129fa:	4b25      	ldr	r3, [pc, #148]	; (8012a90 <PDM_Filter_setConfig+0x1cc>)
 80129fc:	64ab      	str	r3, [r5, #72]	; 0x48
 80129fe:	e7ec      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a00:	4b24      	ldr	r3, [pc, #144]	; (8012a94 <PDM_Filter_setConfig+0x1d0>)
 8012a02:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a04:	e7e9      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a06:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8012a08:	4291      	cmp	r1, r2
 8012a0a:	f47f af76 	bne.w	80128fa <PDM_Filter_setConfig+0x36>
 8012a0e:	e77c      	b.n	801290a <PDM_Filter_setConfig+0x46>
 8012a10:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 8012a14:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012a18:	4299      	cmp	r1, r3
 8012a1a:	d023      	beq.n	8012a64 <PDM_Filter_setConfig+0x1a0>
 8012a1c:	2400      	movs	r4, #0
 8012a1e:	e76c      	b.n	80128fa <PDM_Filter_setConfig+0x36>
 8012a20:	2b06      	cmp	r3, #6
 8012a22:	d822      	bhi.n	8012a6a <PDM_Filter_setConfig+0x1a6>
 8012a24:	e8df f003 	tbb	[pc, r3]
 8012a28:	0d101316 	.word	0x0d101316
 8012a2c:	070a      	.short	0x070a
 8012a2e:	04          	.byte	0x04
 8012a2f:	00          	.byte	0x00
 8012a30:	4b19      	ldr	r3, [pc, #100]	; (8012a98 <PDM_Filter_setConfig+0x1d4>)
 8012a32:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a34:	e7d1      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a36:	4b19      	ldr	r3, [pc, #100]	; (8012a9c <PDM_Filter_setConfig+0x1d8>)
 8012a38:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a3a:	e7ce      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a3c:	4b18      	ldr	r3, [pc, #96]	; (8012aa0 <PDM_Filter_setConfig+0x1dc>)
 8012a3e:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a40:	e7cb      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a42:	4b18      	ldr	r3, [pc, #96]	; (8012aa4 <PDM_Filter_setConfig+0x1e0>)
 8012a44:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a46:	e7c8      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a48:	4b17      	ldr	r3, [pc, #92]	; (8012aa8 <PDM_Filter_setConfig+0x1e4>)
 8012a4a:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a4c:	e7c5      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a4e:	4b17      	ldr	r3, [pc, #92]	; (8012aac <PDM_Filter_setConfig+0x1e8>)
 8012a50:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a52:	e7c2      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a54:	4b16      	ldr	r3, [pc, #88]	; (8012ab0 <PDM_Filter_setConfig+0x1ec>)
 8012a56:	64ab      	str	r3, [r5, #72]	; 0x48
 8012a58:	e7bf      	b.n	80129da <PDM_Filter_setConfig+0x116>
 8012a5a:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8012ab4 <PDM_Filter_setConfig+0x1f0>
 8012a5e:	eeb0 9a48 	vmov.f32	s18, s16
 8012a62:	e787      	b.n	8012974 <PDM_Filter_setConfig+0xb0>
 8012a64:	8873      	ldrh	r3, [r6, #2]
 8012a66:	866b      	strh	r3, [r5, #50]	; 0x32
 8012a68:	e753      	b.n	8012912 <PDM_Filter_setConfig+0x4e>
 8012a6a:	2400      	movs	r4, #0
 8012a6c:	e73e      	b.n	80128ec <PDM_Filter_setConfig+0x28>
 8012a6e:	bf00      	nop
 8012a70:	b5e8b5cd 	.word	0xb5e8b5cd
 8012a74:	080136b8 	.word	0x080136b8
 8012a78:	42000000 	.word	0x42000000
 8012a7c:	08010acd 	.word	0x08010acd
 8012a80:	080109bd 	.word	0x080109bd
 8012a84:	08010c39 	.word	0x08010c39
 8012a88:	0801157d 	.word	0x0801157d
 8012a8c:	08011251 	.word	0x08011251
 8012a90:	08010fd1 	.word	0x08010fd1
 8012a94:	08010dc5 	.word	0x08010dc5
 8012a98:	08011c25 	.word	0x08011c25
 8012a9c:	08011ae9 	.word	0x08011ae9
 8012aa0:	08011a15 	.word	0x08011a15
 8012aa4:	080123c1 	.word	0x080123c1
 8012aa8:	08012119 	.word	0x08012119
 8012aac:	08011f01 	.word	0x08011f01
 8012ab0:	08011d69 	.word	0x08011d69
 8012ab4:	00000000 	.word	0x00000000

08012ab8 <PDM_Filter>:
 8012ab8:	b410      	push	{r4}
 8012aba:	4b0c      	ldr	r3, [pc, #48]	; (8012aec <PDM_Filter+0x34>)
 8012abc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8012abe:	429c      	cmp	r4, r3
 8012ac0:	d003      	beq.n	8012aca <PDM_Filter+0x12>
 8012ac2:	2004      	movs	r0, #4
 8012ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ac8:	4770      	bx	lr
 8012aca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012acc:	05dc      	lsls	r4, r3, #23
 8012ace:	d407      	bmi.n	8012ae0 <PDM_Filter+0x28>
 8012ad0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012ad4:	bf14      	ite	ne
 8012ad6:	2020      	movne	r0, #32
 8012ad8:	2030      	moveq	r0, #48	; 0x30
 8012ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ade:	4770      	bx	lr
 8012ae0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8012ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ae6:	320c      	adds	r2, #12
 8012ae8:	4718      	bx	r3
 8012aea:	bf00      	nop
 8012aec:	b5e8b5cd 	.word	0xb5e8b5cd

08012af0 <__errno>:
 8012af0:	4b01      	ldr	r3, [pc, #4]	; (8012af8 <__errno+0x8>)
 8012af2:	6818      	ldr	r0, [r3, #0]
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	2000043c 	.word	0x2000043c

08012afc <__libc_init_array>:
 8012afc:	b570      	push	{r4, r5, r6, lr}
 8012afe:	4e0d      	ldr	r6, [pc, #52]	; (8012b34 <__libc_init_array+0x38>)
 8012b00:	4c0d      	ldr	r4, [pc, #52]	; (8012b38 <__libc_init_array+0x3c>)
 8012b02:	1ba4      	subs	r4, r4, r6
 8012b04:	10a4      	asrs	r4, r4, #2
 8012b06:	2500      	movs	r5, #0
 8012b08:	42a5      	cmp	r5, r4
 8012b0a:	d109      	bne.n	8012b20 <__libc_init_array+0x24>
 8012b0c:	4e0b      	ldr	r6, [pc, #44]	; (8012b3c <__libc_init_array+0x40>)
 8012b0e:	4c0c      	ldr	r4, [pc, #48]	; (8012b40 <__libc_init_array+0x44>)
 8012b10:	f000 fd7c 	bl	801360c <_init>
 8012b14:	1ba4      	subs	r4, r4, r6
 8012b16:	10a4      	asrs	r4, r4, #2
 8012b18:	2500      	movs	r5, #0
 8012b1a:	42a5      	cmp	r5, r4
 8012b1c:	d105      	bne.n	8012b2a <__libc_init_array+0x2e>
 8012b1e:	bd70      	pop	{r4, r5, r6, pc}
 8012b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012b24:	4798      	blx	r3
 8012b26:	3501      	adds	r5, #1
 8012b28:	e7ee      	b.n	8012b08 <__libc_init_array+0xc>
 8012b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012b2e:	4798      	blx	r3
 8012b30:	3501      	adds	r5, #1
 8012b32:	e7f2      	b.n	8012b1a <__libc_init_array+0x1e>
 8012b34:	080137d4 	.word	0x080137d4
 8012b38:	080137d4 	.word	0x080137d4
 8012b3c:	080137d4 	.word	0x080137d4
 8012b40:	080137d8 	.word	0x080137d8

08012b44 <memcpy>:
 8012b44:	b510      	push	{r4, lr}
 8012b46:	1e43      	subs	r3, r0, #1
 8012b48:	440a      	add	r2, r1
 8012b4a:	4291      	cmp	r1, r2
 8012b4c:	d100      	bne.n	8012b50 <memcpy+0xc>
 8012b4e:	bd10      	pop	{r4, pc}
 8012b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b58:	e7f7      	b.n	8012b4a <memcpy+0x6>

08012b5a <memset>:
 8012b5a:	4402      	add	r2, r0
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d100      	bne.n	8012b64 <memset+0xa>
 8012b62:	4770      	bx	lr
 8012b64:	f803 1b01 	strb.w	r1, [r3], #1
 8012b68:	e7f9      	b.n	8012b5e <memset+0x4>
	...

08012b6c <round>:
 8012b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b6e:	ec57 6b10 	vmov	r6, r7, d0
 8012b72:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8012b76:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8012b7a:	2c13      	cmp	r4, #19
 8012b7c:	463b      	mov	r3, r7
 8012b7e:	463d      	mov	r5, r7
 8012b80:	dc17      	bgt.n	8012bb2 <round+0x46>
 8012b82:	2c00      	cmp	r4, #0
 8012b84:	da09      	bge.n	8012b9a <round+0x2e>
 8012b86:	3401      	adds	r4, #1
 8012b88:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8012b8c:	d103      	bne.n	8012b96 <round+0x2a>
 8012b8e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012b92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012b96:	2100      	movs	r1, #0
 8012b98:	e02c      	b.n	8012bf4 <round+0x88>
 8012b9a:	4a18      	ldr	r2, [pc, #96]	; (8012bfc <round+0x90>)
 8012b9c:	4122      	asrs	r2, r4
 8012b9e:	4217      	tst	r7, r2
 8012ba0:	d100      	bne.n	8012ba4 <round+0x38>
 8012ba2:	b19e      	cbz	r6, 8012bcc <round+0x60>
 8012ba4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012ba8:	4123      	asrs	r3, r4
 8012baa:	442b      	add	r3, r5
 8012bac:	ea23 0302 	bic.w	r3, r3, r2
 8012bb0:	e7f1      	b.n	8012b96 <round+0x2a>
 8012bb2:	2c33      	cmp	r4, #51	; 0x33
 8012bb4:	dd0d      	ble.n	8012bd2 <round+0x66>
 8012bb6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012bba:	d107      	bne.n	8012bcc <round+0x60>
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	4639      	mov	r1, r7
 8012bc0:	ee10 2a10 	vmov	r2, s0
 8012bc4:	f7ed fb0a 	bl	80001dc <__adddf3>
 8012bc8:	4606      	mov	r6, r0
 8012bca:	460f      	mov	r7, r1
 8012bcc:	ec47 6b10 	vmov	d0, r6, r7
 8012bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bd2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8012bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bda:	40d0      	lsrs	r0, r2
 8012bdc:	4206      	tst	r6, r0
 8012bde:	d0f5      	beq.n	8012bcc <round+0x60>
 8012be0:	2201      	movs	r2, #1
 8012be2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8012be6:	fa02 f404 	lsl.w	r4, r2, r4
 8012bea:	1931      	adds	r1, r6, r4
 8012bec:	bf28      	it	cs
 8012bee:	189b      	addcs	r3, r3, r2
 8012bf0:	ea21 0100 	bic.w	r1, r1, r0
 8012bf4:	461f      	mov	r7, r3
 8012bf6:	460e      	mov	r6, r1
 8012bf8:	e7e8      	b.n	8012bcc <round+0x60>
 8012bfa:	bf00      	nop
 8012bfc:	000fffff 	.word	0x000fffff

08012c00 <powf>:
 8012c00:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012c04:	ed2d 8b04 	vpush	{d8-d9}
 8012c08:	4ca7      	ldr	r4, [pc, #668]	; (8012ea8 <powf+0x2a8>)
 8012c0a:	b08a      	sub	sp, #40	; 0x28
 8012c0c:	eef0 8a40 	vmov.f32	s17, s0
 8012c10:	eeb0 8a60 	vmov.f32	s16, s1
 8012c14:	f000 f958 	bl	8012ec8 <__ieee754_powf>
 8012c18:	f994 5000 	ldrsb.w	r5, [r4]
 8012c1c:	1c6b      	adds	r3, r5, #1
 8012c1e:	eeb0 9a40 	vmov.f32	s18, s0
 8012c22:	4626      	mov	r6, r4
 8012c24:	d05f      	beq.n	8012ce6 <powf+0xe6>
 8012c26:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2e:	d65a      	bvs.n	8012ce6 <powf+0xe6>
 8012c30:	eef4 8a68 	vcmp.f32	s17, s17
 8012c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c38:	d721      	bvc.n	8012c7e <powf+0x7e>
 8012c3a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c42:	d150      	bne.n	8012ce6 <powf+0xe6>
 8012c44:	2301      	movs	r3, #1
 8012c46:	9300      	str	r3, [sp, #0]
 8012c48:	4b98      	ldr	r3, [pc, #608]	; (8012eac <powf+0x2ac>)
 8012c4a:	9301      	str	r3, [sp, #4]
 8012c4c:	ee18 0a90 	vmov	r0, s17
 8012c50:	2300      	movs	r3, #0
 8012c52:	9308      	str	r3, [sp, #32]
 8012c54:	f7ed fc20 	bl	8000498 <__aeabi_f2d>
 8012c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c5c:	ee18 0a10 	vmov	r0, s16
 8012c60:	f7ed fc1a 	bl	8000498 <__aeabi_f2d>
 8012c64:	4b92      	ldr	r3, [pc, #584]	; (8012eb0 <powf+0x2b0>)
 8012c66:	2200      	movs	r2, #0
 8012c68:	2d02      	cmp	r5, #2
 8012c6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012c72:	d032      	beq.n	8012cda <powf+0xda>
 8012c74:	4668      	mov	r0, sp
 8012c76:	f000 fbea 	bl	801344e <matherr>
 8012c7a:	bb40      	cbnz	r0, 8012cce <powf+0xce>
 8012c7c:	e065      	b.n	8012d4a <powf+0x14a>
 8012c7e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8012eb4 <powf+0x2b4>
 8012c82:	eef4 8a69 	vcmp.f32	s17, s19
 8012c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c8a:	d163      	bne.n	8012d54 <powf+0x154>
 8012c8c:	eeb4 8a69 	vcmp.f32	s16, s19
 8012c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c94:	d12e      	bne.n	8012cf4 <powf+0xf4>
 8012c96:	2301      	movs	r3, #1
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	4b84      	ldr	r3, [pc, #528]	; (8012eac <powf+0x2ac>)
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	ee18 0a90 	vmov	r0, s17
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	9308      	str	r3, [sp, #32]
 8012ca6:	f7ed fbf7 	bl	8000498 <__aeabi_f2d>
 8012caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cae:	ee18 0a10 	vmov	r0, s16
 8012cb2:	f7ed fbf1 	bl	8000498 <__aeabi_f2d>
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	2300      	movs	r3, #0
 8012cba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012cbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012cc2:	2d00      	cmp	r5, #0
 8012cc4:	d0d6      	beq.n	8012c74 <powf+0x74>
 8012cc6:	4b7a      	ldr	r3, [pc, #488]	; (8012eb0 <powf+0x2b0>)
 8012cc8:	2200      	movs	r2, #0
 8012cca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012cce:	9b08      	ldr	r3, [sp, #32]
 8012cd0:	b11b      	cbz	r3, 8012cda <powf+0xda>
 8012cd2:	f7ff ff0d 	bl	8012af0 <__errno>
 8012cd6:	9b08      	ldr	r3, [sp, #32]
 8012cd8:	6003      	str	r3, [r0, #0]
 8012cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012cde:	f7ed fc53 	bl	8000588 <__aeabi_d2f>
 8012ce2:	ee09 0a10 	vmov	s18, r0
 8012ce6:	eeb0 0a49 	vmov.f32	s0, s18
 8012cea:	b00a      	add	sp, #40	; 0x28
 8012cec:	ecbd 8b04 	vpop	{d8-d9}
 8012cf0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8012cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8012cf8:	f000 fbb2 	bl	8013460 <finitef>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	d0f2      	beq.n	8012ce6 <powf+0xe6>
 8012d00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d08:	d5ed      	bpl.n	8012ce6 <powf+0xe6>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	9300      	str	r3, [sp, #0]
 8012d0e:	4b67      	ldr	r3, [pc, #412]	; (8012eac <powf+0x2ac>)
 8012d10:	9301      	str	r3, [sp, #4]
 8012d12:	ee18 0a90 	vmov	r0, s17
 8012d16:	2300      	movs	r3, #0
 8012d18:	9308      	str	r3, [sp, #32]
 8012d1a:	f7ed fbbd 	bl	8000498 <__aeabi_f2d>
 8012d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d22:	ee18 0a10 	vmov	r0, s16
 8012d26:	f7ed fbb7 	bl	8000498 <__aeabi_f2d>
 8012d2a:	f994 3000 	ldrsb.w	r3, [r4]
 8012d2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d32:	b923      	cbnz	r3, 8012d3e <powf+0x13e>
 8012d34:	2200      	movs	r2, #0
 8012d36:	2300      	movs	r3, #0
 8012d38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012d3c:	e79a      	b.n	8012c74 <powf+0x74>
 8012d3e:	495e      	ldr	r1, [pc, #376]	; (8012eb8 <powf+0x2b8>)
 8012d40:	2000      	movs	r0, #0
 8012d42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d46:	2b02      	cmp	r3, #2
 8012d48:	d194      	bne.n	8012c74 <powf+0x74>
 8012d4a:	f7ff fed1 	bl	8012af0 <__errno>
 8012d4e:	2321      	movs	r3, #33	; 0x21
 8012d50:	6003      	str	r3, [r0, #0]
 8012d52:	e7bc      	b.n	8012cce <powf+0xce>
 8012d54:	f000 fb84 	bl	8013460 <finitef>
 8012d58:	4605      	mov	r5, r0
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	d173      	bne.n	8012e46 <powf+0x246>
 8012d5e:	eeb0 0a68 	vmov.f32	s0, s17
 8012d62:	f000 fb7d 	bl	8013460 <finitef>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d06d      	beq.n	8012e46 <powf+0x246>
 8012d6a:	eeb0 0a48 	vmov.f32	s0, s16
 8012d6e:	f000 fb77 	bl	8013460 <finitef>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	d067      	beq.n	8012e46 <powf+0x246>
 8012d76:	ee18 0a90 	vmov	r0, s17
 8012d7a:	f7ed fb8d 	bl	8000498 <__aeabi_f2d>
 8012d7e:	4680      	mov	r8, r0
 8012d80:	ee18 0a10 	vmov	r0, s16
 8012d84:	4689      	mov	r9, r1
 8012d86:	f7ed fb87 	bl	8000498 <__aeabi_f2d>
 8012d8a:	eeb4 9a49 	vcmp.f32	s18, s18
 8012d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d92:	f994 4000 	ldrsb.w	r4, [r4]
 8012d96:	4b45      	ldr	r3, [pc, #276]	; (8012eac <powf+0x2ac>)
 8012d98:	d713      	bvc.n	8012dc2 <powf+0x1c2>
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8012da0:	9508      	str	r5, [sp, #32]
 8012da2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012da6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012daa:	2c00      	cmp	r4, #0
 8012dac:	d0c2      	beq.n	8012d34 <powf+0x134>
 8012dae:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8012db2:	ee17 0a90 	vmov	r0, s15
 8012db6:	f7ed fb6f 	bl	8000498 <__aeabi_f2d>
 8012dba:	2c02      	cmp	r4, #2
 8012dbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012dc0:	e7c2      	b.n	8012d48 <powf+0x148>
 8012dc2:	2203      	movs	r2, #3
 8012dc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012dc8:	e9cd 2300 	strd	r2, r3, [sp]
 8012dcc:	9508      	str	r5, [sp, #32]
 8012dce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012dd6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012dda:	b9fc      	cbnz	r4, 8012e1c <powf+0x21c>
 8012ddc:	4b37      	ldr	r3, [pc, #220]	; (8012ebc <powf+0x2bc>)
 8012dde:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8012de2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012dee:	d553      	bpl.n	8012e98 <powf+0x298>
 8012df0:	eeb0 0a48 	vmov.f32	s0, s16
 8012df4:	f000 fb44 	bl	8013480 <rintf>
 8012df8:	eeb4 0a48 	vcmp.f32	s0, s16
 8012dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e00:	d004      	beq.n	8012e0c <powf+0x20c>
 8012e02:	4b2f      	ldr	r3, [pc, #188]	; (8012ec0 <powf+0x2c0>)
 8012e04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012e08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012e0c:	f996 3000 	ldrsb.w	r3, [r6]
 8012e10:	2b02      	cmp	r3, #2
 8012e12:	d141      	bne.n	8012e98 <powf+0x298>
 8012e14:	f7ff fe6c 	bl	8012af0 <__errno>
 8012e18:	2322      	movs	r3, #34	; 0x22
 8012e1a:	e799      	b.n	8012d50 <powf+0x150>
 8012e1c:	4b29      	ldr	r3, [pc, #164]	; (8012ec4 <powf+0x2c4>)
 8012e1e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8012e22:	2200      	movs	r2, #0
 8012e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012e2c:	d5ee      	bpl.n	8012e0c <powf+0x20c>
 8012e2e:	eeb0 0a48 	vmov.f32	s0, s16
 8012e32:	f000 fb25 	bl	8013480 <rintf>
 8012e36:	eeb4 0a48 	vcmp.f32	s0, s16
 8012e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e3e:	d0e5      	beq.n	8012e0c <powf+0x20c>
 8012e40:	2200      	movs	r2, #0
 8012e42:	4b1d      	ldr	r3, [pc, #116]	; (8012eb8 <powf+0x2b8>)
 8012e44:	e7e0      	b.n	8012e08 <powf+0x208>
 8012e46:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4e:	f47f af4a 	bne.w	8012ce6 <powf+0xe6>
 8012e52:	eeb0 0a68 	vmov.f32	s0, s17
 8012e56:	f000 fb03 	bl	8013460 <finitef>
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	f43f af43 	beq.w	8012ce6 <powf+0xe6>
 8012e60:	eeb0 0a48 	vmov.f32	s0, s16
 8012e64:	f000 fafc 	bl	8013460 <finitef>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	f43f af3c 	beq.w	8012ce6 <powf+0xe6>
 8012e6e:	2304      	movs	r3, #4
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	4b0e      	ldr	r3, [pc, #56]	; (8012eac <powf+0x2ac>)
 8012e74:	9301      	str	r3, [sp, #4]
 8012e76:	ee18 0a90 	vmov	r0, s17
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	9308      	str	r3, [sp, #32]
 8012e7e:	f7ed fb0b 	bl	8000498 <__aeabi_f2d>
 8012e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e86:	ee18 0a10 	vmov	r0, s16
 8012e8a:	f7ed fb05 	bl	8000498 <__aeabi_f2d>
 8012e8e:	2200      	movs	r2, #0
 8012e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e94:	2300      	movs	r3, #0
 8012e96:	e7b7      	b.n	8012e08 <powf+0x208>
 8012e98:	4668      	mov	r0, sp
 8012e9a:	f000 fad8 	bl	801344e <matherr>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	f47f af15 	bne.w	8012cce <powf+0xce>
 8012ea4:	e7b6      	b.n	8012e14 <powf+0x214>
 8012ea6:	bf00      	nop
 8012ea8:	200004a0 	.word	0x200004a0
 8012eac:	080137a4 	.word	0x080137a4
 8012eb0:	3ff00000 	.word	0x3ff00000
 8012eb4:	00000000 	.word	0x00000000
 8012eb8:	fff00000 	.word	0xfff00000
 8012ebc:	47efffff 	.word	0x47efffff
 8012ec0:	c7efffff 	.word	0xc7efffff
 8012ec4:	7ff00000 	.word	0x7ff00000

08012ec8 <__ieee754_powf>:
 8012ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ecc:	ee10 5a90 	vmov	r5, s1
 8012ed0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8012ed4:	ed2d 8b02 	vpush	{d8}
 8012ed8:	eeb0 8a40 	vmov.f32	s16, s0
 8012edc:	eef0 8a60 	vmov.f32	s17, s1
 8012ee0:	f000 8293 	beq.w	801340a <__ieee754_powf+0x542>
 8012ee4:	ee10 8a10 	vmov	r8, s0
 8012ee8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8012eec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012ef0:	dc06      	bgt.n	8012f00 <__ieee754_powf+0x38>
 8012ef2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8012ef6:	dd0a      	ble.n	8012f0e <__ieee754_powf+0x46>
 8012ef8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012efc:	f000 8285 	beq.w	801340a <__ieee754_powf+0x542>
 8012f00:	ecbd 8b02 	vpop	{d8}
 8012f04:	48d9      	ldr	r0, [pc, #868]	; (801326c <__ieee754_powf+0x3a4>)
 8012f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0a:	f000 bab3 	b.w	8013474 <nanf>
 8012f0e:	f1b8 0f00 	cmp.w	r8, #0
 8012f12:	da1d      	bge.n	8012f50 <__ieee754_powf+0x88>
 8012f14:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8012f18:	da2c      	bge.n	8012f74 <__ieee754_powf+0xac>
 8012f1a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8012f1e:	db30      	blt.n	8012f82 <__ieee754_powf+0xba>
 8012f20:	15fb      	asrs	r3, r7, #23
 8012f22:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012f26:	fa47 f603 	asr.w	r6, r7, r3
 8012f2a:	fa06 f303 	lsl.w	r3, r6, r3
 8012f2e:	42bb      	cmp	r3, r7
 8012f30:	d127      	bne.n	8012f82 <__ieee754_powf+0xba>
 8012f32:	f006 0601 	and.w	r6, r6, #1
 8012f36:	f1c6 0602 	rsb	r6, r6, #2
 8012f3a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8012f3e:	d122      	bne.n	8012f86 <__ieee754_powf+0xbe>
 8012f40:	2d00      	cmp	r5, #0
 8012f42:	f280 8268 	bge.w	8013416 <__ieee754_powf+0x54e>
 8012f46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f4a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012f4e:	e00d      	b.n	8012f6c <__ieee754_powf+0xa4>
 8012f50:	2600      	movs	r6, #0
 8012f52:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8012f56:	d1f0      	bne.n	8012f3a <__ieee754_powf+0x72>
 8012f58:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012f5c:	f000 8255 	beq.w	801340a <__ieee754_powf+0x542>
 8012f60:	dd0a      	ble.n	8012f78 <__ieee754_powf+0xb0>
 8012f62:	2d00      	cmp	r5, #0
 8012f64:	f280 8254 	bge.w	8013410 <__ieee754_powf+0x548>
 8012f68:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013270 <__ieee754_powf+0x3a8>
 8012f6c:	ecbd 8b02 	vpop	{d8}
 8012f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f74:	2602      	movs	r6, #2
 8012f76:	e7ec      	b.n	8012f52 <__ieee754_powf+0x8a>
 8012f78:	2d00      	cmp	r5, #0
 8012f7a:	daf5      	bge.n	8012f68 <__ieee754_powf+0xa0>
 8012f7c:	eeb1 0a68 	vneg.f32	s0, s17
 8012f80:	e7f4      	b.n	8012f6c <__ieee754_powf+0xa4>
 8012f82:	2600      	movs	r6, #0
 8012f84:	e7d9      	b.n	8012f3a <__ieee754_powf+0x72>
 8012f86:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8012f8a:	d102      	bne.n	8012f92 <__ieee754_powf+0xca>
 8012f8c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012f90:	e7ec      	b.n	8012f6c <__ieee754_powf+0xa4>
 8012f92:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8012f96:	eeb0 0a48 	vmov.f32	s0, s16
 8012f9a:	d108      	bne.n	8012fae <__ieee754_powf+0xe6>
 8012f9c:	f1b8 0f00 	cmp.w	r8, #0
 8012fa0:	db05      	blt.n	8012fae <__ieee754_powf+0xe6>
 8012fa2:	ecbd 8b02 	vpop	{d8}
 8012fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012faa:	f000 ba4d 	b.w	8013448 <__ieee754_sqrtf>
 8012fae:	f000 fa50 	bl	8013452 <fabsf>
 8012fb2:	b124      	cbz	r4, 8012fbe <__ieee754_powf+0xf6>
 8012fb4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8012fb8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012fbc:	d117      	bne.n	8012fee <__ieee754_powf+0x126>
 8012fbe:	2d00      	cmp	r5, #0
 8012fc0:	bfbc      	itt	lt
 8012fc2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012fc6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012fca:	f1b8 0f00 	cmp.w	r8, #0
 8012fce:	dacd      	bge.n	8012f6c <__ieee754_powf+0xa4>
 8012fd0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8012fd4:	ea54 0306 	orrs.w	r3, r4, r6
 8012fd8:	d104      	bne.n	8012fe4 <__ieee754_powf+0x11c>
 8012fda:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012fde:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012fe2:	e7c3      	b.n	8012f6c <__ieee754_powf+0xa4>
 8012fe4:	2e01      	cmp	r6, #1
 8012fe6:	d1c1      	bne.n	8012f6c <__ieee754_powf+0xa4>
 8012fe8:	eeb1 0a40 	vneg.f32	s0, s0
 8012fec:	e7be      	b.n	8012f6c <__ieee754_powf+0xa4>
 8012fee:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8012ff2:	3801      	subs	r0, #1
 8012ff4:	ea56 0300 	orrs.w	r3, r6, r0
 8012ff8:	d104      	bne.n	8013004 <__ieee754_powf+0x13c>
 8012ffa:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012ffe:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013002:	e7b3      	b.n	8012f6c <__ieee754_powf+0xa4>
 8013004:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8013008:	dd6d      	ble.n	80130e6 <__ieee754_powf+0x21e>
 801300a:	4b9a      	ldr	r3, [pc, #616]	; (8013274 <__ieee754_powf+0x3ac>)
 801300c:	429c      	cmp	r4, r3
 801300e:	dc06      	bgt.n	801301e <__ieee754_powf+0x156>
 8013010:	2d00      	cmp	r5, #0
 8013012:	daa9      	bge.n	8012f68 <__ieee754_powf+0xa0>
 8013014:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8013278 <__ieee754_powf+0x3b0>
 8013018:	ee20 0a00 	vmul.f32	s0, s0, s0
 801301c:	e7a6      	b.n	8012f6c <__ieee754_powf+0xa4>
 801301e:	4b97      	ldr	r3, [pc, #604]	; (801327c <__ieee754_powf+0x3b4>)
 8013020:	429c      	cmp	r4, r3
 8013022:	dd02      	ble.n	801302a <__ieee754_powf+0x162>
 8013024:	2d00      	cmp	r5, #0
 8013026:	dcf5      	bgt.n	8013014 <__ieee754_powf+0x14c>
 8013028:	e79e      	b.n	8012f68 <__ieee754_powf+0xa0>
 801302a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801302e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013032:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8013280 <__ieee754_powf+0x3b8>
 8013036:	eef1 6a40 	vneg.f32	s13, s0
 801303a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801303e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013042:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013046:	eee7 7a40 	vfms.f32	s15, s14, s0
 801304a:	ee60 0a00 	vmul.f32	s1, s0, s0
 801304e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8013284 <__ieee754_powf+0x3bc>
 8013052:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013056:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8013288 <__ieee754_powf+0x3c0>
 801305a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801305e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013062:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801328c <__ieee754_powf+0x3c4>
 8013066:	eeb0 6a67 	vmov.f32	s12, s15
 801306a:	eea0 6a07 	vfma.f32	s12, s0, s14
 801306e:	ee16 3a10 	vmov	r3, s12
 8013072:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013076:	f023 030f 	bic.w	r3, r3, #15
 801307a:	ee00 3a90 	vmov	s1, r3
 801307e:	eee6 0a87 	vfma.f32	s1, s13, s14
 8013082:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013086:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801308a:	f025 050f 	bic.w	r5, r5, #15
 801308e:	ee07 5a10 	vmov	s14, r5
 8013092:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013096:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801309a:	ee07 3a90 	vmov	s15, r3
 801309e:	eee7 0a27 	vfma.f32	s1, s14, s15
 80130a2:	3e01      	subs	r6, #1
 80130a4:	ea56 0200 	orrs.w	r2, r6, r0
 80130a8:	ee07 5a10 	vmov	s14, r5
 80130ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80130b4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80130b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80130bc:	ee17 4a10 	vmov	r4, s14
 80130c0:	bf08      	it	eq
 80130c2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80130c6:	2c00      	cmp	r4, #0
 80130c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80130cc:	f340 8184 	ble.w	80133d8 <__ieee754_powf+0x510>
 80130d0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80130d4:	f340 80fc 	ble.w	80132d0 <__ieee754_powf+0x408>
 80130d8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8013278 <__ieee754_powf+0x3b0>
 80130dc:	ee28 0a27 	vmul.f32	s0, s16, s15
 80130e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80130e4:	e742      	b.n	8012f6c <__ieee754_powf+0xa4>
 80130e6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80130ea:	bfbf      	itttt	lt
 80130ec:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8013290 <__ieee754_powf+0x3c8>
 80130f0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80130f4:	f06f 0217 	mvnlt.w	r2, #23
 80130f8:	ee17 4a90 	vmovlt	r4, s15
 80130fc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8013100:	bfa8      	it	ge
 8013102:	2200      	movge	r2, #0
 8013104:	3b7f      	subs	r3, #127	; 0x7f
 8013106:	4413      	add	r3, r2
 8013108:	4a62      	ldr	r2, [pc, #392]	; (8013294 <__ieee754_powf+0x3cc>)
 801310a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801310e:	4294      	cmp	r4, r2
 8013110:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8013114:	dd06      	ble.n	8013124 <__ieee754_powf+0x25c>
 8013116:	4a60      	ldr	r2, [pc, #384]	; (8013298 <__ieee754_powf+0x3d0>)
 8013118:	4294      	cmp	r4, r2
 801311a:	f340 80a5 	ble.w	8013268 <__ieee754_powf+0x3a0>
 801311e:	3301      	adds	r3, #1
 8013120:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013124:	2400      	movs	r4, #0
 8013126:	4a5d      	ldr	r2, [pc, #372]	; (801329c <__ieee754_powf+0x3d4>)
 8013128:	00a7      	lsls	r7, r4, #2
 801312a:	443a      	add	r2, r7
 801312c:	ee07 1a90 	vmov	s15, r1
 8013130:	ed92 7a00 	vldr	s14, [r2]
 8013134:	4a5a      	ldr	r2, [pc, #360]	; (80132a0 <__ieee754_powf+0x3d8>)
 8013136:	ee37 6a27 	vadd.f32	s12, s14, s15
 801313a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801313e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8013142:	1049      	asrs	r1, r1, #1
 8013144:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013148:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801314c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8013150:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8013154:	ee06 1a10 	vmov	s12, r1
 8013158:	ee65 4aa6 	vmul.f32	s9, s11, s13
 801315c:	ee14 ca90 	vmov	ip, s9
 8013160:	ea02 0c0c 	and.w	ip, r2, ip
 8013164:	ee05 ca10 	vmov	s10, ip
 8013168:	eeb1 4a45 	vneg.f32	s8, s10
 801316c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8013170:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013174:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80132a4 <__ieee754_powf+0x3dc>
 8013178:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801317c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013180:	eee4 5a06 	vfma.f32	s11, s8, s12
 8013184:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8013188:	ee25 6aa6 	vmul.f32	s12, s11, s13
 801318c:	eddf 5a46 	vldr	s11, [pc, #280]	; 80132a8 <__ieee754_powf+0x3e0>
 8013190:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013194:	eddf 5a45 	vldr	s11, [pc, #276]	; 80132ac <__ieee754_powf+0x3e4>
 8013198:	eee7 5a27 	vfma.f32	s11, s14, s15
 801319c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013280 <__ieee754_powf+0x3b8>
 80131a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80131a4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80132b0 <__ieee754_powf+0x3e8>
 80131a8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80131ac:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80132b4 <__ieee754_powf+0x3ec>
 80131b0:	ee75 6a24 	vadd.f32	s13, s10, s9
 80131b4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80131b8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80131bc:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80131c0:	eef0 7a65 	vmov.f32	s15, s11
 80131c4:	eee3 6a87 	vfma.f32	s13, s7, s14
 80131c8:	eee5 7a05 	vfma.f32	s15, s10, s10
 80131cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131d0:	ee17 1a90 	vmov	r1, s15
 80131d4:	4011      	ands	r1, r2
 80131d6:	ee07 1a90 	vmov	s15, r1
 80131da:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80131de:	eddf 5a36 	vldr	s11, [pc, #216]	; 80132b8 <__ieee754_powf+0x3f0>
 80131e2:	eea4 7a05 	vfma.f32	s14, s8, s10
 80131e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80131ea:	ee27 7a24 	vmul.f32	s14, s14, s9
 80131ee:	eea7 7a86 	vfma.f32	s14, s15, s12
 80131f2:	eeb0 6a47 	vmov.f32	s12, s14
 80131f6:	eea5 6a27 	vfma.f32	s12, s10, s15
 80131fa:	ee16 1a10 	vmov	r1, s12
 80131fe:	4011      	ands	r1, r2
 8013200:	ee06 1a90 	vmov	s13, r1
 8013204:	eee4 6a27 	vfma.f32	s13, s8, s15
 8013208:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80132bc <__ieee754_powf+0x3f4>
 801320c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013210:	ee06 1a10 	vmov	s12, r1
 8013214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013218:	eddf 7a29 	vldr	s15, [pc, #164]	; 80132c0 <__ieee754_powf+0x3f8>
 801321c:	4929      	ldr	r1, [pc, #164]	; (80132c4 <__ieee754_powf+0x3fc>)
 801321e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013222:	4439      	add	r1, r7
 8013224:	edd1 7a00 	vldr	s15, [r1]
 8013228:	ee37 7a27 	vadd.f32	s14, s14, s15
 801322c:	ee07 3a90 	vmov	s15, r3
 8013230:	eef0 0a47 	vmov.f32	s1, s14
 8013234:	4b24      	ldr	r3, [pc, #144]	; (80132c8 <__ieee754_powf+0x400>)
 8013236:	eee6 0a25 	vfma.f32	s1, s12, s11
 801323a:	443b      	add	r3, r7
 801323c:	ed93 5a00 	vldr	s10, [r3]
 8013240:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013244:	ee70 0a85 	vadd.f32	s1, s1, s10
 8013248:	ee70 7aa6 	vadd.f32	s15, s1, s13
 801324c:	ee17 3a90 	vmov	r3, s15
 8013250:	4013      	ands	r3, r2
 8013252:	ee07 3a90 	vmov	s15, r3
 8013256:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801325a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801325e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8013262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013266:	e70e      	b.n	8013086 <__ieee754_powf+0x1be>
 8013268:	2401      	movs	r4, #1
 801326a:	e75c      	b.n	8013126 <__ieee754_powf+0x25e>
 801326c:	080137a8 	.word	0x080137a8
 8013270:	00000000 	.word	0x00000000
 8013274:	3f7ffff7 	.word	0x3f7ffff7
 8013278:	7149f2ca 	.word	0x7149f2ca
 801327c:	3f800007 	.word	0x3f800007
 8013280:	3eaaaaab 	.word	0x3eaaaaab
 8013284:	36eca570 	.word	0x36eca570
 8013288:	3fb8aa3b 	.word	0x3fb8aa3b
 801328c:	3fb8aa00 	.word	0x3fb8aa00
 8013290:	4b800000 	.word	0x4b800000
 8013294:	001cc471 	.word	0x001cc471
 8013298:	005db3d6 	.word	0x005db3d6
 801329c:	080137ac 	.word	0x080137ac
 80132a0:	fffff000 	.word	0xfffff000
 80132a4:	3e6c3255 	.word	0x3e6c3255
 80132a8:	3e53f142 	.word	0x3e53f142
 80132ac:	3e8ba305 	.word	0x3e8ba305
 80132b0:	3edb6db7 	.word	0x3edb6db7
 80132b4:	3f19999a 	.word	0x3f19999a
 80132b8:	3f763800 	.word	0x3f763800
 80132bc:	3f76384f 	.word	0x3f76384f
 80132c0:	369dc3a0 	.word	0x369dc3a0
 80132c4:	080137bc 	.word	0x080137bc
 80132c8:	080137b4 	.word	0x080137b4
 80132cc:	3338aa3c 	.word	0x3338aa3c
 80132d0:	f040 8092 	bne.w	80133f8 <__ieee754_powf+0x530>
 80132d4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80132cc <__ieee754_powf+0x404>
 80132d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80132dc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80132e0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80132e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e8:	f73f aef6 	bgt.w	80130d8 <__ieee754_powf+0x210>
 80132ec:	15db      	asrs	r3, r3, #23
 80132ee:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80132f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80132f6:	4103      	asrs	r3, r0
 80132f8:	4423      	add	r3, r4
 80132fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80132fe:	4947      	ldr	r1, [pc, #284]	; (801341c <__ieee754_powf+0x554>)
 8013300:	3a7f      	subs	r2, #127	; 0x7f
 8013302:	4111      	asrs	r1, r2
 8013304:	ea23 0101 	bic.w	r1, r3, r1
 8013308:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801330c:	ee07 1a10 	vmov	s14, r1
 8013310:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013314:	f1c2 0217 	rsb	r2, r2, #23
 8013318:	4110      	asrs	r0, r2
 801331a:	2c00      	cmp	r4, #0
 801331c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013320:	bfb8      	it	lt
 8013322:	4240      	neglt	r0, r0
 8013324:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013328:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013420 <__ieee754_powf+0x558>
 801332c:	ee17 3a10 	vmov	r3, s14
 8013330:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013334:	f023 030f 	bic.w	r3, r3, #15
 8013338:	ee07 3a10 	vmov	s14, r3
 801333c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013340:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013344:	eddf 7a37 	vldr	s15, [pc, #220]	; 8013424 <__ieee754_powf+0x55c>
 8013348:	ee67 7a27 	vmul.f32	s15, s14, s15
 801334c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013350:	eddf 6a35 	vldr	s13, [pc, #212]	; 8013428 <__ieee754_powf+0x560>
 8013354:	eeb0 0a67 	vmov.f32	s0, s15
 8013358:	eea7 0a26 	vfma.f32	s0, s14, s13
 801335c:	eeb0 6a40 	vmov.f32	s12, s0
 8013360:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013364:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013368:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801336c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801342c <__ieee754_powf+0x564>
 8013370:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013430 <__ieee754_powf+0x568>
 8013374:	eea7 6a26 	vfma.f32	s12, s14, s13
 8013378:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013434 <__ieee754_powf+0x56c>
 801337c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013380:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8013438 <__ieee754_powf+0x570>
 8013384:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013388:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801343c <__ieee754_powf+0x574>
 801338c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013390:	eeb0 6a40 	vmov.f32	s12, s0
 8013394:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013398:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801339c:	eeb0 7a46 	vmov.f32	s14, s12
 80133a0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80133a4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80133a8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80133ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80133b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80133b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80133bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80133c0:	ee10 3a10 	vmov	r3, s0
 80133c4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80133c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80133cc:	da1a      	bge.n	8013404 <__ieee754_powf+0x53c>
 80133ce:	f000 f8b1 	bl	8013534 <scalbnf>
 80133d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80133d6:	e5c9      	b.n	8012f6c <__ieee754_powf+0xa4>
 80133d8:	4a19      	ldr	r2, [pc, #100]	; (8013440 <__ieee754_powf+0x578>)
 80133da:	4293      	cmp	r3, r2
 80133dc:	dd02      	ble.n	80133e4 <__ieee754_powf+0x51c>
 80133de:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013444 <__ieee754_powf+0x57c>
 80133e2:	e67b      	b.n	80130dc <__ieee754_powf+0x214>
 80133e4:	d108      	bne.n	80133f8 <__ieee754_powf+0x530>
 80133e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133ea:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80133ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f2:	f6ff af7b 	blt.w	80132ec <__ieee754_powf+0x424>
 80133f6:	e7f2      	b.n	80133de <__ieee754_powf+0x516>
 80133f8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80133fc:	f73f af76 	bgt.w	80132ec <__ieee754_powf+0x424>
 8013400:	2000      	movs	r0, #0
 8013402:	e78f      	b.n	8013324 <__ieee754_powf+0x45c>
 8013404:	ee00 3a10 	vmov	s0, r3
 8013408:	e7e3      	b.n	80133d2 <__ieee754_powf+0x50a>
 801340a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801340e:	e5ad      	b.n	8012f6c <__ieee754_powf+0xa4>
 8013410:	eeb0 0a68 	vmov.f32	s0, s17
 8013414:	e5aa      	b.n	8012f6c <__ieee754_powf+0xa4>
 8013416:	eeb0 0a48 	vmov.f32	s0, s16
 801341a:	e5a7      	b.n	8012f6c <__ieee754_powf+0xa4>
 801341c:	007fffff 	.word	0x007fffff
 8013420:	3f317218 	.word	0x3f317218
 8013424:	35bfbe8c 	.word	0x35bfbe8c
 8013428:	3f317200 	.word	0x3f317200
 801342c:	3331bb4c 	.word	0x3331bb4c
 8013430:	b5ddea0e 	.word	0xb5ddea0e
 8013434:	388ab355 	.word	0x388ab355
 8013438:	bb360b61 	.word	0xbb360b61
 801343c:	3e2aaaab 	.word	0x3e2aaaab
 8013440:	43160000 	.word	0x43160000
 8013444:	0da24260 	.word	0x0da24260

08013448 <__ieee754_sqrtf>:
 8013448:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801344c:	4770      	bx	lr

0801344e <matherr>:
 801344e:	2000      	movs	r0, #0
 8013450:	4770      	bx	lr

08013452 <fabsf>:
 8013452:	ee10 3a10 	vmov	r3, s0
 8013456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801345a:	ee00 3a10 	vmov	s0, r3
 801345e:	4770      	bx	lr

08013460 <finitef>:
 8013460:	ee10 3a10 	vmov	r3, s0
 8013464:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8013468:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801346c:	bfac      	ite	ge
 801346e:	2000      	movge	r0, #0
 8013470:	2001      	movlt	r0, #1
 8013472:	4770      	bx	lr

08013474 <nanf>:
 8013474:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801347c <nanf+0x8>
 8013478:	4770      	bx	lr
 801347a:	bf00      	nop
 801347c:	7fc00000 	.word	0x7fc00000

08013480 <rintf>:
 8013480:	b513      	push	{r0, r1, r4, lr}
 8013482:	ee10 1a10 	vmov	r1, s0
 8013486:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801348a:	0ddc      	lsrs	r4, r3, #23
 801348c:	3c7f      	subs	r4, #127	; 0x7f
 801348e:	2c16      	cmp	r4, #22
 8013490:	dc46      	bgt.n	8013520 <rintf+0xa0>
 8013492:	b32b      	cbz	r3, 80134e0 <rintf+0x60>
 8013494:	2c00      	cmp	r4, #0
 8013496:	ee10 2a10 	vmov	r2, s0
 801349a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801349e:	da21      	bge.n	80134e4 <rintf+0x64>
 80134a0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80134a4:	425b      	negs	r3, r3
 80134a6:	4a21      	ldr	r2, [pc, #132]	; (801352c <rintf+0xac>)
 80134a8:	0a5b      	lsrs	r3, r3, #9
 80134aa:	0d09      	lsrs	r1, r1, #20
 80134ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80134b0:	0509      	lsls	r1, r1, #20
 80134b2:	430b      	orrs	r3, r1
 80134b4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80134b8:	ee07 3a90 	vmov	s15, r3
 80134bc:	edd2 6a00 	vldr	s13, [r2]
 80134c0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80134c4:	ed8d 7a01 	vstr	s14, [sp, #4]
 80134c8:	eddd 7a01 	vldr	s15, [sp, #4]
 80134cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80134d0:	ee17 3a90 	vmov	r3, s15
 80134d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80134d8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80134dc:	ee00 3a10 	vmov	s0, r3
 80134e0:	b002      	add	sp, #8
 80134e2:	bd10      	pop	{r4, pc}
 80134e4:	4b12      	ldr	r3, [pc, #72]	; (8013530 <rintf+0xb0>)
 80134e6:	4123      	asrs	r3, r4
 80134e8:	4219      	tst	r1, r3
 80134ea:	d0f9      	beq.n	80134e0 <rintf+0x60>
 80134ec:	085b      	lsrs	r3, r3, #1
 80134ee:	4219      	tst	r1, r3
 80134f0:	d006      	beq.n	8013500 <rintf+0x80>
 80134f2:	ea21 0203 	bic.w	r2, r1, r3
 80134f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80134fa:	fa43 f404 	asr.w	r4, r3, r4
 80134fe:	4322      	orrs	r2, r4
 8013500:	4b0a      	ldr	r3, [pc, #40]	; (801352c <rintf+0xac>)
 8013502:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013506:	ed90 7a00 	vldr	s14, [r0]
 801350a:	ee07 2a90 	vmov	s15, r2
 801350e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013512:	edcd 7a01 	vstr	s15, [sp, #4]
 8013516:	ed9d 0a01 	vldr	s0, [sp, #4]
 801351a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801351e:	e7df      	b.n	80134e0 <rintf+0x60>
 8013520:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013524:	d3dc      	bcc.n	80134e0 <rintf+0x60>
 8013526:	ee30 0a00 	vadd.f32	s0, s0, s0
 801352a:	e7d9      	b.n	80134e0 <rintf+0x60>
 801352c:	080137c4 	.word	0x080137c4
 8013530:	007fffff 	.word	0x007fffff

08013534 <scalbnf>:
 8013534:	b508      	push	{r3, lr}
 8013536:	ee10 2a10 	vmov	r2, s0
 801353a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801353e:	ed2d 8b02 	vpush	{d8}
 8013542:	eef0 0a40 	vmov.f32	s1, s0
 8013546:	d004      	beq.n	8013552 <scalbnf+0x1e>
 8013548:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801354c:	d306      	bcc.n	801355c <scalbnf+0x28>
 801354e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8013552:	ecbd 8b02 	vpop	{d8}
 8013556:	eeb0 0a60 	vmov.f32	s0, s1
 801355a:	bd08      	pop	{r3, pc}
 801355c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013560:	d21c      	bcs.n	801359c <scalbnf+0x68>
 8013562:	4b1f      	ldr	r3, [pc, #124]	; (80135e0 <scalbnf+0xac>)
 8013564:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80135e4 <scalbnf+0xb0>
 8013568:	4298      	cmp	r0, r3
 801356a:	ee60 0a27 	vmul.f32	s1, s0, s15
 801356e:	db10      	blt.n	8013592 <scalbnf+0x5e>
 8013570:	ee10 2a90 	vmov	r2, s1
 8013574:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8013578:	3b19      	subs	r3, #25
 801357a:	4403      	add	r3, r0
 801357c:	2bfe      	cmp	r3, #254	; 0xfe
 801357e:	dd0f      	ble.n	80135a0 <scalbnf+0x6c>
 8013580:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80135e8 <scalbnf+0xb4>
 8013584:	eeb0 0a48 	vmov.f32	s0, s16
 8013588:	f000 f834 	bl	80135f4 <copysignf>
 801358c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8013590:	e7df      	b.n	8013552 <scalbnf+0x1e>
 8013592:	eddf 7a16 	vldr	s15, [pc, #88]	; 80135ec <scalbnf+0xb8>
 8013596:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801359a:	e7da      	b.n	8013552 <scalbnf+0x1e>
 801359c:	0ddb      	lsrs	r3, r3, #23
 801359e:	e7ec      	b.n	801357a <scalbnf+0x46>
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	dd06      	ble.n	80135b2 <scalbnf+0x7e>
 80135a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80135a8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80135ac:	ee00 3a90 	vmov	s1, r3
 80135b0:	e7cf      	b.n	8013552 <scalbnf+0x1e>
 80135b2:	f113 0f16 	cmn.w	r3, #22
 80135b6:	da06      	bge.n	80135c6 <scalbnf+0x92>
 80135b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80135bc:	4298      	cmp	r0, r3
 80135be:	dcdf      	bgt.n	8013580 <scalbnf+0x4c>
 80135c0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80135ec <scalbnf+0xb8>
 80135c4:	e7de      	b.n	8013584 <scalbnf+0x50>
 80135c6:	3319      	adds	r3, #25
 80135c8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80135cc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80135d0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80135f0 <scalbnf+0xbc>
 80135d4:	ee07 3a10 	vmov	s14, r3
 80135d8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80135dc:	e7b9      	b.n	8013552 <scalbnf+0x1e>
 80135de:	bf00      	nop
 80135e0:	ffff3cb0 	.word	0xffff3cb0
 80135e4:	4c000000 	.word	0x4c000000
 80135e8:	7149f2ca 	.word	0x7149f2ca
 80135ec:	0da24260 	.word	0x0da24260
 80135f0:	33000000 	.word	0x33000000

080135f4 <copysignf>:
 80135f4:	ee10 3a10 	vmov	r3, s0
 80135f8:	ee10 2a90 	vmov	r2, s1
 80135fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013600:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8013604:	4313      	orrs	r3, r2
 8013606:	ee00 3a10 	vmov	s0, r3
 801360a:	4770      	bx	lr

0801360c <_init>:
 801360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801360e:	bf00      	nop
 8013610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013612:	bc08      	pop	{r3}
 8013614:	469e      	mov	lr, r3
 8013616:	4770      	bx	lr

08013618 <_fini>:
 8013618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801361a:	bf00      	nop
 801361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801361e:	bc08      	pop	{r3}
 8013620:	469e      	mov	lr, r3
 8013622:	4770      	bx	lr
